
STM32F427GPIOTESTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a00  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c70  08004c70  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c78  08004c78  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a84  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004af8  20004af8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014eb8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c48  00000000  00000000  00034f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00037ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001058  00000000  00000000  00038d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d0f  00000000  00000000  00039d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ea1  00000000  00000000  0003ca8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000debcf  00000000  00000000  0004e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d4ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c68  00000000  00000000  0012d550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004b98 	.word	0x08004b98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08004b98 	.word	0x08004b98

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa6a 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f816 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f874 	bl	80005ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f001 fcce 	bl	8001ea4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <main+0x2c>)
 800050a:	2100      	movs	r1, #0
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <main+0x30>)
 800050e:	f001 fd13 	bl	8001f38 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <main+0x34>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f001 fce8 	bl	8001eec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x28>
 800051e:	bf00      	nop
 8000520:	08004bd4 	.word	0x08004bd4
 8000524:	080006e5 	.word	0x080006e5
 8000528:	20000090 	.word	0x20000090

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 fa62 	bl	8004a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <SystemClock_Config+0xb8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <SystemClock_Config+0xb8>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <SystemClock_Config+0xb8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <SystemClock_Config+0xbc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <SystemClock_Config+0xbc>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <SystemClock_Config+0xbc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fd17 	bl	8000fd4 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005ac:	f000 f910 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 ff7a 	bl	80014c4 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d6:	f000 f8fb 	bl	80007d0 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b35      	ldr	r3, [pc, #212]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a34      	ldr	r2, [pc, #208]	; (80006dc <MX_GPIO_Init+0xf0>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a2d      	ldr	r2, [pc, #180]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a26      	ldr	r2, [pc, #152]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b24      	ldr	r3, [pc, #144]	; (80006dc <MX_GPIO_Init+0xf0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_GPIO_Init+0xf0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a18      	ldr	r2, [pc, #96]	; (80006dc <MX_GPIO_Init+0xf0>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800068e:	2200      	movs	r2, #0
 8000690:	f640 413f 	movw	r1, #3135	; 0xc3f
 8000694:	4812      	ldr	r0, [pc, #72]	; (80006e0 <MX_GPIO_Init+0xf4>)
 8000696:	f000 fc83 	bl	8000fa0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF10 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800069a:	f640 433f 	movw	r3, #3135	; 0xc3f
 800069e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_GPIO_Init+0xf4>)
 80006b4:	f000 fab0 	bl	8000c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80006b8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_GPIO_Init+0xf4>)
 80006ce:	f000 faa3 	bl	8000c18 <HAL_GPIO_Init>

}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40021400 	.word	0x40021400

080006e4 <StartDefaultTask>:
 * When PF6=1 и PF7=1, then PF10=1, otherwise PF10=0;
 * When PF8=1 и PF9=1, then PF11=1, otherwise PF11=0;
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	/* A BABY TALKS FOR */
	auto gf6 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	482e      	ldr	r0, [pc, #184]	; (80007a8 <StartDefaultTask+0xc4>)
 80006f0:	f000 fc3e 	bl	8000f70 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	61fb      	str	r3, [r7, #28]
	auto gf7 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	482b      	ldr	r0, [pc, #172]	; (80007a8 <StartDefaultTask+0xc4>)
 80006fc:	f000 fc38 	bl	8000f70 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	61bb      	str	r3, [r7, #24]
	auto gf8 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000708:	4827      	ldr	r0, [pc, #156]	; (80007a8 <StartDefaultTask+0xc4>)
 800070a:	f000 fc31 	bl	8000f70 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	617b      	str	r3, [r7, #20]
	auto gf9 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4824      	ldr	r0, [pc, #144]	; (80007a8 <StartDefaultTask+0xc4>)
 8000718:	f000 fc2a 	bl	8000f70 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	613b      	str	r3, [r7, #16]
	auto gf10 = gf6 == GPIO_PIN_SET && gf7 == GPIO_PIN_SET;
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d104      	bne.n	8000730 <StartDefaultTask+0x4c>
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d101      	bne.n	8000730 <StartDefaultTask+0x4c>
 800072c:	2301      	movs	r3, #1
 800072e:	e000      	b.n	8000732 <StartDefaultTask+0x4e>
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
	auto gf11 = gf8 == GPIO_PIN_SET && gf9 == GPIO_PIN_SET;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d104      	bne.n	8000744 <StartDefaultTask+0x60>
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d101      	bne.n	8000744 <StartDefaultTask+0x60>
 8000740:	2301      	movs	r3, #1
 8000742:	e000      	b.n	8000746 <StartDefaultTask+0x62>
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, gf6);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	2101      	movs	r1, #1
 8000750:	4815      	ldr	r0, [pc, #84]	; (80007a8 <StartDefaultTask+0xc4>)
 8000752:	f000 fc25 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, gf7);
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	461a      	mov	r2, r3
 800075c:	2102      	movs	r1, #2
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <StartDefaultTask+0xc4>)
 8000760:	f000 fc1e 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, gf8);
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	2104      	movs	r1, #4
 800076c:	480e      	ldr	r0, [pc, #56]	; (80007a8 <StartDefaultTask+0xc4>)
 800076e:	f000 fc17 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, gf9);
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	2108      	movs	r1, #8
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <StartDefaultTask+0xc4>)
 800077c:	f000 fc10 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, gf8);
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	461a      	mov	r2, r3
 8000786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <StartDefaultTask+0xc4>)
 800078c:	f000 fc08 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, gf9);
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	461a      	mov	r2, r3
 8000796:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079a:	4803      	ldr	r0, [pc, #12]	; (80007a8 <StartDefaultTask+0xc4>)
 800079c:	f000 fc00 	bl	8000fa0 <HAL_GPIO_WritePin>

    osDelay(10);
 80007a0:	200a      	movs	r0, #10
 80007a2:	f001 fc5b 	bl	800205c <osDelay>
  {
 80007a6:	e7a1      	b.n	80006ec <StartDefaultTask+0x8>
 80007a8:	40021400 	.word	0x40021400

080007ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d101      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007be:	f000 f929 	bl	8000a14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40010000 	.word	0x40010000

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_MspInit+0x54>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a11      	ldr	r2, [pc, #68]	; (8000830 <HAL_MspInit+0x54>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x54>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_MspInit+0x54>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <HAL_MspInit+0x54>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_MspInit+0x54>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	210f      	movs	r1, #15
 800081e:	f06f 0001 	mvn.w	r0, #1
 8000822:	f000 f9cf 	bl	8000bc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <HAL_InitTick+0xd0>)
 800084a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084c:	4a2d      	ldr	r2, [pc, #180]	; (8000904 <HAL_InitTick+0xd0>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6453      	str	r3, [r2, #68]	; 0x44
 8000854:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <HAL_InitTick+0xd0>)
 8000856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000860:	f107 020c 	add.w	r2, r7, #12
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4611      	mov	r1, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fff6 	bl	800185c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000870:	f000 ffe0 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
 8000874:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000878:	4a23      	ldr	r2, [pc, #140]	; (8000908 <HAL_InitTick+0xd4>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	0c9b      	lsrs	r3, r3, #18
 8000880:	3b01      	subs	r3, #1
 8000882:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <HAL_InitTick+0xd8>)
 8000886:	4a22      	ldr	r2, [pc, #136]	; (8000910 <HAL_InitTick+0xdc>)
 8000888:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <HAL_InitTick+0xd8>)
 800088c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000890:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000892:	4a1e      	ldr	r2, [pc, #120]	; (800090c <HAL_InitTick+0xd8>)
 8000894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000896:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_InitTick+0xd8>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_InitTick+0xd8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_InitTick+0xd8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008aa:	4818      	ldr	r0, [pc, #96]	; (800090c <HAL_InitTick+0xd8>)
 80008ac:	f001 f808 	bl	80018c0 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d11b      	bne.n	80008f6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008be:	4813      	ldr	r0, [pc, #76]	; (800090c <HAL_InitTick+0xd8>)
 80008c0:	f001 f858 	bl	8001974 <HAL_TIM_Base_Start_IT>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d111      	bne.n	80008f6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008d2:	2019      	movs	r0, #25
 80008d4:	f000 f992 	bl	8000bfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b0f      	cmp	r3, #15
 80008dc:	d808      	bhi.n	80008f0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008de:	2200      	movs	r2, #0
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	2019      	movs	r0, #25
 80008e4:	f000 f96e 	bl	8000bc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_InitTick+0xe0>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	e002      	b.n	80008f6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	431bde83 	.word	0x431bde83
 800090c:	20000094 	.word	0x20000094
 8000910:	40010000 	.word	0x40010000
 8000914:	20000004 	.word	0x20000004

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800094a:	f001 f883 	bl	8001a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000094 	.word	0x20000094

08000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000982:	490e      	ldr	r1, [pc, #56]	; (80009bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000998:	4c0b      	ldr	r4, [pc, #44]	; (80009c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a6:	f7ff ffd7 	bl	8000958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f003 fff7 	bl	800499c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fda1 	bl	80004f4 <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009c0:	08004c80 	.word	0x08004c80
  ldr r2, =_sbss
 80009c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009c8:	20004af8 	.word	0x20004af8

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <HAL_Init+0x40>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_Init+0x40>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x40>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f8d8 	bl	8000bae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f7ff ff18 	bl	8000834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff feea 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023c00 	.word	0x40023c00

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	200000dc 	.word	0x200000dc

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	200000dc 	.word	0x200000dc

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4907      	ldr	r1, [pc, #28]	; (8000af0 <__NVIC_EnableIRQ+0x38>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ff4c 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd6:	f7ff ff61 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000bda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	68b9      	ldr	r1, [r7, #8]
 8000be0:	6978      	ldr	r0, [r7, #20]
 8000be2:	f7ff ffb1 	bl	8000b48 <NVIC_EncodePriority>
 8000be6:	4602      	mov	r2, r0
 8000be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff80 	bl	8000af4 <__NVIC_SetPriority>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff54 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	e177      	b.n	8000f24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 8166 	bne.w	8000f1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d005      	beq.n	8000c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d130      	bne.n	8000ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	091b      	lsrs	r3, r3, #4
 8000cb6:	f003 0201 	and.w	r2, r3, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d017      	beq.n	8000d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d123      	bne.n	8000d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0203 	and.w	r2, r3, #3
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80c0 	beq.w	8000f1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b66      	ldr	r3, [pc, #408]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a65      	ldr	r2, [pc, #404]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b63      	ldr	r3, [pc, #396]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dba:	4a61      	ldr	r2, [pc, #388]	; (8000f40 <HAL_GPIO_Init+0x328>)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a58      	ldr	r2, [pc, #352]	; (8000f44 <HAL_GPIO_Init+0x32c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d037      	beq.n	8000e56 <HAL_GPIO_Init+0x23e>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a57      	ldr	r2, [pc, #348]	; (8000f48 <HAL_GPIO_Init+0x330>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d031      	beq.n	8000e52 <HAL_GPIO_Init+0x23a>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a56      	ldr	r2, [pc, #344]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d02b      	beq.n	8000e4e <HAL_GPIO_Init+0x236>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a55      	ldr	r2, [pc, #340]	; (8000f50 <HAL_GPIO_Init+0x338>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d025      	beq.n	8000e4a <HAL_GPIO_Init+0x232>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a54      	ldr	r2, [pc, #336]	; (8000f54 <HAL_GPIO_Init+0x33c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01f      	beq.n	8000e46 <HAL_GPIO_Init+0x22e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a53      	ldr	r2, [pc, #332]	; (8000f58 <HAL_GPIO_Init+0x340>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x22a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a52      	ldr	r2, [pc, #328]	; (8000f5c <HAL_GPIO_Init+0x344>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x226>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a51      	ldr	r2, [pc, #324]	; (8000f60 <HAL_GPIO_Init+0x348>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x222>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a50      	ldr	r2, [pc, #320]	; (8000f64 <HAL_GPIO_Init+0x34c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x21e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4f      	ldr	r2, [pc, #316]	; (8000f68 <HAL_GPIO_Init+0x350>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x21a>
 8000e2e:	2309      	movs	r3, #9
 8000e30:	e012      	b.n	8000e58 <HAL_GPIO_Init+0x240>
 8000e32:	230a      	movs	r3, #10
 8000e34:	e010      	b.n	8000e58 <HAL_GPIO_Init+0x240>
 8000e36:	2308      	movs	r3, #8
 8000e38:	e00e      	b.n	8000e58 <HAL_GPIO_Init+0x240>
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	e00c      	b.n	8000e58 <HAL_GPIO_Init+0x240>
 8000e3e:	2306      	movs	r3, #6
 8000e40:	e00a      	b.n	8000e58 <HAL_GPIO_Init+0x240>
 8000e42:	2305      	movs	r3, #5
 8000e44:	e008      	b.n	8000e58 <HAL_GPIO_Init+0x240>
 8000e46:	2304      	movs	r3, #4
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x240>
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e004      	b.n	8000e58 <HAL_GPIO_Init+0x240>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x240>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x240>
 8000e56:	2300      	movs	r3, #0
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	f002 0203 	and.w	r2, r2, #3
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4093      	lsls	r3, r2
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e68:	4935      	ldr	r1, [pc, #212]	; (8000f40 <HAL_GPIO_Init+0x328>)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e76:	4b3d      	ldr	r3, [pc, #244]	; (8000f6c <HAL_GPIO_Init+0x354>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e9a:	4a34      	ldr	r2, [pc, #208]	; (8000f6c <HAL_GPIO_Init+0x354>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea0:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <HAL_GPIO_Init+0x354>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ec4:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <HAL_GPIO_Init+0x354>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <HAL_GPIO_Init+0x354>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eee:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <HAL_GPIO_Init+0x354>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <HAL_GPIO_Init+0x354>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <HAL_GPIO_Init+0x354>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3301      	adds	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	2b0f      	cmp	r3, #15
 8000f28:	f67f ae84 	bls.w	8000c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40013800 	.word	0x40013800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020c00 	.word	0x40020c00
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40021400 	.word	0x40021400
 8000f5c:	40021800 	.word	0x40021800
 8000f60:	40021c00 	.word	0x40021c00
 8000f64:	40022000 	.word	0x40022000
 8000f68:	40022400 	.word	0x40022400
 8000f6c:	40013c00 	.word	0x40013c00

08000f70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e001      	b.n	8000f92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fbc:	e003      	b.n	8000fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e267      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d075      	beq.n	80010de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ff2:	4b88      	ldr	r3, [pc, #544]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d00c      	beq.n	8001018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ffe:	4b85      	ldr	r3, [pc, #532]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001006:	2b08      	cmp	r3, #8
 8001008:	d112      	bne.n	8001030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800100a:	4b82      	ldr	r3, [pc, #520]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001016:	d10b      	bne.n	8001030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001018:	4b7e      	ldr	r3, [pc, #504]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d05b      	beq.n	80010dc <HAL_RCC_OscConfig+0x108>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d157      	bne.n	80010dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e242      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001038:	d106      	bne.n	8001048 <HAL_RCC_OscConfig+0x74>
 800103a:	4b76      	ldr	r3, [pc, #472]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a75      	ldr	r2, [pc, #468]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e01d      	b.n	8001084 <HAL_RCC_OscConfig+0xb0>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001050:	d10c      	bne.n	800106c <HAL_RCC_OscConfig+0x98>
 8001052:	4b70      	ldr	r3, [pc, #448]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a6f      	ldr	r2, [pc, #444]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b6d      	ldr	r3, [pc, #436]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a6c      	ldr	r2, [pc, #432]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e00b      	b.n	8001084 <HAL_RCC_OscConfig+0xb0>
 800106c:	4b69      	ldr	r3, [pc, #420]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a68      	ldr	r2, [pc, #416]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b66      	ldr	r3, [pc, #408]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a65      	ldr	r2, [pc, #404]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 800107e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fcd6 	bl	8000a3c <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fcd2 	bl	8000a3c <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e207      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	4b5b      	ldr	r3, [pc, #364]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0xc0>
 80010b2:	e014      	b.n	80010de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fcc2 	bl	8000a3c <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fcbe 	bl	8000a3c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	; 0x64
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e1f3      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ce:	4b51      	ldr	r3, [pc, #324]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f0      	bne.n	80010bc <HAL_RCC_OscConfig+0xe8>
 80010da:	e000      	b.n	80010de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d063      	beq.n	80011b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ea:	4b4a      	ldr	r3, [pc, #296]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00b      	beq.n	800110e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f6:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d11c      	bne.n	800113c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001102:	4b44      	ldr	r3, [pc, #272]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d116      	bne.n	800113c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110e:	4b41      	ldr	r3, [pc, #260]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d005      	beq.n	8001126 <HAL_RCC_OscConfig+0x152>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d001      	beq.n	8001126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e1c7      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4937      	ldr	r1, [pc, #220]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113a:	e03a      	b.n	80011b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d020      	beq.n	8001186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001144:	4b34      	ldr	r3, [pc, #208]	; (8001218 <HAL_RCC_OscConfig+0x244>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114a:	f7ff fc77 	bl	8000a3c <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fc73 	bl	8000a3c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e1a8      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4925      	ldr	r1, [pc, #148]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
 8001184:	e015      	b.n	80011b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <HAL_RCC_OscConfig+0x244>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118c:	f7ff fc56 	bl	8000a3c <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001194:	f7ff fc52 	bl	8000a3c <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e187      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d036      	beq.n	800122c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d016      	beq.n	80011f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_RCC_OscConfig+0x248>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011cc:	f7ff fc36 	bl	8000a3c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc32 	bl	8000a3c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e167      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_RCC_OscConfig+0x240>)
 80011e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x200>
 80011f2:	e01b      	b.n	800122c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_RCC_OscConfig+0x248>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fc1f 	bl	8000a3c <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001200:	e00e      	b.n	8001220 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001202:	f7ff fc1b 	bl	8000a3c <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d907      	bls.n	8001220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e150      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
 8001214:	40023800 	.word	0x40023800
 8001218:	42470000 	.word	0x42470000
 800121c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001220:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 8001222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ea      	bne.n	8001202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 8097 	beq.w	8001368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800123e:	4b81      	ldr	r3, [pc, #516]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10f      	bne.n	800126a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b7d      	ldr	r3, [pc, #500]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a7c      	ldr	r2, [pc, #496]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b7a      	ldr	r3, [pc, #488]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001266:	2301      	movs	r3, #1
 8001268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126a:	4b77      	ldr	r3, [pc, #476]	; (8001448 <HAL_RCC_OscConfig+0x474>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001272:	2b00      	cmp	r3, #0
 8001274:	d118      	bne.n	80012a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001276:	4b74      	ldr	r3, [pc, #464]	; (8001448 <HAL_RCC_OscConfig+0x474>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a73      	ldr	r2, [pc, #460]	; (8001448 <HAL_RCC_OscConfig+0x474>)
 800127c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001282:	f7ff fbdb 	bl	8000a3c <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800128a:	f7ff fbd7 	bl	8000a3c <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e10c      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129c:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <HAL_RCC_OscConfig+0x474>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d106      	bne.n	80012be <HAL_RCC_OscConfig+0x2ea>
 80012b0:	4b64      	ldr	r3, [pc, #400]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b4:	4a63      	ldr	r2, [pc, #396]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6713      	str	r3, [r2, #112]	; 0x70
 80012bc:	e01c      	b.n	80012f8 <HAL_RCC_OscConfig+0x324>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x30c>
 80012c6:	4b5f      	ldr	r3, [pc, #380]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80012c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ca:	4a5e      	ldr	r2, [pc, #376]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6713      	str	r3, [r2, #112]	; 0x70
 80012d2:	4b5c      	ldr	r3, [pc, #368]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80012d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d6:	4a5b      	ldr	r2, [pc, #364]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6713      	str	r3, [r2, #112]	; 0x70
 80012de:	e00b      	b.n	80012f8 <HAL_RCC_OscConfig+0x324>
 80012e0:	4b58      	ldr	r3, [pc, #352]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e4:	4a57      	ldr	r2, [pc, #348]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	6713      	str	r3, [r2, #112]	; 0x70
 80012ec:	4b55      	ldr	r3, [pc, #340]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80012ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f0:	4a54      	ldr	r2, [pc, #336]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80012f2:	f023 0304 	bic.w	r3, r3, #4
 80012f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d015      	beq.n	800132c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001300:	f7ff fb9c 	bl	8000a3c <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001306:	e00a      	b.n	800131e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001308:	f7ff fb98 	bl	8000a3c <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f241 3288 	movw	r2, #5000	; 0x1388
 8001316:	4293      	cmp	r3, r2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e0cb      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131e:	4b49      	ldr	r3, [pc, #292]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 8001320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0ee      	beq.n	8001308 <HAL_RCC_OscConfig+0x334>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132c:	f7ff fb86 	bl	8000a3c <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001332:	e00a      	b.n	800134a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001334:	f7ff fb82 	bl	8000a3c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001342:	4293      	cmp	r3, r2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e0b5      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134a:	4b3e      	ldr	r3, [pc, #248]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 800134c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ee      	bne.n	8001334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d105      	bne.n	8001368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a38      	ldr	r2, [pc, #224]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 8001362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80a1 	beq.w	80014b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b08      	cmp	r3, #8
 800137c:	d05c      	beq.n	8001438 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d141      	bne.n	800140a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_RCC_OscConfig+0x478>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fb56 	bl	8000a3c <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff fb52 	bl	8000a3c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e087      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69da      	ldr	r2, [r3, #28]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	019b      	lsls	r3, r3, #6
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	085b      	lsrs	r3, r3, #1
 80013ca:	3b01      	subs	r3, #1
 80013cc:	041b      	lsls	r3, r3, #16
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	061b      	lsls	r3, r3, #24
 80013d6:	491b      	ldr	r1, [pc, #108]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_RCC_OscConfig+0x478>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fb2b 	bl	8000a3c <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff fb27 	bl	8000a3c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e05c      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x416>
 8001408:	e054      	b.n	80014b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_RCC_OscConfig+0x478>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fb14 	bl	8000a3c <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff fb10 	bl	8000a3c <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e045      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_RCC_OscConfig+0x470>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x444>
 8001436:	e03d      	b.n	80014b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d107      	bne.n	8001450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e038      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
 8001444:	40023800 	.word	0x40023800
 8001448:	40007000 	.word	0x40007000
 800144c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_RCC_OscConfig+0x4ec>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d028      	beq.n	80014b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001468:	429a      	cmp	r2, r3
 800146a:	d121      	bne.n	80014b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001476:	429a      	cmp	r2, r3
 8001478:	d11a      	bne.n	80014b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001480:	4013      	ands	r3, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001488:	4293      	cmp	r3, r2
 800148a:	d111      	bne.n	80014b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	085b      	lsrs	r3, r3, #1
 8001498:	3b01      	subs	r3, #1
 800149a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d107      	bne.n	80014b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0cc      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	4b68      	ldr	r3, [pc, #416]	; (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d90c      	bls.n	8001500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b65      	ldr	r3, [pc, #404]	; (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ee:	4b63      	ldr	r3, [pc, #396]	; (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0b8      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001518:	4b59      	ldr	r3, [pc, #356]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a58      	ldr	r2, [pc, #352]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001530:	4b53      	ldr	r3, [pc, #332]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a52      	ldr	r2, [pc, #328]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800153a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800153c:	4b50      	ldr	r3, [pc, #320]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	494d      	ldr	r1, [pc, #308]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d044      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	4b47      	ldr	r3, [pc, #284]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d119      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e07f      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d003      	beq.n	8001582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157e:	2b03      	cmp	r3, #3
 8001580:	d107      	bne.n	8001592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001582:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d109      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e06f      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e067      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f023 0203 	bic.w	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4934      	ldr	r1, [pc, #208]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b4:	f7ff fa42 	bl	8000a3c <HAL_GetTick>
 80015b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015bc:	f7ff fa3e 	bl	8000a3c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e04f      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 020c 	and.w	r2, r3, #12
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d1eb      	bne.n	80015bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015e4:	4b25      	ldr	r3, [pc, #148]	; (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d20c      	bcs.n	800160c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b22      	ldr	r3, [pc, #136]	; (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d001      	beq.n	800160c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e032      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d008      	beq.n	800162a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4916      	ldr	r1, [pc, #88]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d009      	beq.n	800164a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	490e      	ldr	r1, [pc, #56]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800164a:	f000 f821 	bl	8001690 <HAL_RCC_GetSysClockFreq>
 800164e:	4602      	mov	r2, r0
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	490a      	ldr	r1, [pc, #40]	; (8001684 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	5ccb      	ldrb	r3, [r1, r3]
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_RCC_ClockConfig+0x1c8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff f8e2 	bl	8000834 <HAL_InitTick>

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023c00 	.word	0x40023c00
 8001680:	40023800 	.word	0x40023800
 8001684:	08004bf8 	.word	0x08004bf8
 8001688:	20000000 	.word	0x20000000
 800168c:	20000004 	.word	0x20000004

08001690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001694:	b090      	sub	sp, #64	; 0x40
 8001696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
 800169c:	2300      	movs	r3, #0
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a0:	2300      	movs	r3, #0
 80016a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016a8:	4b59      	ldr	r3, [pc, #356]	; (8001810 <HAL_RCC_GetSysClockFreq+0x180>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 030c 	and.w	r3, r3, #12
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d00d      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x40>
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	f200 80a1 	bhi.w	80017fc <HAL_RCC_GetSysClockFreq+0x16c>
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x34>
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d003      	beq.n	80016ca <HAL_RCC_GetSysClockFreq+0x3a>
 80016c2:	e09b      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c4:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_GetSysClockFreq+0x184>)
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016c8:	e09b      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ca:	4b53      	ldr	r3, [pc, #332]	; (8001818 <HAL_RCC_GetSysClockFreq+0x188>)
 80016cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016ce:	e098      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d0:	4b4f      	ldr	r3, [pc, #316]	; (8001810 <HAL_RCC_GetSysClockFreq+0x180>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016da:	4b4d      	ldr	r3, [pc, #308]	; (8001810 <HAL_RCC_GetSysClockFreq+0x180>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d028      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e6:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <HAL_RCC_GetSysClockFreq+0x180>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	099b      	lsrs	r3, r3, #6
 80016ec:	2200      	movs	r2, #0
 80016ee:	623b      	str	r3, [r7, #32]
 80016f0:	627a      	str	r2, [r7, #36]	; 0x24
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016f8:	2100      	movs	r1, #0
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_RCC_GetSysClockFreq+0x188>)
 80016fc:	fb03 f201 	mul.w	r2, r3, r1
 8001700:	2300      	movs	r3, #0
 8001702:	fb00 f303 	mul.w	r3, r0, r3
 8001706:	4413      	add	r3, r2
 8001708:	4a43      	ldr	r2, [pc, #268]	; (8001818 <HAL_RCC_GetSysClockFreq+0x188>)
 800170a:	fba0 1202 	umull	r1, r2, r0, r2
 800170e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001710:	460a      	mov	r2, r1
 8001712:	62ba      	str	r2, [r7, #40]	; 0x28
 8001714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001716:	4413      	add	r3, r2
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171c:	2200      	movs	r2, #0
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	61fa      	str	r2, [r7, #28]
 8001722:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001726:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800172a:	f7fe fd61 	bl	80001f0 <__aeabi_uldivmod>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4613      	mov	r3, r2
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001736:	e053      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001738:	4b35      	ldr	r3, [pc, #212]	; (8001810 <HAL_RCC_GetSysClockFreq+0x180>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	2200      	movs	r2, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	617a      	str	r2, [r7, #20]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800174a:	f04f 0b00 	mov.w	fp, #0
 800174e:	4652      	mov	r2, sl
 8001750:	465b      	mov	r3, fp
 8001752:	f04f 0000 	mov.w	r0, #0
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	0159      	lsls	r1, r3, #5
 800175c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001760:	0150      	lsls	r0, r2, #5
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	ebb2 080a 	subs.w	r8, r2, sl
 800176a:	eb63 090b 	sbc.w	r9, r3, fp
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800177a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800177e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001782:	ebb2 0408 	subs.w	r4, r2, r8
 8001786:	eb63 0509 	sbc.w	r5, r3, r9
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	00eb      	lsls	r3, r5, #3
 8001794:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001798:	00e2      	lsls	r2, r4, #3
 800179a:	4614      	mov	r4, r2
 800179c:	461d      	mov	r5, r3
 800179e:	eb14 030a 	adds.w	r3, r4, sl
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	eb45 030b 	adc.w	r3, r5, fp
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017b6:	4629      	mov	r1, r5
 80017b8:	028b      	lsls	r3, r1, #10
 80017ba:	4621      	mov	r1, r4
 80017bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017c0:	4621      	mov	r1, r4
 80017c2:	028a      	lsls	r2, r1, #10
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ca:	2200      	movs	r2, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	60fa      	str	r2, [r7, #12]
 80017d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017d4:	f7fe fd0c 	bl	80001f0 <__aeabi_uldivmod>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4613      	mov	r3, r2
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_GetSysClockFreq+0x180>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	0c1b      	lsrs	r3, r3, #16
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	3301      	adds	r3, #1
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017fa:	e002      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_RCC_GetSysClockFreq+0x184>)
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001804:	4618      	mov	r0, r3
 8001806:	3740      	adds	r7, #64	; 0x40
 8001808:	46bd      	mov	sp, r7
 800180a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	00f42400 	.word	0x00f42400
 8001818:	017d7840 	.word	0x017d7840

0800181c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_RCC_GetHCLKFreq+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000

08001834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001838:	f7ff fff0 	bl	800181c <HAL_RCC_GetHCLKFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	0b5b      	lsrs	r3, r3, #13
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	4903      	ldr	r1, [pc, #12]	; (8001858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800184a:	5ccb      	ldrb	r3, [r1, r3]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	08004c08 	.word	0x08004c08

0800185c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	220f      	movs	r2, #15
 800186a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_RCC_GetClockConfig+0x60>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 020f 	and.w	r2, r3, #15
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	601a      	str	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e041      	b.n	8001956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f839 	bl	800195e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3304      	adds	r3, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f000 f9d8 	bl	8001cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d001      	beq.n	800198c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e04e      	b.n	8001a2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <HAL_TIM_Base_Start_IT+0xc4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d022      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b6:	d01d      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_TIM_Base_Start_IT+0xc8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d018      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <HAL_TIM_Base_Start_IT+0xcc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_TIM_Base_Start_IT+0xd0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00e      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_TIM_Base_Start_IT+0xd4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d009      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <HAL_TIM_Base_Start_IT+0xd8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d004      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x80>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <HAL_TIM_Base_Start_IT+0xdc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d111      	bne.n	8001a18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d010      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a16:	e007      	b.n	8001a28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40000800 	.word	0x40000800
 8001a44:	40000c00 	.word	0x40000c00
 8001a48:	40010400 	.word	0x40010400
 8001a4c:	40014000 	.word	0x40014000
 8001a50:	40001800 	.word	0x40001800

08001a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d122      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d11b      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0202 	mvn.w	r2, #2
 8001a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f8ee 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8e0 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8f1 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d122      	bne.n	8001b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d11b      	bne.n	8001b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0204 	mvn.w	r2, #4
 8001ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f8c4 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 8001af0:	e005      	b.n	8001afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f8b6 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f8c7 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d122      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d11b      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0208 	mvn.w	r2, #8
 8001b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f89a 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 8001b44:	e005      	b.n	8001b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f88c 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f89d 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d122      	bne.n	8001bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	d11b      	bne.n	8001bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0210 	mvn.w	r2, #16
 8001b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2208      	movs	r2, #8
 8001b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f870 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 8001b98:	e005      	b.n	8001ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f862 	bl	8001c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f873 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0201 	mvn.w	r2, #1
 8001bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fdea 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	2b80      	cmp	r3, #128	; 0x80
 8001be4:	d10e      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf0:	2b80      	cmp	r3, #128	; 0x80
 8001bf2:	d107      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f902 	bl	8001e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0e:	2b40      	cmp	r3, #64	; 0x40
 8001c10:	d10e      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1c:	2b40      	cmp	r3, #64	; 0x40
 8001c1e:	d107      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f838 	bl	8001ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d10e      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d107      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0220 	mvn.w	r2, #32
 8001c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8cc 	bl	8001df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a40      	ldr	r2, [pc, #256]	; (8001dc8 <TIM_Base_SetConfig+0x114>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d013      	beq.n	8001cf4 <TIM_Base_SetConfig+0x40>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd2:	d00f      	beq.n	8001cf4 <TIM_Base_SetConfig+0x40>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	; (8001dcc <TIM_Base_SetConfig+0x118>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d00b      	beq.n	8001cf4 <TIM_Base_SetConfig+0x40>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3c      	ldr	r2, [pc, #240]	; (8001dd0 <TIM_Base_SetConfig+0x11c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d007      	beq.n	8001cf4 <TIM_Base_SetConfig+0x40>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3b      	ldr	r2, [pc, #236]	; (8001dd4 <TIM_Base_SetConfig+0x120>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d003      	beq.n	8001cf4 <TIM_Base_SetConfig+0x40>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <TIM_Base_SetConfig+0x124>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d108      	bne.n	8001d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <TIM_Base_SetConfig+0x114>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d02b      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d14:	d027      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a2c      	ldr	r2, [pc, #176]	; (8001dcc <TIM_Base_SetConfig+0x118>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d023      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a2b      	ldr	r2, [pc, #172]	; (8001dd0 <TIM_Base_SetConfig+0x11c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a2a      	ldr	r2, [pc, #168]	; (8001dd4 <TIM_Base_SetConfig+0x120>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01b      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a29      	ldr	r2, [pc, #164]	; (8001dd8 <TIM_Base_SetConfig+0x124>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d017      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a28      	ldr	r2, [pc, #160]	; (8001ddc <TIM_Base_SetConfig+0x128>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a27      	ldr	r2, [pc, #156]	; (8001de0 <TIM_Base_SetConfig+0x12c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00f      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <TIM_Base_SetConfig+0x130>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00b      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <TIM_Base_SetConfig+0x134>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a24      	ldr	r2, [pc, #144]	; (8001dec <TIM_Base_SetConfig+0x138>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d003      	beq.n	8001d66 <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <TIM_Base_SetConfig+0x13c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d108      	bne.n	8001d78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <TIM_Base_SetConfig+0x114>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d003      	beq.n	8001dac <TIM_Base_SetConfig+0xf8>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <TIM_Base_SetConfig+0x124>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d103      	bne.n	8001db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	615a      	str	r2, [r3, #20]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	40000c00 	.word	0x40000c00
 8001dd8:	40010400 	.word	0x40010400
 8001ddc:	40014000 	.word	0x40014000
 8001de0:	40014400 	.word	0x40014400
 8001de4:	40014800 	.word	0x40014800
 8001de8:	40001800 	.word	0x40001800
 8001dec:	40001c00 	.word	0x40001c00
 8001df0:	40002000 	.word	0x40002000

08001df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <__NVIC_SetPriority>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SysTick_Handler+0x1c>)
 8001e76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001e78:	f001 fd28 	bl	80038cc <xTaskGetSchedulerState>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d001      	beq.n	8001e86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001e82:	f002 fb11 	bl	80044a8 <xPortSysTickHandler>
  }
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001e94:	2100      	movs	r1, #0
 8001e96:	f06f 0004 	mvn.w	r0, #4
 8001e9a:	f7ff ffbf 	bl	8001e1c <__NVIC_SetPriority>
#endif
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eaa:	f3ef 8305 	mrs	r3, IPSR
 8001eae:	603b      	str	r3, [r7, #0]
  return(result);
 8001eb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001eb6:	f06f 0305 	mvn.w	r3, #5
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	e00c      	b.n	8001ed8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <osKernelInitialize+0x44>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <osKernelInitialize+0x44>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	e002      	b.n	8001ed8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200000e0 	.word	0x200000e0

08001eec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ef2:	f3ef 8305 	mrs	r3, IPSR
 8001ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8001ef8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001efe:	f06f 0305 	mvn.w	r3, #5
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	e010      	b.n	8001f28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <osKernelStart+0x48>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d109      	bne.n	8001f22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f0e:	f7ff ffbf 	bl	8001e90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <osKernelStart+0x48>)
 8001f14:	2202      	movs	r2, #2
 8001f16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f18:	f001 f87c 	bl	8003014 <vTaskStartScheduler>
      stat = osOK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	e002      	b.n	8001f28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f28:	687b      	ldr	r3, [r7, #4]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200000e0 	.word	0x200000e0

08001f38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	; 0x38
 8001f3c:	af04      	add	r7, sp, #16
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f48:	f3ef 8305 	mrs	r3, IPSR
 8001f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8001f4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d17e      	bne.n	8002052 <osThreadNew+0x11a>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d07b      	beq.n	8002052 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f5e:	2318      	movs	r3, #24
 8001f60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d045      	beq.n	8001ffe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <osThreadNew+0x48>
        name = attr->name;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <osThreadNew+0x6e>
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b38      	cmp	r3, #56	; 0x38
 8001f98:	d805      	bhi.n	8001fa6 <osThreadNew+0x6e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <osThreadNew+0x72>
        return (NULL);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e054      	b.n	8002054 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00e      	beq.n	8001fe0 <osThreadNew+0xa8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2bbb      	cmp	r3, #187	; 0xbb
 8001fc8:	d90a      	bls.n	8001fe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <osThreadNew+0xa8>
        mem = 1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	e010      	b.n	8002002 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10c      	bne.n	8002002 <osThreadNew+0xca>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d108      	bne.n	8002002 <osThreadNew+0xca>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d104      	bne.n	8002002 <osThreadNew+0xca>
          mem = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	e001      	b.n	8002002 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d110      	bne.n	800202a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002010:	9202      	str	r2, [sp, #8]
 8002012:	9301      	str	r3, [sp, #4]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	6a3a      	ldr	r2, [r7, #32]
 800201c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fe0c 	bl	8002c3c <xTaskCreateStatic>
 8002024:	4603      	mov	r3, r0
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	e013      	b.n	8002052 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d110      	bne.n	8002052 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	b29a      	uxth	r2, r3
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fe57 	bl	8002cf6 <xTaskCreate>
 8002048:	4603      	mov	r3, r0
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <osThreadNew+0x11a>
            hTask = NULL;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002052:	693b      	ldr	r3, [r7, #16]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3728      	adds	r7, #40	; 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002064:	f3ef 8305 	mrs	r3, IPSR
 8002068:	60bb      	str	r3, [r7, #8]
  return(result);
 800206a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <osDelay+0x1c>
    stat = osErrorISR;
 8002070:	f06f 0305 	mvn.w	r3, #5
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e007      	b.n	8002088 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 ff92 	bl	8002fac <vTaskDelay>
    }
  }

  return (stat);
 8002088:	68fb      	ldr	r3, [r7, #12]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80020a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <vApplicationGetIdleTaskMemory+0x30>)
 80020aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	200000e4 	.word	0x200000e4
 80020c4:	200001a0 	.word	0x200001a0

080020c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80020d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <vApplicationGetTimerTaskMemory+0x30>)
 80020de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e6:	601a      	str	r2, [r3, #0]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	200003a0 	.word	0x200003a0
 80020f8:	2000045c 	.word	0x2000045c

080020fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f103 0208 	add.w	r2, r3, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f103 0208 	add.w	r2, r3, #8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0208 	add.w	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	601a      	str	r2, [r3, #0]
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b4:	d103      	bne.n	80021be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e00c      	b.n	80021d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3308      	adds	r3, #8
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e002      	b.n	80021cc <vListInsert+0x2e>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d2f6      	bcs.n	80021c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6892      	ldr	r2, [r2, #8]
 8002226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6852      	ldr	r2, [r2, #4]
 8002230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	d103      	bne.n	8002244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	1e5a      	subs	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10a      	bne.n	800228e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227c:	f383 8811 	msr	BASEPRI, r3
 8002280:	f3bf 8f6f 	isb	sy
 8002284:	f3bf 8f4f 	dsb	sy
 8002288:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800228a:	bf00      	nop
 800228c:	e7fe      	b.n	800228c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800228e:	f002 f879 	bl	8004384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	68f9      	ldr	r1, [r7, #12]
 800229c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	441a      	add	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	3b01      	subs	r3, #1
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	441a      	add	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	22ff      	movs	r2, #255	; 0xff
 80022d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	22ff      	movs	r2, #255	; 0xff
 80022da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d114      	bne.n	800230e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01a      	beq.n	8002322 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3310      	adds	r3, #16
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 f929 	bl	8003548 <xTaskRemoveFromEventList>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d012      	beq.n	8002322 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <xQueueGenericReset+0xcc>)
 80022fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	e009      	b.n	8002322 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3310      	adds	r3, #16
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fef2 	bl	80020fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3324      	adds	r3, #36	; 0x24
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff feed 	bl	80020fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002322:	f002 f85f 	bl	80043e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10a      	bne.n	800235e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800235a:	bf00      	nop
 800235c:	e7fe      	b.n	800235c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	f383 8811 	msr	BASEPRI, r3
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002376:	bf00      	nop
 8002378:	e7fe      	b.n	8002378 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <xQueueGenericCreateStatic+0x52>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <xQueueGenericCreateStatic+0x56>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <xQueueGenericCreateStatic+0x58>
 800238a:	2300      	movs	r3, #0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	623b      	str	r3, [r7, #32]
}
 80023a2:	bf00      	nop
 80023a4:	e7fe      	b.n	80023a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <xQueueGenericCreateStatic+0x7e>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <xQueueGenericCreateStatic+0x82>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <xQueueGenericCreateStatic+0x84>
 80023b6:	2300      	movs	r3, #0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	61fb      	str	r3, [r7, #28]
}
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023d2:	2350      	movs	r3, #80	; 0x50
 80023d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b50      	cmp	r3, #80	; 0x50
 80023da:	d00a      	beq.n	80023f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	61bb      	str	r3, [r7, #24]
}
 80023ee:	bf00      	nop
 80023f0:	e7fe      	b.n	80023f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80023f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80023f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00d      	beq.n	800241a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002406:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f805 	bl	8002424 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800241c:	4618      	mov	r0, r3
 800241e:	3730      	adds	r7, #48	; 0x30
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d103      	bne.n	8002440 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e002      	b.n	8002446 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002452:	2101      	movs	r1, #1
 8002454:	69b8      	ldr	r0, [r7, #24]
 8002456:	f7ff ff05 	bl	8002264 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800247a:	2300      	movs	r3, #0
 800247c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <xQueueGenericSend+0x32>
	__asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800249a:	bf00      	nop
 800249c:	e7fe      	b.n	800249c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d103      	bne.n	80024ac <xQueueGenericSend+0x40>
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <xQueueGenericSend+0x44>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <xQueueGenericSend+0x46>
 80024b0:	2300      	movs	r3, #0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <xQueueGenericSend+0x60>
	__asm volatile
 80024b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024c8:	bf00      	nop
 80024ca:	e7fe      	b.n	80024ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d103      	bne.n	80024da <xQueueGenericSend+0x6e>
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <xQueueGenericSend+0x72>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <xQueueGenericSend+0x74>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <xQueueGenericSend+0x8e>
	__asm volatile
 80024e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	623b      	str	r3, [r7, #32]
}
 80024f6:	bf00      	nop
 80024f8:	e7fe      	b.n	80024f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024fa:	f001 f9e7 	bl	80038cc <xTaskGetSchedulerState>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <xQueueGenericSend+0x9e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <xQueueGenericSend+0xa2>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <xQueueGenericSend+0xa4>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <xQueueGenericSend+0xbe>
	__asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	61fb      	str	r3, [r7, #28]
}
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800252a:	f001 ff2b 	bl	8004384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	429a      	cmp	r2, r3
 8002538:	d302      	bcc.n	8002540 <xQueueGenericSend+0xd4>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d129      	bne.n	8002594 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002546:	f000 fa0b 	bl	8002960 <prvCopyDataToQueue>
 800254a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	2b00      	cmp	r3, #0
 8002552:	d010      	beq.n	8002576 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	3324      	adds	r3, #36	; 0x24
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fff5 	bl	8003548 <xTaskRemoveFromEventList>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002564:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <xQueueGenericSend+0x1f8>)
 8002566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	e00a      	b.n	800258c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800257c:	4b39      	ldr	r3, [pc, #228]	; (8002664 <xQueueGenericSend+0x1f8>)
 800257e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800258c:	f001 ff2a 	bl	80043e4 <vPortExitCritical>
				return pdPASS;
 8002590:	2301      	movs	r3, #1
 8002592:	e063      	b.n	800265c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800259a:	f001 ff23 	bl	80043e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	e05c      	b.n	800265c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d106      	bne.n	80025b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4618      	mov	r0, r3
 80025ae:	f001 f82f 	bl	8003610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025b2:	2301      	movs	r3, #1
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025b6:	f001 ff15 	bl	80043e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025ba:	f000 fd9b 	bl	80030f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025be:	f001 fee1 	bl	8004384 <vPortEnterCritical>
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ce:	d103      	bne.n	80025d8 <xQueueGenericSend+0x16c>
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e4:	d103      	bne.n	80025ee <xQueueGenericSend+0x182>
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ee:	f001 fef9 	bl	80043e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025f2:	1d3a      	adds	r2, r7, #4
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 f81e 	bl	800363c <xTaskCheckForTimeOut>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d124      	bne.n	8002650 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002608:	f000 faa2 	bl	8002b50 <prvIsQueueFull>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d018      	beq.n	8002644 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	3310      	adds	r3, #16
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f000 ff44 	bl	80034a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002622:	f000 fa2d 	bl	8002a80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002626:	f000 fd73 	bl	8003110 <xTaskResumeAll>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	f47f af7c 	bne.w	800252a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <xQueueGenericSend+0x1f8>)
 8002634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	e772      	b.n	800252a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002646:	f000 fa1b 	bl	8002a80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800264a:	f000 fd61 	bl	8003110 <xTaskResumeAll>
 800264e:	e76c      	b.n	800252a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002652:	f000 fa15 	bl	8002a80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002656:	f000 fd5b 	bl	8003110 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800265a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800265c:	4618      	mov	r0, r3
 800265e:	3738      	adds	r7, #56	; 0x38
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	e000ed04 	.word	0xe000ed04

08002668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b090      	sub	sp, #64	; 0x40
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002692:	bf00      	nop
 8002694:	e7fe      	b.n	8002694 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d103      	bne.n	80026a4 <xQueueGenericSendFromISR+0x3c>
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <xQueueGenericSendFromISR+0x40>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <xQueueGenericSendFromISR+0x42>
 80026a8:	2300      	movs	r3, #0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026c0:	bf00      	nop
 80026c2:	e7fe      	b.n	80026c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d103      	bne.n	80026d2 <xQueueGenericSendFromISR+0x6a>
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <xQueueGenericSendFromISR+0x6e>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <xQueueGenericSendFromISR+0x70>
 80026d6:	2300      	movs	r3, #0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	623b      	str	r3, [r7, #32]
}
 80026ee:	bf00      	nop
 80026f0:	e7fe      	b.n	80026f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026f2:	f001 ff29 	bl	8004548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026f6:	f3ef 8211 	mrs	r2, BASEPRI
 80026fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fe:	f383 8811 	msr	BASEPRI, r3
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	61fa      	str	r2, [r7, #28]
 800270c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800270e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	429a      	cmp	r2, r3
 800271c:	d302      	bcc.n	8002724 <xQueueGenericSendFromISR+0xbc>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d12f      	bne.n	8002784 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800272a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800273a:	f000 f911 	bl	8002960 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800273e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002746:	d112      	bne.n	800276e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2b00      	cmp	r3, #0
 800274e:	d016      	beq.n	800277e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	3324      	adds	r3, #36	; 0x24
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fef7 	bl	8003548 <xTaskRemoveFromEventList>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00e      	beq.n	800277e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e007      	b.n	800277e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800276e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002772:	3301      	adds	r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	b25a      	sxtb	r2, r3
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800277e:	2301      	movs	r3, #1
 8002780:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002782:	e001      	b.n	8002788 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002784:	2300      	movs	r3, #0
 8002786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002792:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002796:	4618      	mov	r0, r3
 8002798:	3740      	adds	r7, #64	; 0x40
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	; 0x30
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <xQueueReceive+0x30>
	__asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	623b      	str	r3, [r7, #32]
}
 80027cc:	bf00      	nop
 80027ce:	e7fe      	b.n	80027ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <xQueueReceive+0x3e>
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <xQueueReceive+0x42>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <xQueueReceive+0x44>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <xQueueReceive+0x5e>
	__asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	61fb      	str	r3, [r7, #28]
}
 80027fa:	bf00      	nop
 80027fc:	e7fe      	b.n	80027fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027fe:	f001 f865 	bl	80038cc <xTaskGetSchedulerState>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <xQueueReceive+0x6e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <xQueueReceive+0x72>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <xQueueReceive+0x74>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xQueueReceive+0x8e>
	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	61bb      	str	r3, [r7, #24]
}
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800282e:	f001 fda9 	bl	8004384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01f      	beq.n	800287e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002842:	f000 f8f7 	bl	8002a34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	1e5a      	subs	r2, r3, #1
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00f      	beq.n	8002876 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	3310      	adds	r3, #16
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fe74 	bl	8003548 <xTaskRemoveFromEventList>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002866:	4b3d      	ldr	r3, [pc, #244]	; (800295c <xQueueReceive+0x1bc>)
 8002868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002876:	f001 fdb5 	bl	80043e4 <vPortExitCritical>
				return pdPASS;
 800287a:	2301      	movs	r3, #1
 800287c:	e069      	b.n	8002952 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d103      	bne.n	800288c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002884:	f001 fdae 	bl	80043e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002888:	2300      	movs	r3, #0
 800288a:	e062      	b.n	8002952 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	4618      	mov	r0, r3
 8002898:	f000 feba 	bl	8003610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800289c:	2301      	movs	r3, #1
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028a0:	f001 fda0 	bl	80043e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028a4:	f000 fc26 	bl	80030f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028a8:	f001 fd6c 	bl	8004384 <vPortEnterCritical>
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b8:	d103      	bne.n	80028c2 <xQueueReceive+0x122>
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028c8:	b25b      	sxtb	r3, r3
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ce:	d103      	bne.n	80028d8 <xQueueReceive+0x138>
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028d8:	f001 fd84 	bl	80043e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028dc:	1d3a      	adds	r2, r7, #4
 80028de:	f107 0310 	add.w	r3, r7, #16
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fea9 	bl	800363c <xTaskCheckForTimeOut>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d123      	bne.n	8002938 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f2:	f000 f917 	bl	8002b24 <prvIsQueueEmpty>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d017      	beq.n	800292c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	3324      	adds	r3, #36	; 0x24
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fdcf 	bl	80034a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800290a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800290c:	f000 f8b8 	bl	8002a80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002910:	f000 fbfe 	bl	8003110 <xTaskResumeAll>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d189      	bne.n	800282e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <xQueueReceive+0x1bc>)
 800291c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	e780      	b.n	800282e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800292c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800292e:	f000 f8a7 	bl	8002a80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002932:	f000 fbed 	bl	8003110 <xTaskResumeAll>
 8002936:	e77a      	b.n	800282e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800293a:	f000 f8a1 	bl	8002a80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800293e:	f000 fbe7 	bl	8003110 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002944:	f000 f8ee 	bl	8002b24 <prvIsQueueEmpty>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f43f af6f 	beq.w	800282e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002950:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002952:	4618      	mov	r0, r3
 8002954:	3730      	adds	r7, #48	; 0x30
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10d      	bne.n	800299a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d14d      	bne.n	8002a22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 ffbc 	bl	8003908 <xTaskPriorityDisinherit>
 8002990:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	e043      	b.n	8002a22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d119      	bne.n	80029d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6858      	ldr	r0, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	461a      	mov	r2, r3
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	f002 f81c 	bl	80049e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	441a      	add	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d32b      	bcc.n	8002a22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	e026      	b.n	8002a22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68d8      	ldr	r0, [r3, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	461a      	mov	r2, r3
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	f002 f802 	bl	80049e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	425b      	negs	r3, r3
 80029ee:	441a      	add	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d207      	bcs.n	8002a10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	425b      	negs	r3, r3
 8002a0a:	441a      	add	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d105      	bne.n	8002a22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a2a:	697b      	ldr	r3, [r7, #20]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d018      	beq.n	8002a78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	441a      	add	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d303      	bcc.n	8002a68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68d9      	ldr	r1, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	461a      	mov	r2, r3
 8002a72:	6838      	ldr	r0, [r7, #0]
 8002a74:	f001 ffb8 	bl	80049e8 <memcpy>
	}
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a88:	f001 fc7c 	bl	8004384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a94:	e011      	b.n	8002aba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d012      	beq.n	8002ac4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3324      	adds	r3, #36	; 0x24
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fd50 	bl	8003548 <xTaskRemoveFromEventList>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002aae:	f000 fe27 	bl	8003700 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	dce9      	bgt.n	8002a96 <prvUnlockQueue+0x16>
 8002ac2:	e000      	b.n	8002ac6 <prvUnlockQueue+0x46>
					break;
 8002ac4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ace:	f001 fc89 	bl	80043e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ad2:	f001 fc57 	bl	8004384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002adc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ade:	e011      	b.n	8002b04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d012      	beq.n	8002b0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3310      	adds	r3, #16
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fd2b 	bl	8003548 <xTaskRemoveFromEventList>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002af8:	f000 fe02 	bl	8003700 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002afc:	7bbb      	ldrb	r3, [r7, #14]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	dce9      	bgt.n	8002ae0 <prvUnlockQueue+0x60>
 8002b0c:	e000      	b.n	8002b10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	22ff      	movs	r2, #255	; 0xff
 8002b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b18:	f001 fc64 	bl	80043e4 <vPortExitCritical>
}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b2c:	f001 fc2a 	bl	8004384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e001      	b.n	8002b42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b42:	f001 fc4f 	bl	80043e4 <vPortExitCritical>

	return xReturn;
 8002b46:	68fb      	ldr	r3, [r7, #12]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b58:	f001 fc14 	bl	8004384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d102      	bne.n	8002b6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	e001      	b.n	8002b72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b72:	f001 fc37 	bl	80043e4 <vPortExitCritical>

	return xReturn;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	e014      	b.n	8002bba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b90:	4a0f      	ldr	r2, [pc, #60]	; (8002bd0 <vQueueAddToRegistry+0x50>)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b9c:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <vQueueAddToRegistry+0x50>)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <vQueueAddToRegistry+0x50>)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002bb2:	e006      	b.n	8002bc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b07      	cmp	r3, #7
 8002bbe:	d9e7      	bls.n	8002b90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	2000085c 	.word	0x2000085c

08002bd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002be4:	f001 fbce 	bl	8004384 <vPortEnterCritical>
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bee:	b25b      	sxtb	r3, r3
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf4:	d103      	bne.n	8002bfe <vQueueWaitForMessageRestricted+0x2a>
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0a:	d103      	bne.n	8002c14 <vQueueWaitForMessageRestricted+0x40>
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c14:	f001 fbe6 	bl	80043e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d106      	bne.n	8002c2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3324      	adds	r3, #36	; 0x24
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fc61 	bl	80034f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	f7ff ff26 	bl	8002a80 <prvUnlockQueue>
	}
 8002c34:	bf00      	nop
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08e      	sub	sp, #56	; 0x38
 8002c40:	af04      	add	r7, sp, #16
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	623b      	str	r3, [r7, #32]
}
 8002c62:	bf00      	nop
 8002c64:	e7fe      	b.n	8002c64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	61fb      	str	r3, [r7, #28]
}
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c82:	23bc      	movs	r3, #188	; 0xbc
 8002c84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2bbc      	cmp	r3, #188	; 0xbc
 8002c8a:	d00a      	beq.n	8002ca2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	61bb      	str	r3, [r7, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ca2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01e      	beq.n	8002ce8 <xTaskCreateStatic+0xac>
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01b      	beq.n	8002ce8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9303      	str	r3, [sp, #12]
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	9302      	str	r3, [sp, #8]
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f850 	bl	8002d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ce2:	f000 f8f3 	bl	8002ecc <prvAddNewTaskToReadyList>
 8002ce6:	e001      	b.n	8002cec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002cec:	697b      	ldr	r3, [r7, #20]
	}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3728      	adds	r7, #40	; 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b08c      	sub	sp, #48	; 0x30
 8002cfa:	af04      	add	r7, sp, #16
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 fc5c 	bl	80045c8 <pvPortMalloc>
 8002d10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00e      	beq.n	8002d36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d18:	20bc      	movs	r0, #188	; 0xbc
 8002d1a:	f001 fc55 	bl	80045c8 <pvPortMalloc>
 8002d1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d2c:	e005      	b.n	8002d3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d2e:	6978      	ldr	r0, [r7, #20]
 8002d30:	f001 fd16 	bl	8004760 <vPortFree>
 8002d34:	e001      	b.n	8002d3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9303      	str	r3, [sp, #12]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	9302      	str	r3, [sp, #8]
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	9301      	str	r3, [sp, #4]
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f80e 	bl	8002d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d64:	69f8      	ldr	r0, [r7, #28]
 8002d66:	f000 f8b1 	bl	8002ecc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	e002      	b.n	8002d76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d76:	69bb      	ldr	r3, [r7, #24]
	}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	461a      	mov	r2, r3
 8002d98:	21a5      	movs	r1, #165	; 0xa5
 8002d9a:	f001 fe33 	bl	8004a04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002da8:	3b01      	subs	r3, #1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f023 0307 	bic.w	r3, r3, #7
 8002db6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	617b      	str	r3, [r7, #20]
}
 8002dd4:	bf00      	nop
 8002dd6:	e7fe      	b.n	8002dd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01f      	beq.n	8002e1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	e012      	b.n	8002e0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	7819      	ldrb	r1, [r3, #0]
 8002dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	4413      	add	r3, r2
 8002df2:	3334      	adds	r3, #52	; 0x34
 8002df4:	460a      	mov	r2, r1
 8002df6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d006      	beq.n	8002e12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	3301      	adds	r3, #1
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	2b0f      	cmp	r3, #15
 8002e0e:	d9e9      	bls.n	8002de4 <prvInitialiseNewTask+0x64>
 8002e10:	e000      	b.n	8002e14 <prvInitialiseNewTask+0x94>
			{
				break;
 8002e12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e1c:	e003      	b.n	8002e26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	2b37      	cmp	r3, #55	; 0x37
 8002e2a:	d901      	bls.n	8002e30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e2c:	2337      	movs	r3, #55	; 0x37
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	2200      	movs	r2, #0
 8002e40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	3304      	adds	r3, #4
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f978 	bl	800213c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	3318      	adds	r3, #24
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f973 	bl	800213c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	3354      	adds	r3, #84	; 0x54
 8002e80:	2260      	movs	r2, #96	; 0x60
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fdbd 	bl	8004a04 <memset>
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <prvInitialiseNewTask+0x140>)
 8002e8e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e92:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <prvInitialiseNewTask+0x144>)
 8002e94:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	4a0b      	ldr	r2, [pc, #44]	; (8002ec8 <prvInitialiseNewTask+0x148>)
 8002e9a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	68f9      	ldr	r1, [r7, #12]
 8002ea0:	69b8      	ldr	r0, [r7, #24]
 8002ea2:	f001 f941 	bl	8004128 <pxPortInitialiseStack>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002eb8:	bf00      	nop
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	08004c30 	.word	0x08004c30
 8002ec4:	08004c50 	.word	0x08004c50
 8002ec8:	08004c10 	.word	0x08004c10

08002ecc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ed4:	f001 fa56 	bl	8004384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ed8:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <prvAddNewTaskToReadyList+0xc4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <prvAddNewTaskToReadyList+0xc4>)
 8002ee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ee2:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <prvAddNewTaskToReadyList+0xc8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002eea:	4a2a      	ldr	r2, [pc, #168]	; (8002f94 <prvAddNewTaskToReadyList+0xc8>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ef0:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <prvAddNewTaskToReadyList+0xc4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d110      	bne.n	8002f1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ef8:	f000 fc26 	bl	8003748 <prvInitialiseTaskLists>
 8002efc:	e00d      	b.n	8002f1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002efe:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <prvAddNewTaskToReadyList+0xcc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f06:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <prvAddNewTaskToReadyList+0xc8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d802      	bhi.n	8002f1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f14:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <prvAddNewTaskToReadyList+0xc8>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <prvAddNewTaskToReadyList+0xd0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <prvAddNewTaskToReadyList+0xd0>)
 8002f22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <prvAddNewTaskToReadyList+0xd0>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <prvAddNewTaskToReadyList+0xd4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d903      	bls.n	8002f40 <prvAddNewTaskToReadyList+0x74>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <prvAddNewTaskToReadyList+0xd4>)
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <prvAddNewTaskToReadyList+0xd8>)
 8002f4e:	441a      	add	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f7ff f8fd 	bl	8002156 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f5c:	f001 fa42 	bl	80043e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <prvAddNewTaskToReadyList+0xcc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <prvAddNewTaskToReadyList+0xc8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d207      	bcs.n	8002f86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <prvAddNewTaskToReadyList+0xdc>)
 8002f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000d70 	.word	0x20000d70
 8002f94:	2000089c 	.word	0x2000089c
 8002f98:	20000d7c 	.word	0x20000d7c
 8002f9c:	20000d8c 	.word	0x20000d8c
 8002fa0:	20000d78 	.word	0x20000d78
 8002fa4:	200008a0 	.word	0x200008a0
 8002fa8:	e000ed04 	.word	0xe000ed04

08002fac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d017      	beq.n	8002fee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <vTaskDelay+0x60>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <vTaskDelay+0x30>
	__asm volatile
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	60bb      	str	r3, [r7, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	e7fe      	b.n	8002fda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002fdc:	f000 f88a 	bl	80030f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fcfe 	bl	80039e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fe8:	f000 f892 	bl	8003110 <xTaskResumeAll>
 8002fec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d107      	bne.n	8003004 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <vTaskDelay+0x64>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000d98 	.word	0x20000d98
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003022:	463a      	mov	r2, r7
 8003024:	1d39      	adds	r1, r7, #4
 8003026:	f107 0308 	add.w	r3, r7, #8
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff f832 	bl	8002094 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	9202      	str	r2, [sp, #8]
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	2300      	movs	r3, #0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	2300      	movs	r3, #0
 8003040:	460a      	mov	r2, r1
 8003042:	4924      	ldr	r1, [pc, #144]	; (80030d4 <vTaskStartScheduler+0xc0>)
 8003044:	4824      	ldr	r0, [pc, #144]	; (80030d8 <vTaskStartScheduler+0xc4>)
 8003046:	f7ff fdf9 	bl	8002c3c <xTaskCreateStatic>
 800304a:	4603      	mov	r3, r0
 800304c:	4a23      	ldr	r2, [pc, #140]	; (80030dc <vTaskStartScheduler+0xc8>)
 800304e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <vTaskStartScheduler+0xc8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003058:	2301      	movs	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e001      	b.n	8003062 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003068:	f000 fd10 	bl	8003a8c <xTimerCreateTimerTask>
 800306c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d11b      	bne.n	80030ac <vTaskStartScheduler+0x98>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	613b      	str	r3, [r7, #16]
}
 8003086:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <vTaskStartScheduler+0xcc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3354      	adds	r3, #84	; 0x54
 800308e:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <vTaskStartScheduler+0xd0>)
 8003090:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003092:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <vTaskStartScheduler+0xd4>)
 8003094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003098:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <vTaskStartScheduler+0xd8>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <vTaskStartScheduler+0xdc>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030a6:	f001 f8cb 	bl	8004240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030aa:	e00e      	b.n	80030ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b2:	d10a      	bne.n	80030ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	60fb      	str	r3, [r7, #12]
}
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <vTaskStartScheduler+0xb4>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	08004bbc 	.word	0x08004bbc
 80030d8:	08003719 	.word	0x08003719
 80030dc:	20000d94 	.word	0x20000d94
 80030e0:	2000089c 	.word	0x2000089c
 80030e4:	20000010 	.word	0x20000010
 80030e8:	20000d90 	.word	0x20000d90
 80030ec:	20000d7c 	.word	0x20000d7c
 80030f0:	20000d74 	.word	0x20000d74

080030f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <vTaskSuspendAll+0x18>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	4a03      	ldr	r2, [pc, #12]	; (800310c <vTaskSuspendAll+0x18>)
 8003100:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	20000d98 	.word	0x20000d98

08003110 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800311e:	4b42      	ldr	r3, [pc, #264]	; (8003228 <xTaskResumeAll+0x118>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <xTaskResumeAll+0x2c>
	__asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	603b      	str	r3, [r7, #0]
}
 8003138:	bf00      	nop
 800313a:	e7fe      	b.n	800313a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800313c:	f001 f922 	bl	8004384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003140:	4b39      	ldr	r3, [pc, #228]	; (8003228 <xTaskResumeAll+0x118>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3b01      	subs	r3, #1
 8003146:	4a38      	ldr	r2, [pc, #224]	; (8003228 <xTaskResumeAll+0x118>)
 8003148:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <xTaskResumeAll+0x118>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d162      	bne.n	8003218 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003152:	4b36      	ldr	r3, [pc, #216]	; (800322c <xTaskResumeAll+0x11c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d05e      	beq.n	8003218 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800315a:	e02f      	b.n	80031bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800315c:	4b34      	ldr	r3, [pc, #208]	; (8003230 <xTaskResumeAll+0x120>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3318      	adds	r3, #24
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff f851 	bl	8002210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3304      	adds	r3, #4
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f84c 	bl	8002210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <xTaskResumeAll+0x124>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d903      	bls.n	800318c <xTaskResumeAll+0x7c>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	4a2a      	ldr	r2, [pc, #168]	; (8003234 <xTaskResumeAll+0x124>)
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4a27      	ldr	r2, [pc, #156]	; (8003238 <xTaskResumeAll+0x128>)
 800319a:	441a      	add	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3304      	adds	r3, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f7fe ffd7 	bl	8002156 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	4b23      	ldr	r3, [pc, #140]	; (800323c <xTaskResumeAll+0x12c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <xTaskResumeAll+0x130>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031bc:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <xTaskResumeAll+0x120>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1cb      	bne.n	800315c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031ca:	f000 fb5f 	bl	800388c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <xTaskResumeAll+0x134>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d010      	beq.n	80031fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031da:	f000 f847 	bl	800326c <xTaskIncrementTick>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80031e4:	4b16      	ldr	r3, [pc, #88]	; (8003240 <xTaskResumeAll+0x130>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f1      	bne.n	80031da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <xTaskResumeAll+0x134>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031fc:	4b10      	ldr	r3, [pc, #64]	; (8003240 <xTaskResumeAll+0x130>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003204:	2301      	movs	r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <xTaskResumeAll+0x138>)
 800320a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003218:	f001 f8e4 	bl	80043e4 <vPortExitCritical>

	return xAlreadyYielded;
 800321c:	68bb      	ldr	r3, [r7, #8]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000d98 	.word	0x20000d98
 800322c:	20000d70 	.word	0x20000d70
 8003230:	20000d30 	.word	0x20000d30
 8003234:	20000d78 	.word	0x20000d78
 8003238:	200008a0 	.word	0x200008a0
 800323c:	2000089c 	.word	0x2000089c
 8003240:	20000d84 	.word	0x20000d84
 8003244:	20000d80 	.word	0x20000d80
 8003248:	e000ed04 	.word	0xe000ed04

0800324c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <xTaskGetTickCount+0x1c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000d74 	.word	0x20000d74

0800326c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003276:	4b4f      	ldr	r3, [pc, #316]	; (80033b4 <xTaskIncrementTick+0x148>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f040 808f 	bne.w	800339e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003280:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <xTaskIncrementTick+0x14c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003288:	4a4b      	ldr	r2, [pc, #300]	; (80033b8 <xTaskIncrementTick+0x14c>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d120      	bne.n	80032d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003294:	4b49      	ldr	r3, [pc, #292]	; (80033bc <xTaskIncrementTick+0x150>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	603b      	str	r3, [r7, #0]
}
 80032b0:	bf00      	nop
 80032b2:	e7fe      	b.n	80032b2 <xTaskIncrementTick+0x46>
 80032b4:	4b41      	ldr	r3, [pc, #260]	; (80033bc <xTaskIncrementTick+0x150>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <xTaskIncrementTick+0x154>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a3f      	ldr	r2, [pc, #252]	; (80033bc <xTaskIncrementTick+0x150>)
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4a3f      	ldr	r2, [pc, #252]	; (80033c0 <xTaskIncrementTick+0x154>)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <xTaskIncrementTick+0x158>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3301      	adds	r3, #1
 80032ce:	4a3d      	ldr	r2, [pc, #244]	; (80033c4 <xTaskIncrementTick+0x158>)
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	f000 fadb 	bl	800388c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032d6:	4b3c      	ldr	r3, [pc, #240]	; (80033c8 <xTaskIncrementTick+0x15c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d349      	bcc.n	8003374 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032e0:	4b36      	ldr	r3, [pc, #216]	; (80033bc <xTaskIncrementTick+0x150>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d104      	bne.n	80032f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032ea:	4b37      	ldr	r3, [pc, #220]	; (80033c8 <xTaskIncrementTick+0x15c>)
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032f0:	601a      	str	r2, [r3, #0]
					break;
 80032f2:	e03f      	b.n	8003374 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <xTaskIncrementTick+0x150>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	429a      	cmp	r2, r3
 800330a:	d203      	bcs.n	8003314 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800330c:	4a2e      	ldr	r2, [pc, #184]	; (80033c8 <xTaskIncrementTick+0x15c>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003312:	e02f      	b.n	8003374 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	3304      	adds	r3, #4
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe ff79 	bl	8002210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	3318      	adds	r3, #24
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe ff70 	bl	8002210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <xTaskIncrementTick+0x160>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d903      	bls.n	8003344 <xTaskIncrementTick+0xd8>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	4a22      	ldr	r2, [pc, #136]	; (80033cc <xTaskIncrementTick+0x160>)
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <xTaskIncrementTick+0x164>)
 8003352:	441a      	add	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	3304      	adds	r3, #4
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f7fe fefb 	bl	8002156 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <xTaskIncrementTick+0x168>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	429a      	cmp	r2, r3
 800336c:	d3b8      	bcc.n	80032e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800336e:	2301      	movs	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003372:	e7b5      	b.n	80032e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <xTaskIncrementTick+0x168>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	4915      	ldr	r1, [pc, #84]	; (80033d0 <xTaskIncrementTick+0x164>)
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d901      	bls.n	8003390 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800338c:	2301      	movs	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <xTaskIncrementTick+0x16c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003398:	2301      	movs	r3, #1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	e004      	b.n	80033a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800339e:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <xTaskIncrementTick+0x170>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <xTaskIncrementTick+0x170>)
 80033a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80033a8:	697b      	ldr	r3, [r7, #20]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000d98 	.word	0x20000d98
 80033b8:	20000d74 	.word	0x20000d74
 80033bc:	20000d28 	.word	0x20000d28
 80033c0:	20000d2c 	.word	0x20000d2c
 80033c4:	20000d88 	.word	0x20000d88
 80033c8:	20000d90 	.word	0x20000d90
 80033cc:	20000d78 	.word	0x20000d78
 80033d0:	200008a0 	.word	0x200008a0
 80033d4:	2000089c 	.word	0x2000089c
 80033d8:	20000d84 	.word	0x20000d84
 80033dc:	20000d80 	.word	0x20000d80

080033e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033e6:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <vTaskSwitchContext+0xb0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033ee:	4b29      	ldr	r3, [pc, #164]	; (8003494 <vTaskSwitchContext+0xb4>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033f4:	e046      	b.n	8003484 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80033f6:	4b27      	ldr	r3, [pc, #156]	; (8003494 <vTaskSwitchContext+0xb4>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033fc:	4b26      	ldr	r3, [pc, #152]	; (8003498 <vTaskSwitchContext+0xb8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e010      	b.n	8003426 <vTaskSwitchContext+0x46>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <vTaskSwitchContext+0x40>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	607b      	str	r3, [r7, #4]
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <vTaskSwitchContext+0x3e>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3b01      	subs	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	491d      	ldr	r1, [pc, #116]	; (800349c <vTaskSwitchContext+0xbc>)
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0e4      	beq.n	8003404 <vTaskSwitchContext+0x24>
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4a15      	ldr	r2, [pc, #84]	; (800349c <vTaskSwitchContext+0xbc>)
 8003446:	4413      	add	r3, r2
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	605a      	str	r2, [r3, #4]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3308      	adds	r3, #8
 800345c:	429a      	cmp	r2, r3
 800345e:	d104      	bne.n	800346a <vTaskSwitchContext+0x8a>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <vTaskSwitchContext+0xc0>)
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4a08      	ldr	r2, [pc, #32]	; (8003498 <vTaskSwitchContext+0xb8>)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <vTaskSwitchContext+0xc0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3354      	adds	r3, #84	; 0x54
 8003480:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <vTaskSwitchContext+0xc4>)
 8003482:	6013      	str	r3, [r2, #0]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	20000d98 	.word	0x20000d98
 8003494:	20000d84 	.word	0x20000d84
 8003498:	20000d78 	.word	0x20000d78
 800349c:	200008a0 	.word	0x200008a0
 80034a0:	2000089c 	.word	0x2000089c
 80034a4:	20000010 	.word	0x20000010

080034a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	60fb      	str	r3, [r7, #12]
}
 80034ca:	bf00      	nop
 80034cc:	e7fe      	b.n	80034cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <vTaskPlaceOnEventList+0x44>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3318      	adds	r3, #24
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fe61 	bl	800219e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034dc:	2101      	movs	r1, #1
 80034de:	6838      	ldr	r0, [r7, #0]
 80034e0:	f000 fa80 	bl	80039e4 <prvAddCurrentTaskToDelayedList>
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	2000089c 	.word	0x2000089c

080034f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	617b      	str	r3, [r7, #20]
}
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <vTaskPlaceOnEventListRestricted+0x54>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3318      	adds	r3, #24
 800351e:	4619      	mov	r1, r3
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7fe fe18 	bl	8002156 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800352c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003530:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	68b8      	ldr	r0, [r7, #8]
 8003536:	f000 fa55 	bl	80039e4 <prvAddCurrentTaskToDelayedList>
	}
 800353a:	bf00      	nop
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	2000089c 	.word	0x2000089c

08003548 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10a      	bne.n	8003574 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	60fb      	str	r3, [r7, #12]
}
 8003570:	bf00      	nop
 8003572:	e7fe      	b.n	8003572 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	3318      	adds	r3, #24
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe fe49 	bl	8002210 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <xTaskRemoveFromEventList+0xb0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11d      	bne.n	80035c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	3304      	adds	r3, #4
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fe40 	bl	8002210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <xTaskRemoveFromEventList+0xb4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d903      	bls.n	80035a4 <xTaskRemoveFromEventList+0x5c>
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	4a16      	ldr	r2, [pc, #88]	; (80035fc <xTaskRemoveFromEventList+0xb4>)
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <xTaskRemoveFromEventList+0xb8>)
 80035b2:	441a      	add	r2, r3
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	3304      	adds	r3, #4
 80035b8:	4619      	mov	r1, r3
 80035ba:	4610      	mov	r0, r2
 80035bc:	f7fe fdcb 	bl	8002156 <vListInsertEnd>
 80035c0:	e005      	b.n	80035ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3318      	adds	r3, #24
 80035c6:	4619      	mov	r1, r3
 80035c8:	480e      	ldr	r0, [pc, #56]	; (8003604 <xTaskRemoveFromEventList+0xbc>)
 80035ca:	f7fe fdc4 	bl	8002156 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <xTaskRemoveFromEventList+0xc0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	429a      	cmp	r2, r3
 80035da:	d905      	bls.n	80035e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035dc:	2301      	movs	r3, #1
 80035de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035e0:	4b0a      	ldr	r3, [pc, #40]	; (800360c <xTaskRemoveFromEventList+0xc4>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e001      	b.n	80035ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80035ec:	697b      	ldr	r3, [r7, #20]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000d98 	.word	0x20000d98
 80035fc:	20000d78 	.word	0x20000d78
 8003600:	200008a0 	.word	0x200008a0
 8003604:	20000d30 	.word	0x20000d30
 8003608:	2000089c 	.word	0x2000089c
 800360c:	20000d84 	.word	0x20000d84

08003610 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <vTaskInternalSetTimeOutState+0x24>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <vTaskInternalSetTimeOutState+0x28>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	20000d88 	.word	0x20000d88
 8003638:	20000d74 	.word	0x20000d74

0800363c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	613b      	str	r3, [r7, #16]
}
 800365e:	bf00      	nop
 8003660:	e7fe      	b.n	8003660 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	60fb      	str	r3, [r7, #12]
}
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800367e:	f000 fe81 	bl	8004384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <xTaskCheckForTimeOut+0xbc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800369a:	d102      	bne.n	80036a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800369c:	2300      	movs	r3, #0
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	e023      	b.n	80036ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4b15      	ldr	r3, [pc, #84]	; (80036fc <xTaskCheckForTimeOut+0xc0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d007      	beq.n	80036be <xTaskCheckForTimeOut+0x82>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d302      	bcc.n	80036be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036b8:	2301      	movs	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	e015      	b.n	80036ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d20b      	bcs.n	80036e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	1ad2      	subs	r2, r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff ff9b 	bl	8003610 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	e004      	b.n	80036ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036e6:	2301      	movs	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036ea:	f000 fe7b 	bl	80043e4 <vPortExitCritical>

	return xReturn;
 80036ee:	69fb      	ldr	r3, [r7, #28]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000d74 	.word	0x20000d74
 80036fc:	20000d88 	.word	0x20000d88

08003700 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <vTaskMissedYield+0x14>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	20000d84 	.word	0x20000d84

08003718 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003720:	f000 f852 	bl	80037c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <prvIdleTask+0x28>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d9f9      	bls.n	8003720 <prvIdleTask+0x8>
			{
				taskYIELD();
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <prvIdleTask+0x2c>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800373c:	e7f0      	b.n	8003720 <prvIdleTask+0x8>
 800373e:	bf00      	nop
 8003740:	200008a0 	.word	0x200008a0
 8003744:	e000ed04 	.word	0xe000ed04

08003748 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	e00c      	b.n	800376e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4a12      	ldr	r2, [pc, #72]	; (80037a8 <prvInitialiseTaskLists+0x60>)
 8003760:	4413      	add	r3, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fcca 	bl	80020fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3301      	adds	r3, #1
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b37      	cmp	r3, #55	; 0x37
 8003772:	d9ef      	bls.n	8003754 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003774:	480d      	ldr	r0, [pc, #52]	; (80037ac <prvInitialiseTaskLists+0x64>)
 8003776:	f7fe fcc1 	bl	80020fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <prvInitialiseTaskLists+0x68>)
 800377c:	f7fe fcbe 	bl	80020fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003780:	480c      	ldr	r0, [pc, #48]	; (80037b4 <prvInitialiseTaskLists+0x6c>)
 8003782:	f7fe fcbb 	bl	80020fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003786:	480c      	ldr	r0, [pc, #48]	; (80037b8 <prvInitialiseTaskLists+0x70>)
 8003788:	f7fe fcb8 	bl	80020fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800378c:	480b      	ldr	r0, [pc, #44]	; (80037bc <prvInitialiseTaskLists+0x74>)
 800378e:	f7fe fcb5 	bl	80020fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <prvInitialiseTaskLists+0x78>)
 8003794:	4a05      	ldr	r2, [pc, #20]	; (80037ac <prvInitialiseTaskLists+0x64>)
 8003796:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <prvInitialiseTaskLists+0x7c>)
 800379a:	4a05      	ldr	r2, [pc, #20]	; (80037b0 <prvInitialiseTaskLists+0x68>)
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200008a0 	.word	0x200008a0
 80037ac:	20000d00 	.word	0x20000d00
 80037b0:	20000d14 	.word	0x20000d14
 80037b4:	20000d30 	.word	0x20000d30
 80037b8:	20000d44 	.word	0x20000d44
 80037bc:	20000d5c 	.word	0x20000d5c
 80037c0:	20000d28 	.word	0x20000d28
 80037c4:	20000d2c 	.word	0x20000d2c

080037c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ce:	e019      	b.n	8003804 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037d0:	f000 fdd8 	bl	8004384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d4:	4b10      	ldr	r3, [pc, #64]	; (8003818 <prvCheckTasksWaitingTermination+0x50>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe fd15 	bl	8002210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <prvCheckTasksWaitingTermination+0x54>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	4a0b      	ldr	r2, [pc, #44]	; (800381c <prvCheckTasksWaitingTermination+0x54>)
 80037ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <prvCheckTasksWaitingTermination+0x58>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <prvCheckTasksWaitingTermination+0x58>)
 80037f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037fa:	f000 fdf3 	bl	80043e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f810 	bl	8003824 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <prvCheckTasksWaitingTermination+0x58>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e1      	bne.n	80037d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000d44 	.word	0x20000d44
 800381c:	20000d70 	.word	0x20000d70
 8003820:	20000d58 	.word	0x20000d58

08003824 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3354      	adds	r3, #84	; 0x54
 8003830:	4618      	mov	r0, r3
 8003832:	f001 f8fd 	bl	8004a30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800383c:	2b00      	cmp	r3, #0
 800383e:	d108      	bne.n	8003852 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	4618      	mov	r0, r3
 8003846:	f000 ff8b 	bl	8004760 <vPortFree>
				vPortFree( pxTCB );
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 ff88 	bl	8004760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003850:	e018      	b.n	8003884 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003858:	2b01      	cmp	r3, #1
 800385a:	d103      	bne.n	8003864 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 ff7f 	bl	8004760 <vPortFree>
	}
 8003862:	e00f      	b.n	8003884 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800386a:	2b02      	cmp	r3, #2
 800386c:	d00a      	beq.n	8003884 <prvDeleteTCB+0x60>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	60fb      	str	r3, [r7, #12]
}
 8003880:	bf00      	nop
 8003882:	e7fe      	b.n	8003882 <prvDeleteTCB+0x5e>
	}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <prvResetNextTaskUnblockTime+0x38>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d104      	bne.n	80038a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <prvResetNextTaskUnblockTime+0x3c>)
 800389e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038a4:	e008      	b.n	80038b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038a6:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <prvResetNextTaskUnblockTime+0x38>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <prvResetNextTaskUnblockTime+0x3c>)
 80038b6:	6013      	str	r3, [r2, #0]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	20000d28 	.word	0x20000d28
 80038c8:	20000d90 	.word	0x20000d90

080038cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <xTaskGetSchedulerState+0x34>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038da:	2301      	movs	r3, #1
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	e008      	b.n	80038f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038e0:	4b08      	ldr	r3, [pc, #32]	; (8003904 <xTaskGetSchedulerState+0x38>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038e8:	2302      	movs	r3, #2
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	e001      	b.n	80038f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038f2:	687b      	ldr	r3, [r7, #4]
	}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	20000d7c 	.word	0x20000d7c
 8003904:	20000d98 	.word	0x20000d98

08003908 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d056      	beq.n	80039cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800391e:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <xTaskPriorityDisinherit+0xd0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	429a      	cmp	r2, r3
 8003926:	d00a      	beq.n	800393e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	60fb      	str	r3, [r7, #12]
}
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	60bb      	str	r3, [r7, #8]
}
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003960:	1e5a      	subs	r2, r3, #1
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	429a      	cmp	r2, r3
 8003970:	d02c      	beq.n	80039cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003976:	2b00      	cmp	r3, #0
 8003978:	d128      	bne.n	80039cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	3304      	adds	r3, #4
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fc46 	bl	8002210 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <xTaskPriorityDisinherit+0xd4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d903      	bls.n	80039ac <xTaskPriorityDisinherit+0xa4>
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <xTaskPriorityDisinherit+0xd4>)
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <xTaskPriorityDisinherit+0xd8>)
 80039ba:	441a      	add	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f7fe fbc7 	bl	8002156 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039cc:	697b      	ldr	r3, [r7, #20]
	}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	2000089c 	.word	0x2000089c
 80039dc:	20000d78 	.word	0x20000d78
 80039e0:	200008a0 	.word	0x200008a0

080039e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039ee:	4b21      	ldr	r3, [pc, #132]	; (8003a74 <prvAddCurrentTaskToDelayedList+0x90>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039f4:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <prvAddCurrentTaskToDelayedList+0x94>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fc08 	bl	8002210 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a06:	d10a      	bne.n	8003a1e <prvAddCurrentTaskToDelayedList+0x3a>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4819      	ldr	r0, [pc, #100]	; (8003a7c <prvAddCurrentTaskToDelayedList+0x98>)
 8003a18:	f7fe fb9d 	bl	8002156 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a1c:	e026      	b.n	8003a6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d209      	bcs.n	8003a4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f7fe fbab 	bl	800219e <vListInsert>
}
 8003a48:	e010      	b.n	8003a6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f7fe fba1 	bl	800219e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d202      	bcs.n	8003a6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a66:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	6013      	str	r3, [r2, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000d74 	.word	0x20000d74
 8003a78:	2000089c 	.word	0x2000089c
 8003a7c:	20000d5c 	.word	0x20000d5c
 8003a80:	20000d2c 	.word	0x20000d2c
 8003a84:	20000d28 	.word	0x20000d28
 8003a88:	20000d90 	.word	0x20000d90

08003a8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a96:	f000 fb07 	bl	80040a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a9a:	4b1c      	ldr	r3, [pc, #112]	; (8003b0c <xTimerCreateTimerTask+0x80>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d021      	beq.n	8003ae6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003aaa:	1d3a      	adds	r2, r7, #4
 8003aac:	f107 0108 	add.w	r1, r7, #8
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fb07 	bl	80020c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	9202      	str	r2, [sp, #8]
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	460a      	mov	r2, r1
 8003acc:	4910      	ldr	r1, [pc, #64]	; (8003b10 <xTimerCreateTimerTask+0x84>)
 8003ace:	4811      	ldr	r0, [pc, #68]	; (8003b14 <xTimerCreateTimerTask+0x88>)
 8003ad0:	f7ff f8b4 	bl	8002c3c <xTaskCreateStatic>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <xTimerCreateTimerTask+0x8c>)
 8003ad8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ada:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <xTimerCreateTimerTask+0x8c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	613b      	str	r3, [r7, #16]
}
 8003afe:	bf00      	nop
 8003b00:	e7fe      	b.n	8003b00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b02:	697b      	ldr	r3, [r7, #20]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000dcc 	.word	0x20000dcc
 8003b10:	08004bc4 	.word	0x08004bc4
 8003b14:	08003c51 	.word	0x08003c51
 8003b18:	20000dd0 	.word	0x20000dd0

08003b1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	; 0x28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	623b      	str	r3, [r7, #32]
}
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <xTimerGenericCommand+0x98>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02a      	beq.n	8003ba8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b05      	cmp	r3, #5
 8003b62:	dc18      	bgt.n	8003b96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b64:	f7ff feb2 	bl	80038cc <xTaskGetSchedulerState>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d109      	bne.n	8003b82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b6e:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <xTimerGenericCommand+0x98>)
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	f107 0110 	add.w	r1, r7, #16
 8003b76:	2300      	movs	r3, #0
 8003b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7a:	f7fe fc77 	bl	800246c <xQueueGenericSend>
 8003b7e:	6278      	str	r0, [r7, #36]	; 0x24
 8003b80:	e012      	b.n	8003ba8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <xTimerGenericCommand+0x98>)
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	f107 0110 	add.w	r1, r7, #16
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f7fe fc6d 	bl	800246c <xQueueGenericSend>
 8003b92:	6278      	str	r0, [r7, #36]	; 0x24
 8003b94:	e008      	b.n	8003ba8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b96:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <xTimerGenericCommand+0x98>)
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	f107 0110 	add.w	r1, r7, #16
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	f7fe fd61 	bl	8002668 <xQueueGenericSendFromISR>
 8003ba6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3728      	adds	r7, #40	; 0x28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000dcc 	.word	0x20000dcc

08003bb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bc2:	4b22      	ldr	r3, [pc, #136]	; (8003c4c <prvProcessExpiredTimer+0x94>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fb1d 	bl	8002210 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d022      	beq.n	8003c2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	18d1      	adds	r1, r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	f000 f8d1 	bl	8003d98 <prvInsertTimerInActiveList>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01f      	beq.n	8003c3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	2100      	movs	r1, #0
 8003c06:	6978      	ldr	r0, [r7, #20]
 8003c08:	f7ff ff88 	bl	8003b1c <xTimerGenericCommand>
 8003c0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d113      	bne.n	8003c3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60fb      	str	r3, [r7, #12]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	6978      	ldr	r0, [r7, #20]
 8003c42:	4798      	blx	r3
}
 8003c44:	bf00      	nop
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000dc4 	.word	0x20000dc4

08003c50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c58:	f107 0308 	add.w	r3, r7, #8
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 f857 	bl	8003d10 <prvGetNextExpireTime>
 8003c62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4619      	mov	r1, r3
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f803 	bl	8003c74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c6e:	f000 f8d5 	bl	8003e1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c72:	e7f1      	b.n	8003c58 <prvTimerTask+0x8>

08003c74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c7e:	f7ff fa39 	bl	80030f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c82:	f107 0308 	add.w	r3, r7, #8
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f866 	bl	8003d58 <prvSampleTimeNow>
 8003c8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d130      	bne.n	8003cf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <prvProcessTimerOrBlockTask+0x3c>
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d806      	bhi.n	8003cb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003ca2:	f7ff fa35 	bl	8003110 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ca6:	68f9      	ldr	r1, [r7, #12]
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff ff85 	bl	8003bb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003cae:	e024      	b.n	8003cfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <prvProcessTimerOrBlockTask+0x90>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <prvProcessTimerOrBlockTask+0x50>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <prvProcessTimerOrBlockTask+0x52>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <prvProcessTimerOrBlockTask+0x94>)
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f7fe ff7d 	bl	8002bd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cda:	f7ff fa19 	bl	8003110 <xTaskResumeAll>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <prvProcessTimerOrBlockTask+0x98>)
 8003ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	f3bf 8f6f 	isb	sy
}
 8003cf4:	e001      	b.n	8003cfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003cf6:	f7ff fa0b 	bl	8003110 <xTaskResumeAll>
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000dc8 	.word	0x20000dc8
 8003d08:	20000dcc 	.word	0x20000dcc
 8003d0c:	e000ed04 	.word	0xe000ed04

08003d10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <prvGetNextExpireTime+0x44>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <prvGetNextExpireTime+0x16>
 8003d22:	2201      	movs	r2, #1
 8003d24:	e000      	b.n	8003d28 <prvGetNextExpireTime+0x18>
 8003d26:	2200      	movs	r2, #0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <prvGetNextExpireTime+0x44>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e001      	b.n	8003d44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d44:	68fb      	ldr	r3, [r7, #12]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000dc4 	.word	0x20000dc4

08003d58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d60:	f7ff fa74 	bl	800324c <xTaskGetTickCount>
 8003d64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <prvSampleTimeNow+0x3c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d205      	bcs.n	8003d7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d70:	f000 f936 	bl	8003fe0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e002      	b.n	8003d82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d82:	4a04      	ldr	r2, [pc, #16]	; (8003d94 <prvSampleTimeNow+0x3c>)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d88:	68fb      	ldr	r3, [r7, #12]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000dd4 	.word	0x20000dd4

08003d98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d812      	bhi.n	8003de4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	1ad2      	subs	r2, r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d302      	bcc.n	8003dd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e01b      	b.n	8003e0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <prvInsertTimerInActiveList+0x7c>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f7fe f9de 	bl	800219e <vListInsert>
 8003de2:	e012      	b.n	8003e0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d206      	bcs.n	8003dfa <prvInsertTimerInActiveList+0x62>
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e007      	b.n	8003e0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <prvInsertTimerInActiveList+0x80>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f7fe f9ca 	bl	800219e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e0a:	697b      	ldr	r3, [r7, #20]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000dc8 	.word	0x20000dc8
 8003e18:	20000dc4 	.word	0x20000dc4

08003e1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08e      	sub	sp, #56	; 0x38
 8003e20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e22:	e0ca      	b.n	8003fba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	da18      	bge.n	8003e5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	61fb      	str	r3, [r7, #28]
}
 8003e48:	bf00      	nop
 8003e4a:	e7fe      	b.n	8003e4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e52:	6850      	ldr	r0, [r2, #4]
 8003e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e56:	6892      	ldr	r2, [r2, #8]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f2c0 80aa 	blt.w	8003fb8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	3304      	adds	r3, #4
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fe f9cb 	bl	8002210 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e7a:	463b      	mov	r3, r7
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff ff6b 	bl	8003d58 <prvSampleTimeNow>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b09      	cmp	r3, #9
 8003e88:	f200 8097 	bhi.w	8003fba <prvProcessReceivedCommands+0x19e>
 8003e8c:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <prvProcessReceivedCommands+0x78>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ebd 	.word	0x08003ebd
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ebd 	.word	0x08003ebd
 8003ea0:	08003f31 	.word	0x08003f31
 8003ea4:	08003f45 	.word	0x08003f45
 8003ea8:	08003f8f 	.word	0x08003f8f
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ebd 	.word	0x08003ebd
 8003eb4:	08003f31 	.word	0x08003f31
 8003eb8:	08003f45 	.word	0x08003f45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	18d1      	adds	r1, r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003edc:	f7ff ff5c 	bl	8003d98 <prvInsertTimerInActiveList>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d069      	beq.n	8003fba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d05e      	beq.n	8003fba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	441a      	add	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f0e:	f7ff fe05 	bl	8003b1c <xTimerGenericCommand>
 8003f12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d14f      	bne.n	8003fba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	61bb      	str	r3, [r7, #24]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003f42:	e03a      	b.n	8003fba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	617b      	str	r3, [r7, #20]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	18d1      	adds	r1, r2, r3
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f88:	f7ff ff06 	bl	8003d98 <prvInsertTimerInActiveList>
					break;
 8003f8c:	e015      	b.n	8003fba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d103      	bne.n	8003fa4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f9e:	f000 fbdf 	bl	8004760 <vPortFree>
 8003fa2:	e00a      	b.n	8003fba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003fb6:	e000      	b.n	8003fba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003fb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <prvProcessReceivedCommands+0x1c0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	1d39      	adds	r1, r7, #4
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fbec 	bl	80027a0 <xQueueReceive>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f47f af2a 	bne.w	8003e24 <prvProcessReceivedCommands+0x8>
	}
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3730      	adds	r7, #48	; 0x30
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000dcc 	.word	0x20000dcc

08003fe0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fe6:	e048      	b.n	800407a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	; (80040a0 <prvSwitchTimerLists+0xc0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff2:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <prvSwitchTimerLists+0xc0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe f905 	bl	8002210 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02e      	beq.n	800407a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4413      	add	r3, r2
 8004024:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	429a      	cmp	r2, r3
 800402c:	d90e      	bls.n	800404c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800403a:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <prvSwitchTimerLists+0xc0>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7fe f8aa 	bl	800219e <vListInsert>
 800404a:	e016      	b.n	800407a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800404c:	2300      	movs	r3, #0
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2300      	movs	r3, #0
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	2100      	movs	r1, #0
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff fd60 	bl	8003b1c <xTimerGenericCommand>
 800405c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	603b      	str	r3, [r7, #0]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <prvSwitchTimerLists+0xc0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1b1      	bne.n	8003fe8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <prvSwitchTimerLists+0xc0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <prvSwitchTimerLists+0xc4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <prvSwitchTimerLists+0xc0>)
 8004090:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004092:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <prvSwitchTimerLists+0xc4>)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	6013      	str	r3, [r2, #0]
}
 8004098:	bf00      	nop
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20000dc4 	.word	0x20000dc4
 80040a4:	20000dc8 	.word	0x20000dc8

080040a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80040ae:	f000 f969 	bl	8004384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80040b2:	4b15      	ldr	r3, [pc, #84]	; (8004108 <prvCheckForValidListAndQueue+0x60>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d120      	bne.n	80040fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80040ba:	4814      	ldr	r0, [pc, #80]	; (800410c <prvCheckForValidListAndQueue+0x64>)
 80040bc:	f7fe f81e 	bl	80020fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040c0:	4813      	ldr	r0, [pc, #76]	; (8004110 <prvCheckForValidListAndQueue+0x68>)
 80040c2:	f7fe f81b 	bl	80020fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <prvCheckForValidListAndQueue+0x6c>)
 80040c8:	4a10      	ldr	r2, [pc, #64]	; (800410c <prvCheckForValidListAndQueue+0x64>)
 80040ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040cc:	4b12      	ldr	r3, [pc, #72]	; (8004118 <prvCheckForValidListAndQueue+0x70>)
 80040ce:	4a10      	ldr	r2, [pc, #64]	; (8004110 <prvCheckForValidListAndQueue+0x68>)
 80040d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040d2:	2300      	movs	r3, #0
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	4b11      	ldr	r3, [pc, #68]	; (800411c <prvCheckForValidListAndQueue+0x74>)
 80040d8:	4a11      	ldr	r2, [pc, #68]	; (8004120 <prvCheckForValidListAndQueue+0x78>)
 80040da:	2110      	movs	r1, #16
 80040dc:	200a      	movs	r0, #10
 80040de:	f7fe f929 	bl	8002334 <xQueueGenericCreateStatic>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4a08      	ldr	r2, [pc, #32]	; (8004108 <prvCheckForValidListAndQueue+0x60>)
 80040e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040e8:	4b07      	ldr	r3, [pc, #28]	; (8004108 <prvCheckForValidListAndQueue+0x60>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <prvCheckForValidListAndQueue+0x60>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	490b      	ldr	r1, [pc, #44]	; (8004124 <prvCheckForValidListAndQueue+0x7c>)
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe fd42 	bl	8002b80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040fc:	f000 f972 	bl	80043e4 <vPortExitCritical>
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000dcc 	.word	0x20000dcc
 800410c:	20000d9c 	.word	0x20000d9c
 8004110:	20000db0 	.word	0x20000db0
 8004114:	20000dc4 	.word	0x20000dc4
 8004118:	20000dc8 	.word	0x20000dc8
 800411c:	20000e78 	.word	0x20000e78
 8004120:	20000dd8 	.word	0x20000dd8
 8004124:	08004bcc 	.word	0x08004bcc

08004128 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3b04      	subs	r3, #4
 8004138:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3b04      	subs	r3, #4
 8004146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3b04      	subs	r3, #4
 8004156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004158:	4a0c      	ldr	r2, [pc, #48]	; (800418c <pxPortInitialiseStack+0x64>)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3b14      	subs	r3, #20
 8004162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b04      	subs	r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f06f 0202 	mvn.w	r2, #2
 8004176:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3b20      	subs	r3, #32
 800417c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	08004191 	.word	0x08004191

08004190 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <prvTaskExitError+0x54>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a2:	d00a      	beq.n	80041ba <prvTaskExitError+0x2a>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60fb      	str	r3, [r7, #12]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <prvTaskExitError+0x28>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	60bb      	str	r3, [r7, #8]
}
 80041cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041ce:	bf00      	nop
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0fc      	beq.n	80041d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	2000000c 	.word	0x2000000c
	...

080041f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <pxCurrentTCBConst2>)
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	6808      	ldr	r0, [r1, #0]
 80041f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fa:	f380 8809 	msr	PSP, r0
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f380 8811 	msr	BASEPRI, r0
 800420a:	4770      	bx	lr
 800420c:	f3af 8000 	nop.w

08004210 <pxCurrentTCBConst2>:
 8004210:	2000089c 	.word	0x2000089c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop

08004218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004218:	4808      	ldr	r0, [pc, #32]	; (800423c <prvPortStartFirstTask+0x24>)
 800421a:	6800      	ldr	r0, [r0, #0]
 800421c:	6800      	ldr	r0, [r0, #0]
 800421e:	f380 8808 	msr	MSP, r0
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f380 8814 	msr	CONTROL, r0
 800422a:	b662      	cpsie	i
 800422c:	b661      	cpsie	f
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	df00      	svc	0
 8004238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800423a:	bf00      	nop
 800423c:	e000ed08 	.word	0xe000ed08

08004240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004246:	4b46      	ldr	r3, [pc, #280]	; (8004360 <xPortStartScheduler+0x120>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a46      	ldr	r2, [pc, #280]	; (8004364 <xPortStartScheduler+0x124>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10a      	bne.n	8004266 <xPortStartScheduler+0x26>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	613b      	str	r3, [r7, #16]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004266:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <xPortStartScheduler+0x120>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a3f      	ldr	r2, [pc, #252]	; (8004368 <xPortStartScheduler+0x128>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d10a      	bne.n	8004286 <xPortStartScheduler+0x46>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60fb      	str	r3, [r7, #12]
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004286:	4b39      	ldr	r3, [pc, #228]	; (800436c <xPortStartScheduler+0x12c>)
 8004288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	22ff      	movs	r2, #255	; 0xff
 8004296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4b31      	ldr	r3, [pc, #196]	; (8004370 <xPortStartScheduler+0x130>)
 80042ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042ae:	4b31      	ldr	r3, [pc, #196]	; (8004374 <xPortStartScheduler+0x134>)
 80042b0:	2207      	movs	r2, #7
 80042b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042b4:	e009      	b.n	80042ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80042b6:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <xPortStartScheduler+0x134>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	4a2d      	ldr	r2, [pc, #180]	; (8004374 <xPortStartScheduler+0x134>)
 80042be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b80      	cmp	r3, #128	; 0x80
 80042d4:	d0ef      	beq.n	80042b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <xPortStartScheduler+0x134>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f1c3 0307 	rsb	r3, r3, #7
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d00a      	beq.n	80042f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	60bb      	str	r3, [r7, #8]
}
 80042f4:	bf00      	nop
 80042f6:	e7fe      	b.n	80042f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042f8:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <xPortStartScheduler+0x134>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <xPortStartScheduler+0x134>)
 8004300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004302:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <xPortStartScheduler+0x134>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800430a:	4a1a      	ldr	r2, [pc, #104]	; (8004374 <xPortStartScheduler+0x134>)
 800430c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <xPortStartScheduler+0x138>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a17      	ldr	r2, [pc, #92]	; (8004378 <xPortStartScheduler+0x138>)
 800431c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <xPortStartScheduler+0x138>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a14      	ldr	r2, [pc, #80]	; (8004378 <xPortStartScheduler+0x138>)
 8004328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800432c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800432e:	f000 f8dd 	bl	80044ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <xPortStartScheduler+0x13c>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004338:	f000 f8fc 	bl	8004534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800433c:	4b10      	ldr	r3, [pc, #64]	; (8004380 <xPortStartScheduler+0x140>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0f      	ldr	r2, [pc, #60]	; (8004380 <xPortStartScheduler+0x140>)
 8004342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004348:	f7ff ff66 	bl	8004218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800434c:	f7ff f848 	bl	80033e0 <vTaskSwitchContext>
	prvTaskExitError();
 8004350:	f7ff ff1e 	bl	8004190 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	e000ed00 	.word	0xe000ed00
 8004364:	410fc271 	.word	0x410fc271
 8004368:	410fc270 	.word	0x410fc270
 800436c:	e000e400 	.word	0xe000e400
 8004370:	20000ec8 	.word	0x20000ec8
 8004374:	20000ecc 	.word	0x20000ecc
 8004378:	e000ed20 	.word	0xe000ed20
 800437c:	2000000c 	.word	0x2000000c
 8004380:	e000ef34 	.word	0xe000ef34

08004384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	607b      	str	r3, [r7, #4]
}
 800439c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800439e:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <vPortEnterCritical+0x58>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3301      	adds	r3, #1
 80043a4:	4a0d      	ldr	r2, [pc, #52]	; (80043dc <vPortEnterCritical+0x58>)
 80043a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <vPortEnterCritical+0x58>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10f      	bne.n	80043d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <vPortEnterCritical+0x5c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	603b      	str	r3, [r7, #0]
}
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <vPortEnterCritical+0x4a>
	}
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	2000000c 	.word	0x2000000c
 80043e0:	e000ed04 	.word	0xe000ed04

080043e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <vPortExitCritical+0x50>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <vPortExitCritical+0x24>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	607b      	str	r3, [r7, #4]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <vPortExitCritical+0x50>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3b01      	subs	r3, #1
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <vPortExitCritical+0x50>)
 8004410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004412:	4b08      	ldr	r3, [pc, #32]	; (8004434 <vPortExitCritical+0x50>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <vPortExitCritical+0x42>
 800441a:	2300      	movs	r3, #0
 800441c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f383 8811 	msr	BASEPRI, r3
}
 8004424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	2000000c 	.word	0x2000000c
	...

08004440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004440:	f3ef 8009 	mrs	r0, PSP
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <pxCurrentTCBConst>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f01e 0f10 	tst.w	lr, #16
 8004450:	bf08      	it	eq
 8004452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	6010      	str	r0, [r2, #0]
 800445c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004464:	f380 8811 	msr	BASEPRI, r0
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f7fe ffb6 	bl	80033e0 <vTaskSwitchContext>
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f380 8811 	msr	BASEPRI, r0
 800447c:	bc09      	pop	{r0, r3}
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	6808      	ldr	r0, [r1, #0]
 8004482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004486:	f01e 0f10 	tst.w	lr, #16
 800448a:	bf08      	it	eq
 800448c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004490:	f380 8809 	msr	PSP, r0
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	f3af 8000 	nop.w

080044a0 <pxCurrentTCBConst>:
 80044a0:	2000089c 	.word	0x2000089c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	607b      	str	r3, [r7, #4]
}
 80044c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044c2:	f7fe fed3 	bl	800326c <xTaskIncrementTick>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <xPortSysTickHandler+0x40>)
 80044ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f383 8811 	msr	BASEPRI, r3
}
 80044de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <vPortSetupTimerInterrupt+0x34>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <vPortSetupTimerInterrupt+0x38>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <vPortSetupTimerInterrupt+0x3c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <vPortSetupTimerInterrupt+0x40>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	4a09      	ldr	r2, [pc, #36]	; (8004530 <vPortSetupTimerInterrupt+0x44>)
 800450a:	3b01      	subs	r3, #1
 800450c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <vPortSetupTimerInterrupt+0x34>)
 8004510:	2207      	movs	r2, #7
 8004512:	601a      	str	r2, [r3, #0]
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e010 	.word	0xe000e010
 8004524:	e000e018 	.word	0xe000e018
 8004528:	20000000 	.word	0x20000000
 800452c:	10624dd3 	.word	0x10624dd3
 8004530:	e000e014 	.word	0xe000e014

08004534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004544 <vPortEnableVFP+0x10>
 8004538:	6801      	ldr	r1, [r0, #0]
 800453a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800453e:	6001      	str	r1, [r0, #0]
 8004540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004542:	bf00      	nop
 8004544:	e000ed88 	.word	0xe000ed88

08004548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800454e:	f3ef 8305 	mrs	r3, IPSR
 8004552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b0f      	cmp	r3, #15
 8004558:	d914      	bls.n	8004584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800455a:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <vPortValidateInterruptPriority+0x70>)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004564:	4b15      	ldr	r3, [pc, #84]	; (80045bc <vPortValidateInterruptPriority+0x74>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	7afa      	ldrb	r2, [r7, #11]
 800456a:	429a      	cmp	r2, r3
 800456c:	d20a      	bcs.n	8004584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	607b      	str	r3, [r7, #4]
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004584:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <vPortValidateInterruptPriority+0x78>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <vPortValidateInterruptPriority+0x7c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d90a      	bls.n	80045aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	603b      	str	r3, [r7, #0]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <vPortValidateInterruptPriority+0x60>
	}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	e000e3f0 	.word	0xe000e3f0
 80045bc:	20000ec8 	.word	0x20000ec8
 80045c0:	e000ed0c 	.word	0xe000ed0c
 80045c4:	20000ecc 	.word	0x20000ecc

080045c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045d4:	f7fe fd8e 	bl	80030f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045d8:	4b5b      	ldr	r3, [pc, #364]	; (8004748 <pvPortMalloc+0x180>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045e0:	f000 f920 	bl	8004824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045e4:	4b59      	ldr	r3, [pc, #356]	; (800474c <pvPortMalloc+0x184>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f040 8093 	bne.w	8004718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01d      	beq.n	8004634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045f8:	2208      	movs	r2, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4413      	add	r3, r2
 80045fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	2b00      	cmp	r3, #0
 8004608:	d014      	beq.n	8004634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f023 0307 	bic.w	r3, r3, #7
 8004610:	3308      	adds	r3, #8
 8004612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <pvPortMalloc+0x6c>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	617b      	str	r3, [r7, #20]
}
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d06e      	beq.n	8004718 <pvPortMalloc+0x150>
 800463a:	4b45      	ldr	r3, [pc, #276]	; (8004750 <pvPortMalloc+0x188>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d869      	bhi.n	8004718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004644:	4b43      	ldr	r3, [pc, #268]	; (8004754 <pvPortMalloc+0x18c>)
 8004646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004648:	4b42      	ldr	r3, [pc, #264]	; (8004754 <pvPortMalloc+0x18c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800464e:	e004      	b.n	800465a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d903      	bls.n	800466c <pvPortMalloc+0xa4>
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f1      	bne.n	8004650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800466c:	4b36      	ldr	r3, [pc, #216]	; (8004748 <pvPortMalloc+0x180>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004672:	429a      	cmp	r2, r3
 8004674:	d050      	beq.n	8004718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2208      	movs	r2, #8
 800467c:	4413      	add	r3, r2
 800467e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	1ad2      	subs	r2, r2, r3
 8004690:	2308      	movs	r3, #8
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	429a      	cmp	r2, r3
 8004696:	d91f      	bls.n	80046d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4413      	add	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <pvPortMalloc+0xf8>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	613b      	str	r3, [r7, #16]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	1ad2      	subs	r2, r2, r3
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046d2:	69b8      	ldr	r0, [r7, #24]
 80046d4:	f000 f908 	bl	80048e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046d8:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <pvPortMalloc+0x188>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <pvPortMalloc+0x188>)
 80046e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046e6:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <pvPortMalloc+0x188>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <pvPortMalloc+0x190>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d203      	bcs.n	80046fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <pvPortMalloc+0x188>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <pvPortMalloc+0x190>)
 80046f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <pvPortMalloc+0x184>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	431a      	orrs	r2, r3
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <pvPortMalloc+0x194>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	4a11      	ldr	r2, [pc, #68]	; (800475c <pvPortMalloc+0x194>)
 8004716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004718:	f7fe fcfa 	bl	8003110 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <pvPortMalloc+0x174>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	60fb      	str	r3, [r7, #12]
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <pvPortMalloc+0x172>
	return pvReturn;
 800473c:	69fb      	ldr	r3, [r7, #28]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3728      	adds	r7, #40	; 0x28
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20004ad8 	.word	0x20004ad8
 800474c:	20004aec 	.word	0x20004aec
 8004750:	20004adc 	.word	0x20004adc
 8004754:	20004ad0 	.word	0x20004ad0
 8004758:	20004ae0 	.word	0x20004ae0
 800475c:	20004ae4 	.word	0x20004ae4

08004760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d04d      	beq.n	800480e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004772:	2308      	movs	r3, #8
 8004774:	425b      	negs	r3, r3
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4413      	add	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <vPortFree+0xb8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4013      	ands	r3, r2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <vPortFree+0x44>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	60fb      	str	r3, [r7, #12]
}
 80047a0:	bf00      	nop
 80047a2:	e7fe      	b.n	80047a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <vPortFree+0x62>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	60bb      	str	r3, [r7, #8]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	4b14      	ldr	r3, [pc, #80]	; (8004818 <vPortFree+0xb8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01e      	beq.n	800480e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d11a      	bne.n	800480e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <vPortFree+0xb8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	401a      	ands	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047e8:	f7fe fc84 	bl	80030f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <vPortFree+0xbc>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4413      	add	r3, r2
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <vPortFree+0xbc>)
 80047f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047fa:	6938      	ldr	r0, [r7, #16]
 80047fc:	f000 f874 	bl	80048e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004800:	4b07      	ldr	r3, [pc, #28]	; (8004820 <vPortFree+0xc0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	4a06      	ldr	r2, [pc, #24]	; (8004820 <vPortFree+0xc0>)
 8004808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800480a:	f7fe fc81 	bl	8003110 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800480e:	bf00      	nop
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20004aec 	.word	0x20004aec
 800481c:	20004adc 	.word	0x20004adc
 8004820:	20004ae8 	.word	0x20004ae8

08004824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800482a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800482e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004830:	4b27      	ldr	r3, [pc, #156]	; (80048d0 <prvHeapInit+0xac>)
 8004832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00c      	beq.n	8004858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3307      	adds	r3, #7
 8004842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0307 	bic.w	r3, r3, #7
 800484a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	4a1f      	ldr	r2, [pc, #124]	; (80048d0 <prvHeapInit+0xac>)
 8004854:	4413      	add	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800485c:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <prvHeapInit+0xb0>)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004862:	4b1c      	ldr	r3, [pc, #112]	; (80048d4 <prvHeapInit+0xb0>)
 8004864:	2200      	movs	r2, #0
 8004866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	4413      	add	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004870:	2208      	movs	r2, #8
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a15      	ldr	r2, [pc, #84]	; (80048d8 <prvHeapInit+0xb4>)
 8004884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004886:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <prvHeapInit+0xb4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2200      	movs	r2, #0
 800488c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <prvHeapInit+0xb4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	1ad2      	subs	r2, r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048a4:	4b0c      	ldr	r3, [pc, #48]	; (80048d8 <prvHeapInit+0xb4>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <prvHeapInit+0xb8>)
 80048b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <prvHeapInit+0xbc>)
 80048ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <prvHeapInit+0xc0>)
 80048be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048c2:	601a      	str	r2, [r3, #0]
}
 80048c4:	bf00      	nop
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	20000ed0 	.word	0x20000ed0
 80048d4:	20004ad0 	.word	0x20004ad0
 80048d8:	20004ad8 	.word	0x20004ad8
 80048dc:	20004ae0 	.word	0x20004ae0
 80048e0:	20004adc 	.word	0x20004adc
 80048e4:	20004aec 	.word	0x20004aec

080048e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048f0:	4b28      	ldr	r3, [pc, #160]	; (8004994 <prvInsertBlockIntoFreeList+0xac>)
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e002      	b.n	80048fc <prvInsertBlockIntoFreeList+0x14>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	429a      	cmp	r2, r3
 8004904:	d8f7      	bhi.n	80048f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	4413      	add	r3, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	429a      	cmp	r2, r3
 8004916:	d108      	bne.n	800492a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	441a      	add	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	441a      	add	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d118      	bne.n	8004970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <prvInsertBlockIntoFreeList+0xb0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d00d      	beq.n	8004966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e008      	b.n	8004978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004966:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <prvInsertBlockIntoFreeList+0xb0>)
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	e003      	b.n	8004978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	429a      	cmp	r2, r3
 800497e:	d002      	beq.n	8004986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20004ad0 	.word	0x20004ad0
 8004998:	20004ad8 	.word	0x20004ad8

0800499c <__libc_init_array>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	4d0d      	ldr	r5, [pc, #52]	; (80049d4 <__libc_init_array+0x38>)
 80049a0:	4c0d      	ldr	r4, [pc, #52]	; (80049d8 <__libc_init_array+0x3c>)
 80049a2:	1b64      	subs	r4, r4, r5
 80049a4:	10a4      	asrs	r4, r4, #2
 80049a6:	2600      	movs	r6, #0
 80049a8:	42a6      	cmp	r6, r4
 80049aa:	d109      	bne.n	80049c0 <__libc_init_array+0x24>
 80049ac:	4d0b      	ldr	r5, [pc, #44]	; (80049dc <__libc_init_array+0x40>)
 80049ae:	4c0c      	ldr	r4, [pc, #48]	; (80049e0 <__libc_init_array+0x44>)
 80049b0:	f000 f8f2 	bl	8004b98 <_init>
 80049b4:	1b64      	subs	r4, r4, r5
 80049b6:	10a4      	asrs	r4, r4, #2
 80049b8:	2600      	movs	r6, #0
 80049ba:	42a6      	cmp	r6, r4
 80049bc:	d105      	bne.n	80049ca <__libc_init_array+0x2e>
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c4:	4798      	blx	r3
 80049c6:	3601      	adds	r6, #1
 80049c8:	e7ee      	b.n	80049a8 <__libc_init_array+0xc>
 80049ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ce:	4798      	blx	r3
 80049d0:	3601      	adds	r6, #1
 80049d2:	e7f2      	b.n	80049ba <__libc_init_array+0x1e>
 80049d4:	08004c78 	.word	0x08004c78
 80049d8:	08004c78 	.word	0x08004c78
 80049dc:	08004c78 	.word	0x08004c78
 80049e0:	08004c7c 	.word	0x08004c7c

080049e4 <__retarget_lock_acquire_recursive>:
 80049e4:	4770      	bx	lr

080049e6 <__retarget_lock_release_recursive>:
 80049e6:	4770      	bx	lr

080049e8 <memcpy>:
 80049e8:	440a      	add	r2, r1
 80049ea:	4291      	cmp	r1, r2
 80049ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049f0:	d100      	bne.n	80049f4 <memcpy+0xc>
 80049f2:	4770      	bx	lr
 80049f4:	b510      	push	{r4, lr}
 80049f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049fe:	4291      	cmp	r1, r2
 8004a00:	d1f9      	bne.n	80049f6 <memcpy+0xe>
 8004a02:	bd10      	pop	{r4, pc}

08004a04 <memset>:
 8004a04:	4402      	add	r2, r0
 8004a06:	4603      	mov	r3, r0
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d100      	bne.n	8004a0e <memset+0xa>
 8004a0c:	4770      	bx	lr
 8004a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a12:	e7f9      	b.n	8004a08 <memset+0x4>

08004a14 <cleanup_glue>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	460c      	mov	r4, r1
 8004a18:	6809      	ldr	r1, [r1, #0]
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	b109      	cbz	r1, 8004a22 <cleanup_glue+0xe>
 8004a1e:	f7ff fff9 	bl	8004a14 <cleanup_glue>
 8004a22:	4621      	mov	r1, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a2a:	f000 b869 	b.w	8004b00 <_free_r>
	...

08004a30 <_reclaim_reent>:
 8004a30:	4b2c      	ldr	r3, [pc, #176]	; (8004ae4 <_reclaim_reent+0xb4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4283      	cmp	r3, r0
 8004a36:	b570      	push	{r4, r5, r6, lr}
 8004a38:	4604      	mov	r4, r0
 8004a3a:	d051      	beq.n	8004ae0 <_reclaim_reent+0xb0>
 8004a3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a3e:	b143      	cbz	r3, 8004a52 <_reclaim_reent+0x22>
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d14a      	bne.n	8004adc <_reclaim_reent+0xac>
 8004a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a48:	6819      	ldr	r1, [r3, #0]
 8004a4a:	b111      	cbz	r1, 8004a52 <_reclaim_reent+0x22>
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f000 f857 	bl	8004b00 <_free_r>
 8004a52:	6961      	ldr	r1, [r4, #20]
 8004a54:	b111      	cbz	r1, 8004a5c <_reclaim_reent+0x2c>
 8004a56:	4620      	mov	r0, r4
 8004a58:	f000 f852 	bl	8004b00 <_free_r>
 8004a5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a5e:	b111      	cbz	r1, 8004a66 <_reclaim_reent+0x36>
 8004a60:	4620      	mov	r0, r4
 8004a62:	f000 f84d 	bl	8004b00 <_free_r>
 8004a66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a68:	b111      	cbz	r1, 8004a70 <_reclaim_reent+0x40>
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f000 f848 	bl	8004b00 <_free_r>
 8004a70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004a72:	b111      	cbz	r1, 8004a7a <_reclaim_reent+0x4a>
 8004a74:	4620      	mov	r0, r4
 8004a76:	f000 f843 	bl	8004b00 <_free_r>
 8004a7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004a7c:	b111      	cbz	r1, 8004a84 <_reclaim_reent+0x54>
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f000 f83e 	bl	8004b00 <_free_r>
 8004a84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a86:	b111      	cbz	r1, 8004a8e <_reclaim_reent+0x5e>
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 f839 	bl	8004b00 <_free_r>
 8004a8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004a90:	b111      	cbz	r1, 8004a98 <_reclaim_reent+0x68>
 8004a92:	4620      	mov	r0, r4
 8004a94:	f000 f834 	bl	8004b00 <_free_r>
 8004a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a9a:	b111      	cbz	r1, 8004aa2 <_reclaim_reent+0x72>
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f000 f82f 	bl	8004b00 <_free_r>
 8004aa2:	69a3      	ldr	r3, [r4, #24]
 8004aa4:	b1e3      	cbz	r3, 8004ae0 <_reclaim_reent+0xb0>
 8004aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	4798      	blx	r3
 8004aac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004aae:	b1b9      	cbz	r1, 8004ae0 <_reclaim_reent+0xb0>
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ab6:	f7ff bfad 	b.w	8004a14 <cleanup_glue>
 8004aba:	5949      	ldr	r1, [r1, r5]
 8004abc:	b941      	cbnz	r1, 8004ad0 <_reclaim_reent+0xa0>
 8004abe:	3504      	adds	r5, #4
 8004ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac2:	2d80      	cmp	r5, #128	; 0x80
 8004ac4:	68d9      	ldr	r1, [r3, #12]
 8004ac6:	d1f8      	bne.n	8004aba <_reclaim_reent+0x8a>
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 f819 	bl	8004b00 <_free_r>
 8004ace:	e7ba      	b.n	8004a46 <_reclaim_reent+0x16>
 8004ad0:	680e      	ldr	r6, [r1, #0]
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f000 f814 	bl	8004b00 <_free_r>
 8004ad8:	4631      	mov	r1, r6
 8004ada:	e7ef      	b.n	8004abc <_reclaim_reent+0x8c>
 8004adc:	2500      	movs	r5, #0
 8004ade:	e7ef      	b.n	8004ac0 <_reclaim_reent+0x90>
 8004ae0:	bd70      	pop	{r4, r5, r6, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000010 	.word	0x20000010

08004ae8 <__malloc_lock>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	; (8004af0 <__malloc_lock+0x8>)
 8004aea:	f7ff bf7b 	b.w	80049e4 <__retarget_lock_acquire_recursive>
 8004aee:	bf00      	nop
 8004af0:	20004af0 	.word	0x20004af0

08004af4 <__malloc_unlock>:
 8004af4:	4801      	ldr	r0, [pc, #4]	; (8004afc <__malloc_unlock+0x8>)
 8004af6:	f7ff bf76 	b.w	80049e6 <__retarget_lock_release_recursive>
 8004afa:	bf00      	nop
 8004afc:	20004af0 	.word	0x20004af0

08004b00 <_free_r>:
 8004b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b02:	2900      	cmp	r1, #0
 8004b04:	d044      	beq.n	8004b90 <_free_r+0x90>
 8004b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b0a:	9001      	str	r0, [sp, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b12:	bfb8      	it	lt
 8004b14:	18e4      	addlt	r4, r4, r3
 8004b16:	f7ff ffe7 	bl	8004ae8 <__malloc_lock>
 8004b1a:	4a1e      	ldr	r2, [pc, #120]	; (8004b94 <_free_r+0x94>)
 8004b1c:	9801      	ldr	r0, [sp, #4]
 8004b1e:	6813      	ldr	r3, [r2, #0]
 8004b20:	b933      	cbnz	r3, 8004b30 <_free_r+0x30>
 8004b22:	6063      	str	r3, [r4, #4]
 8004b24:	6014      	str	r4, [r2, #0]
 8004b26:	b003      	add	sp, #12
 8004b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b2c:	f7ff bfe2 	b.w	8004af4 <__malloc_unlock>
 8004b30:	42a3      	cmp	r3, r4
 8004b32:	d908      	bls.n	8004b46 <_free_r+0x46>
 8004b34:	6825      	ldr	r5, [r4, #0]
 8004b36:	1961      	adds	r1, r4, r5
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	bf01      	itttt	eq
 8004b3c:	6819      	ldreq	r1, [r3, #0]
 8004b3e:	685b      	ldreq	r3, [r3, #4]
 8004b40:	1949      	addeq	r1, r1, r5
 8004b42:	6021      	streq	r1, [r4, #0]
 8004b44:	e7ed      	b.n	8004b22 <_free_r+0x22>
 8004b46:	461a      	mov	r2, r3
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	b10b      	cbz	r3, 8004b50 <_free_r+0x50>
 8004b4c:	42a3      	cmp	r3, r4
 8004b4e:	d9fa      	bls.n	8004b46 <_free_r+0x46>
 8004b50:	6811      	ldr	r1, [r2, #0]
 8004b52:	1855      	adds	r5, r2, r1
 8004b54:	42a5      	cmp	r5, r4
 8004b56:	d10b      	bne.n	8004b70 <_free_r+0x70>
 8004b58:	6824      	ldr	r4, [r4, #0]
 8004b5a:	4421      	add	r1, r4
 8004b5c:	1854      	adds	r4, r2, r1
 8004b5e:	42a3      	cmp	r3, r4
 8004b60:	6011      	str	r1, [r2, #0]
 8004b62:	d1e0      	bne.n	8004b26 <_free_r+0x26>
 8004b64:	681c      	ldr	r4, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	6053      	str	r3, [r2, #4]
 8004b6a:	4421      	add	r1, r4
 8004b6c:	6011      	str	r1, [r2, #0]
 8004b6e:	e7da      	b.n	8004b26 <_free_r+0x26>
 8004b70:	d902      	bls.n	8004b78 <_free_r+0x78>
 8004b72:	230c      	movs	r3, #12
 8004b74:	6003      	str	r3, [r0, #0]
 8004b76:	e7d6      	b.n	8004b26 <_free_r+0x26>
 8004b78:	6825      	ldr	r5, [r4, #0]
 8004b7a:	1961      	adds	r1, r4, r5
 8004b7c:	428b      	cmp	r3, r1
 8004b7e:	bf04      	itt	eq
 8004b80:	6819      	ldreq	r1, [r3, #0]
 8004b82:	685b      	ldreq	r3, [r3, #4]
 8004b84:	6063      	str	r3, [r4, #4]
 8004b86:	bf04      	itt	eq
 8004b88:	1949      	addeq	r1, r1, r5
 8004b8a:	6021      	streq	r1, [r4, #0]
 8004b8c:	6054      	str	r4, [r2, #4]
 8004b8e:	e7ca      	b.n	8004b26 <_free_r+0x26>
 8004b90:	b003      	add	sp, #12
 8004b92:	bd30      	pop	{r4, r5, pc}
 8004b94:	20004af4 	.word	0x20004af4

08004b98 <_init>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	bf00      	nop
 8004b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9e:	bc08      	pop	{r3}
 8004ba0:	469e      	mov	lr, r3
 8004ba2:	4770      	bx	lr

08004ba4 <_fini>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr
