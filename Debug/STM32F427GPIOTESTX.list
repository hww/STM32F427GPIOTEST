
STM32F427GPIOTESTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c60  08004c60  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c68  08004c68  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a84  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004af8  20004af8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014eb8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c48  00000000  00000000  00034f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00037ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001058  00000000  00000000  00038d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d0f  00000000  00000000  00039d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e7f  00000000  00000000  0003ca8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000debcf  00000000  00000000  0004e90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d4dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c68  00000000  00000000  0012d530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004b88 	.word	0x08004b88

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08004b88 	.word	0x08004b88

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa64 	bl	80009c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f816 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f874 	bl	80005ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f001 fcc8 	bl	8001e98 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <main+0x2c>)
 800050a:	2100      	movs	r1, #0
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <main+0x30>)
 800050e:	f001 fd0d 	bl	8001f2c <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <main+0x34>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f001 fce2 	bl	8001ee0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x28>
 800051e:	bf00      	nop
 8000520:	08004bc4 	.word	0x08004bc4
 8000524:	080006e5 	.word	0x080006e5
 8000528:	20000090 	.word	0x20000090

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 fa5a 	bl	80049f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <SystemClock_Config+0xb8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <SystemClock_Config+0xb8>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <SystemClock_Config+0xb8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <SystemClock_Config+0xbc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <SystemClock_Config+0xbc>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <SystemClock_Config+0xbc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fd11 	bl	8000fc8 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005ac:	f000 f90a 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 ff74 	bl	80014b8 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d6:	f000 f8f5 	bl	80007c4 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b35      	ldr	r3, [pc, #212]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a34      	ldr	r2, [pc, #208]	; (80006dc <MX_GPIO_Init+0xf0>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a2d      	ldr	r2, [pc, #180]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a26      	ldr	r2, [pc, #152]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b24      	ldr	r3, [pc, #144]	; (80006dc <MX_GPIO_Init+0xf0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_GPIO_Init+0xf0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a18      	ldr	r2, [pc, #96]	; (80006dc <MX_GPIO_Init+0xf0>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_GPIO_Init+0xf0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800068e:	2200      	movs	r2, #0
 8000690:	f640 413f 	movw	r1, #3135	; 0xc3f
 8000694:	4812      	ldr	r0, [pc, #72]	; (80006e0 <MX_GPIO_Init+0xf4>)
 8000696:	f000 fc7d 	bl	8000f94 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF10 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800069a:	f640 433f 	movw	r3, #3135	; 0xc3f
 800069e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_GPIO_Init+0xf4>)
 80006b4:	f000 faaa 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80006b8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_GPIO_Init+0xf4>)
 80006ce:	f000 fa9d 	bl	8000c0c <HAL_GPIO_Init>

}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40021400 	.word	0x40021400

080006e4 <StartDefaultTask>:
 * When PF6=1 и PF7=1, then PF10=1, otherwise PF10=0;
 * When PF8=1 и PF9=1, then PF11=1, otherwise PF11=0;
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	/* A BABY TALKS FOR */
	GPIO_PinState gf6 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	482b      	ldr	r0, [pc, #172]	; (800079c <StartDefaultTask+0xb8>)
 80006f0:	f000 fc38 	bl	8000f64 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	75fb      	strb	r3, [r7, #23]
	GPIO_PinState gf7 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	4828      	ldr	r0, [pc, #160]	; (800079c <StartDefaultTask+0xb8>)
 80006fc:	f000 fc32 	bl	8000f64 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	75bb      	strb	r3, [r7, #22]
	GPIO_PinState gf8 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000708:	4824      	ldr	r0, [pc, #144]	; (800079c <StartDefaultTask+0xb8>)
 800070a:	f000 fc2b 	bl	8000f64 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	757b      	strb	r3, [r7, #21]
	GPIO_PinState gf9 = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4821      	ldr	r0, [pc, #132]	; (800079c <StartDefaultTask+0xb8>)
 8000718:	f000 fc24 	bl	8000f64 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	753b      	strb	r3, [r7, #20]

	int gf10 = (int)gf6 & (int)gf7;
 8000720:	7dfa      	ldrb	r2, [r7, #23]
 8000722:	7dbb      	ldrb	r3, [r7, #22]
 8000724:	4013      	ands	r3, r2
 8000726:	b2db      	uxtb	r3, r3
 8000728:	613b      	str	r3, [r7, #16]
	int gf11 = (int)gf8 & (int)gf9;
 800072a:	7d7a      	ldrb	r2, [r7, #21]
 800072c:	7d3b      	ldrb	r3, [r7, #20]
 800072e:	4013      	ands	r3, r2
 8000730:	b2db      	uxtb	r3, r3
 8000732:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, gf6);
 8000734:	7dfb      	ldrb	r3, [r7, #23]
 8000736:	461a      	mov	r2, r3
 8000738:	2101      	movs	r1, #1
 800073a:	4818      	ldr	r0, [pc, #96]	; (800079c <StartDefaultTask+0xb8>)
 800073c:	f000 fc2a 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, gf7);
 8000740:	7dbb      	ldrb	r3, [r7, #22]
 8000742:	461a      	mov	r2, r3
 8000744:	2102      	movs	r1, #2
 8000746:	4815      	ldr	r0, [pc, #84]	; (800079c <StartDefaultTask+0xb8>)
 8000748:	f000 fc24 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, gf8);
 800074c:	7d7b      	ldrb	r3, [r7, #21]
 800074e:	461a      	mov	r2, r3
 8000750:	2104      	movs	r1, #4
 8000752:	4812      	ldr	r0, [pc, #72]	; (800079c <StartDefaultTask+0xb8>)
 8000754:	f000 fc1e 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, gf9);
 8000758:	7d3b      	ldrb	r3, [r7, #20]
 800075a:	461a      	mov	r2, r3
 800075c:	2108      	movs	r1, #8
 800075e:	480f      	ldr	r0, [pc, #60]	; (800079c <StartDefaultTask+0xb8>)
 8000760:	f000 fc18 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, gf10 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	2b00      	cmp	r3, #0
 8000768:	bf14      	ite	ne
 800076a:	2301      	movne	r3, #1
 800076c:	2300      	moveq	r3, #0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <StartDefaultTask+0xb8>)
 8000778:	f000 fc0c 	bl	8000f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, gf11 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b00      	cmp	r3, #0
 8000780:	bf14      	ite	ne
 8000782:	2301      	movne	r3, #1
 8000784:	2300      	moveq	r3, #0
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461a      	mov	r2, r3
 800078a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <StartDefaultTask+0xb8>)
 8000790:	f000 fc00 	bl	8000f94 <HAL_GPIO_WritePin>

    osDelay(10);
 8000794:	200a      	movs	r0, #10
 8000796:	f001 fc5b 	bl	8002050 <osDelay>
  {
 800079a:	e7a7      	b.n	80006ec <StartDefaultTask+0x8>
 800079c:	40021400 	.word	0x40021400

080007a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d101      	bne.n	80007b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b2:	f000 f929 	bl	8000a08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40010000 	.word	0x40010000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_MspInit+0x54>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a11      	ldr	r2, [pc, #68]	; (8000824 <HAL_MspInit+0x54>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_MspInit+0x54>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <HAL_MspInit+0x54>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <HAL_MspInit+0x54>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_MspInit+0x54>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	210f      	movs	r1, #15
 8000812:	f06f 0001 	mvn.w	r0, #1
 8000816:	f000 f9cf 	bl	8000bb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <HAL_InitTick+0xd0>)
 800083e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000840:	4a2d      	ldr	r2, [pc, #180]	; (80008f8 <HAL_InitTick+0xd0>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	6453      	str	r3, [r2, #68]	; 0x44
 8000848:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <HAL_InitTick+0xd0>)
 800084a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000854:	f107 020c 	add.w	r2, r7, #12
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fff6 	bl	8001850 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000864:	f000 ffe0 	bl	8001828 <HAL_RCC_GetPCLK2Freq>
 8000868:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086c:	4a23      	ldr	r2, [pc, #140]	; (80008fc <HAL_InitTick+0xd4>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	0c9b      	lsrs	r3, r3, #18
 8000874:	3b01      	subs	r3, #1
 8000876:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <HAL_InitTick+0xd8>)
 800087a:	4a22      	ldr	r2, [pc, #136]	; (8000904 <HAL_InitTick+0xdc>)
 800087c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <HAL_InitTick+0xd8>)
 8000880:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000884:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <HAL_InitTick+0xd8>)
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_InitTick+0xd8>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_InitTick+0xd8>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_InitTick+0xd8>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <HAL_InitTick+0xd8>)
 80008a0:	f001 f808 	bl	80018b4 <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d11b      	bne.n	80008ea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <HAL_InitTick+0xd8>)
 80008b4:	f001 f858 	bl	8001968 <HAL_TIM_Base_Start_IT>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d111      	bne.n	80008ea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008c6:	2019      	movs	r0, #25
 80008c8:	f000 f992 	bl	8000bf0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b0f      	cmp	r3, #15
 80008d0:	d808      	bhi.n	80008e4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008d2:	2200      	movs	r2, #0
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	2019      	movs	r0, #25
 80008d8:	f000 f96e 	bl	8000bb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_InitTick+0xe0>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	e002      	b.n	80008ea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	431bde83 	.word	0x431bde83
 8000900:	20000094 	.word	0x20000094
 8000904:	40010000 	.word	0x40010000
 8000908:	20000004 	.word	0x20000004

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800093e:	f001 f883 	bl	8001a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000094 	.word	0x20000094

0800094c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <SystemInit+0x20>)
 8000952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <SystemInit+0x20>)
 8000958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800095c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000976:	490e      	ldr	r1, [pc, #56]	; (80009b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000978:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800098c:	4c0b      	ldr	r4, [pc, #44]	; (80009bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800099a:	f7ff ffd7 	bl	800094c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099e:	f003 fff5 	bl	800498c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a2:	f7ff fda7 	bl	80004f4 <main>
  bx  lr    
 80009a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009b4:	08004c70 	.word	0x08004c70
  ldr r2, =_sbss
 80009b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009bc:	20004af8 	.word	0x20004af8

080009c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC_IRQHandler>
	...

080009c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <HAL_Init+0x40>)
 80009ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_Init+0x40>)
 80009da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_Init+0x40>)
 80009e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f000 f8d8 	bl	8000ba2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f2:	200f      	movs	r0, #15
 80009f4:	f7ff ff18 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f8:	f7ff feea 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023c00 	.word	0x40023c00

08000a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x20>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x24>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_IncTick+0x24>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	200000dc 	.word	0x200000dc

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_GetTick+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	200000dc 	.word	0x200000dc

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db0b      	blt.n	8000ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 021f 	and.w	r2, r3, #31
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <__NVIC_EnableIRQ+0x38>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	2001      	movs	r0, #1
 8000ace:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ff4c 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bca:	f7ff ff61 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000bce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	68b9      	ldr	r1, [r7, #8]
 8000bd4:	6978      	ldr	r0, [r7, #20]
 8000bd6:	f7ff ffb1 	bl	8000b3c <NVIC_EncodePriority>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff80 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff54 	bl	8000aac <__NVIC_EnableIRQ>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e177      	b.n	8000f18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f040 8166 	bne.w	8000f12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d005      	beq.n	8000c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d130      	bne.n	8000cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4013      	ands	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c94:	2201      	movs	r2, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	f003 0201 	and.w	r2, r3, #1
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d017      	beq.n	8000cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d123      	bne.n	8000d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	69b9      	ldr	r1, [r7, #24]
 8000d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0203 	and.w	r2, r3, #3
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80c0 	beq.w	8000f12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b66      	ldr	r3, [pc, #408]	; (8000f30 <HAL_GPIO_Init+0x324>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a65      	ldr	r2, [pc, #404]	; (8000f30 <HAL_GPIO_Init+0x324>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b63      	ldr	r3, [pc, #396]	; (8000f30 <HAL_GPIO_Init+0x324>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dae:	4a61      	ldr	r2, [pc, #388]	; (8000f34 <HAL_GPIO_Init+0x328>)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a58      	ldr	r2, [pc, #352]	; (8000f38 <HAL_GPIO_Init+0x32c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d037      	beq.n	8000e4a <HAL_GPIO_Init+0x23e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a57      	ldr	r2, [pc, #348]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d031      	beq.n	8000e46 <HAL_GPIO_Init+0x23a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a56      	ldr	r2, [pc, #344]	; (8000f40 <HAL_GPIO_Init+0x334>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d02b      	beq.n	8000e42 <HAL_GPIO_Init+0x236>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a55      	ldr	r2, [pc, #340]	; (8000f44 <HAL_GPIO_Init+0x338>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d025      	beq.n	8000e3e <HAL_GPIO_Init+0x232>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a54      	ldr	r2, [pc, #336]	; (8000f48 <HAL_GPIO_Init+0x33c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d01f      	beq.n	8000e3a <HAL_GPIO_Init+0x22e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a53      	ldr	r2, [pc, #332]	; (8000f4c <HAL_GPIO_Init+0x340>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0x22a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a52      	ldr	r2, [pc, #328]	; (8000f50 <HAL_GPIO_Init+0x344>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0x226>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a51      	ldr	r2, [pc, #324]	; (8000f54 <HAL_GPIO_Init+0x348>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00d      	beq.n	8000e2e <HAL_GPIO_Init+0x222>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a50      	ldr	r2, [pc, #320]	; (8000f58 <HAL_GPIO_Init+0x34c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x21e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4f      	ldr	r2, [pc, #316]	; (8000f5c <HAL_GPIO_Init+0x350>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_GPIO_Init+0x21a>
 8000e22:	2309      	movs	r3, #9
 8000e24:	e012      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e26:	230a      	movs	r3, #10
 8000e28:	e010      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	e00e      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e00c      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e32:	2306      	movs	r3, #6
 8000e34:	e00a      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e36:	2305      	movs	r3, #5
 8000e38:	e008      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e004      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e002      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	f002 0203 	and.w	r2, r2, #3
 8000e52:	0092      	lsls	r2, r2, #2
 8000e54:	4093      	lsls	r3, r2
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e5c:	4935      	ldr	r1, [pc, #212]	; (8000f34 <HAL_GPIO_Init+0x328>)
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e8e:	4a34      	ldr	r2, [pc, #208]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb8:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee2:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	f67f ae84 	bls.w	8000c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40013800 	.word	0x40013800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40021400 	.word	0x40021400
 8000f50:	40021800 	.word	0x40021800
 8000f54:	40021c00 	.word	0x40021c00
 8000f58:	40022000 	.word	0x40022000
 8000f5c:	40022400 	.word	0x40022400
 8000f60:	40013c00 	.word	0x40013c00

08000f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e001      	b.n	8000f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa4:	787b      	ldrb	r3, [r7, #1]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fb0:	e003      	b.n	8000fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	041a      	lsls	r2, r3, #16
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	619a      	str	r2, [r3, #24]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e267      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d075      	beq.n	80010d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fe6:	4b88      	ldr	r3, [pc, #544]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d00c      	beq.n	800100c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ff2:	4b85      	ldr	r3, [pc, #532]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d112      	bne.n	8001024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ffe:	4b82      	ldr	r3, [pc, #520]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800100a:	d10b      	bne.n	8001024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100c:	4b7e      	ldr	r3, [pc, #504]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d05b      	beq.n	80010d0 <HAL_RCC_OscConfig+0x108>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d157      	bne.n	80010d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e242      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800102c:	d106      	bne.n	800103c <HAL_RCC_OscConfig+0x74>
 800102e:	4b76      	ldr	r3, [pc, #472]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a75      	ldr	r2, [pc, #468]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e01d      	b.n	8001078 <HAL_RCC_OscConfig+0xb0>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x98>
 8001046:	4b70      	ldr	r3, [pc, #448]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a6f      	ldr	r2, [pc, #444]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b6d      	ldr	r3, [pc, #436]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a6c      	ldr	r2, [pc, #432]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e00b      	b.n	8001078 <HAL_RCC_OscConfig+0xb0>
 8001060:	4b69      	ldr	r3, [pc, #420]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a68      	ldr	r2, [pc, #416]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b66      	ldr	r3, [pc, #408]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a65      	ldr	r2, [pc, #404]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d013      	beq.n	80010a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fcd6 	bl	8000a30 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fcd2 	bl	8000a30 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	; 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e207      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	4b5b      	ldr	r3, [pc, #364]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f0      	beq.n	8001088 <HAL_RCC_OscConfig+0xc0>
 80010a6:	e014      	b.n	80010d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fcc2 	bl	8000a30 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fcbe 	bl	8000a30 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e1f3      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	4b51      	ldr	r3, [pc, #324]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0xe8>
 80010ce:	e000      	b.n	80010d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d063      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010de:	4b4a      	ldr	r3, [pc, #296]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00b      	beq.n	8001102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ea:	4b47      	ldr	r3, [pc, #284]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d11c      	bne.n	8001130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f6:	4b44      	ldr	r3, [pc, #272]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d116      	bne.n	8001130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001102:	4b41      	ldr	r3, [pc, #260]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d005      	beq.n	800111a <HAL_RCC_OscConfig+0x152>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d001      	beq.n	800111a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e1c7      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4937      	ldr	r1, [pc, #220]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112e:	e03a      	b.n	80011a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d020      	beq.n	800117a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001138:	4b34      	ldr	r3, [pc, #208]	; (800120c <HAL_RCC_OscConfig+0x244>)
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113e:	f7ff fc77 	bl	8000a30 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001146:	f7ff fc73 	bl	8000a30 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e1a8      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4925      	ldr	r1, [pc, #148]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 8001174:	4313      	orrs	r3, r2
 8001176:	600b      	str	r3, [r1, #0]
 8001178:	e015      	b.n	80011a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <HAL_RCC_OscConfig+0x244>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001180:	f7ff fc56 	bl	8000a30 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001188:	f7ff fc52 	bl	8000a30 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e187      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d036      	beq.n	8001220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d016      	beq.n	80011e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_RCC_OscConfig+0x248>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c0:	f7ff fc36 	bl	8000a30 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc32 	bl	8000a30 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e167      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_RCC_OscConfig+0x240>)
 80011dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x200>
 80011e6:	e01b      	b.n	8001220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_RCC_OscConfig+0x248>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fc1f 	bl	8000a30 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f4:	e00e      	b.n	8001214 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f6:	f7ff fc1b 	bl	8000a30 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d907      	bls.n	8001214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e150      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
 8001208:	40023800 	.word	0x40023800
 800120c:	42470000 	.word	0x42470000
 8001210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001214:	4b88      	ldr	r3, [pc, #544]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 8001216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1ea      	bne.n	80011f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 8097 	beq.w	800135c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001232:	4b81      	ldr	r3, [pc, #516]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10f      	bne.n	800125e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b7d      	ldr	r3, [pc, #500]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a7c      	ldr	r2, [pc, #496]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b7a      	ldr	r3, [pc, #488]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800125a:	2301      	movs	r3, #1
 800125c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125e:	4b77      	ldr	r3, [pc, #476]	; (800143c <HAL_RCC_OscConfig+0x474>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d118      	bne.n	800129c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126a:	4b74      	ldr	r3, [pc, #464]	; (800143c <HAL_RCC_OscConfig+0x474>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a73      	ldr	r2, [pc, #460]	; (800143c <HAL_RCC_OscConfig+0x474>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001276:	f7ff fbdb 	bl	8000a30 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127e:	f7ff fbd7 	bl	8000a30 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e10c      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001290:	4b6a      	ldr	r3, [pc, #424]	; (800143c <HAL_RCC_OscConfig+0x474>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d106      	bne.n	80012b2 <HAL_RCC_OscConfig+0x2ea>
 80012a4:	4b64      	ldr	r3, [pc, #400]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80012a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a8:	4a63      	ldr	r2, [pc, #396]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6713      	str	r3, [r2, #112]	; 0x70
 80012b0:	e01c      	b.n	80012ec <HAL_RCC_OscConfig+0x324>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x30c>
 80012ba:	4b5f      	ldr	r3, [pc, #380]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80012bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012be:	4a5e      	ldr	r2, [pc, #376]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6713      	str	r3, [r2, #112]	; 0x70
 80012c6:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80012c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ca:	4a5b      	ldr	r2, [pc, #364]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6713      	str	r3, [r2, #112]	; 0x70
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0x324>
 80012d4:	4b58      	ldr	r3, [pc, #352]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80012d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d8:	4a57      	ldr	r2, [pc, #348]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	6713      	str	r3, [r2, #112]	; 0x70
 80012e0:	4b55      	ldr	r3, [pc, #340]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e4:	4a54      	ldr	r2, [pc, #336]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80012e6:	f023 0304 	bic.w	r3, r3, #4
 80012ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d015      	beq.n	8001320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fb9c 	bl	8000a30 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fa:	e00a      	b.n	8001312 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012fc:	f7ff fb98 	bl	8000a30 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f241 3288 	movw	r2, #5000	; 0x1388
 800130a:	4293      	cmp	r3, r2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e0cb      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001312:	4b49      	ldr	r3, [pc, #292]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 8001314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0ee      	beq.n	80012fc <HAL_RCC_OscConfig+0x334>
 800131e:	e014      	b.n	800134a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001320:	f7ff fb86 	bl	8000a30 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001326:	e00a      	b.n	800133e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001328:	f7ff fb82 	bl	8000a30 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	; 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e0b5      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133e:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1ee      	bne.n	8001328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d105      	bne.n	800135c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a38      	ldr	r2, [pc, #224]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 8001356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80a1 	beq.w	80014a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b08      	cmp	r3, #8
 8001370:	d05c      	beq.n	800142c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d141      	bne.n	80013fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137a:	4b31      	ldr	r3, [pc, #196]	; (8001440 <HAL_RCC_OscConfig+0x478>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fb56 	bl	8000a30 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff fb52 	bl	8000a30 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e087      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69da      	ldr	r2, [r3, #28]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	019b      	lsls	r3, r3, #6
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	085b      	lsrs	r3, r3, #1
 80013be:	3b01      	subs	r3, #1
 80013c0:	041b      	lsls	r3, r3, #16
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	061b      	lsls	r3, r3, #24
 80013ca:	491b      	ldr	r1, [pc, #108]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_RCC_OscConfig+0x478>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fb2b 	bl	8000a30 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013de:	f7ff fb27 	bl	8000a30 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e05c      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x416>
 80013fc:	e054      	b.n	80014a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_RCC_OscConfig+0x478>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fb14 	bl	8000a30 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fb10 	bl	8000a30 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e045      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_RCC_OscConfig+0x470>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x444>
 800142a:	e03d      	b.n	80014a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d107      	bne.n	8001444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e038      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
 8001438:	40023800 	.word	0x40023800
 800143c:	40007000 	.word	0x40007000
 8001440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_RCC_OscConfig+0x4ec>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d028      	beq.n	80014a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d121      	bne.n	80014a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d11a      	bne.n	80014a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001474:	4013      	ands	r3, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800147a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800147c:	4293      	cmp	r3, r2
 800147e:	d111      	bne.n	80014a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	085b      	lsrs	r3, r3, #1
 800148c:	3b01      	subs	r3, #1
 800148e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001490:	429a      	cmp	r2, r3
 8001492:	d107      	bne.n	80014a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0cc      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014cc:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d90c      	bls.n	80014f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b65      	ldr	r3, [pc, #404]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	4b63      	ldr	r3, [pc, #396]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0b8      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d020      	beq.n	8001542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800150c:	4b59      	ldr	r3, [pc, #356]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4a58      	ldr	r2, [pc, #352]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001524:	4b53      	ldr	r3, [pc, #332]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a52      	ldr	r2, [pc, #328]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800152e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001530:	4b50      	ldr	r3, [pc, #320]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	494d      	ldr	r1, [pc, #308]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	4313      	orrs	r3, r2
 8001540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d044      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b47      	ldr	r3, [pc, #284]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d119      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e07f      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d003      	beq.n	8001576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001572:	2b03      	cmp	r3, #3
 8001574:	d107      	bne.n	8001586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001576:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e06f      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001586:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e067      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001596:	4b37      	ldr	r3, [pc, #220]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f023 0203 	bic.w	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4934      	ldr	r1, [pc, #208]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015a8:	f7ff fa42 	bl	8000a30 <HAL_GetTick>
 80015ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b0:	f7ff fa3e 	bl	8000a30 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e04f      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 020c 	and.w	r2, r3, #12
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d1eb      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 030f 	and.w	r3, r3, #15
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d20c      	bcs.n	8001600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b22      	ldr	r3, [pc, #136]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_RCC_ClockConfig+0x1b8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e032      	b.n	8001666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4916      	ldr	r1, [pc, #88]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	490e      	ldr	r1, [pc, #56]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	4313      	orrs	r3, r2
 800163c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800163e:	f000 f821 	bl	8001684 <HAL_RCC_GetSysClockFreq>
 8001642:	4602      	mov	r2, r0
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	490a      	ldr	r1, [pc, #40]	; (8001678 <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	5ccb      	ldrb	r3, [r1, r3]
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_RCC_ClockConfig+0x1c8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff f8e2 	bl	8000828 <HAL_InitTick>

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00
 8001674:	40023800 	.word	0x40023800
 8001678:	08004be8 	.word	0x08004be8
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004

08001684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001688:	b090      	sub	sp, #64	; 0x40
 800168a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
 8001690:	2300      	movs	r3, #0
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_GetSysClockFreq+0x180>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d00d      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x40>
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	f200 80a1 	bhi.w	80017f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x34>
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d003      	beq.n	80016be <HAL_RCC_GetSysClockFreq+0x3a>
 80016b6:	e09b      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016b8:	4b53      	ldr	r3, [pc, #332]	; (8001808 <HAL_RCC_GetSysClockFreq+0x184>)
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016bc:	e09b      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016be:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_RCC_GetSysClockFreq+0x188>)
 80016c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016c2:	e098      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c4:	4b4f      	ldr	r3, [pc, #316]	; (8001804 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ce:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <HAL_RCC_GetSysClockFreq+0x180>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d028      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_RCC_GetSysClockFreq+0x180>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	099b      	lsrs	r3, r3, #6
 80016e0:	2200      	movs	r2, #0
 80016e2:	623b      	str	r3, [r7, #32]
 80016e4:	627a      	str	r2, [r7, #36]	; 0x24
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016ec:	2100      	movs	r1, #0
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_GetSysClockFreq+0x188>)
 80016f0:	fb03 f201 	mul.w	r2, r3, r1
 80016f4:	2300      	movs	r3, #0
 80016f6:	fb00 f303 	mul.w	r3, r0, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	4a43      	ldr	r2, [pc, #268]	; (800180c <HAL_RCC_GetSysClockFreq+0x188>)
 80016fe:	fba0 1202 	umull	r1, r2, r0, r2
 8001702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001704:	460a      	mov	r2, r1
 8001706:	62ba      	str	r2, [r7, #40]	; 0x28
 8001708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170a:	4413      	add	r3, r2
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800170e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001710:	2200      	movs	r2, #0
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	61fa      	str	r2, [r7, #28]
 8001716:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800171a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800171e:	f7fe fd67 	bl	80001f0 <__aeabi_uldivmod>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4613      	mov	r3, r2
 8001728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800172a:	e053      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172c:	4b35      	ldr	r3, [pc, #212]	; (8001804 <HAL_RCC_GetSysClockFreq+0x180>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	2200      	movs	r2, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	617a      	str	r2, [r7, #20]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800173e:	f04f 0b00 	mov.w	fp, #0
 8001742:	4652      	mov	r2, sl
 8001744:	465b      	mov	r3, fp
 8001746:	f04f 0000 	mov.w	r0, #0
 800174a:	f04f 0100 	mov.w	r1, #0
 800174e:	0159      	lsls	r1, r3, #5
 8001750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001754:	0150      	lsls	r0, r2, #5
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	ebb2 080a 	subs.w	r8, r2, sl
 800175e:	eb63 090b 	sbc.w	r9, r3, fp
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800176e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001772:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001776:	ebb2 0408 	subs.w	r4, r2, r8
 800177a:	eb63 0509 	sbc.w	r5, r3, r9
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	00eb      	lsls	r3, r5, #3
 8001788:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800178c:	00e2      	lsls	r2, r4, #3
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	eb14 030a 	adds.w	r3, r4, sl
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	eb45 030b 	adc.w	r3, r5, fp
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017aa:	4629      	mov	r1, r5
 80017ac:	028b      	lsls	r3, r1, #10
 80017ae:	4621      	mov	r1, r4
 80017b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017b4:	4621      	mov	r1, r4
 80017b6:	028a      	lsls	r2, r1, #10
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017be:	2200      	movs	r2, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	60fa      	str	r2, [r7, #12]
 80017c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017c8:	f7fe fd12 	bl	80001f0 <__aeabi_uldivmod>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4613      	mov	r3, r2
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	3301      	adds	r3, #1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017ee:	e002      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetSysClockFreq+0x184>)
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3740      	adds	r7, #64	; 0x40
 80017fc:	46bd      	mov	sp, r7
 80017fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	00f42400 	.word	0x00f42400
 800180c:	017d7840 	.word	0x017d7840

08001810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_RCC_GetHCLKFreq+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000000 	.word	0x20000000

08001828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800182c:	f7ff fff0 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001830:	4602      	mov	r2, r0
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	0b5b      	lsrs	r3, r3, #13
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	4903      	ldr	r1, [pc, #12]	; (800184c <HAL_RCC_GetPCLK2Freq+0x24>)
 800183e:	5ccb      	ldrb	r3, [r1, r3]
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	08004bf8 	.word	0x08004bf8

08001850 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	220f      	movs	r2, #15
 800185e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_GetClockConfig+0x5c>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_RCC_GetClockConfig+0x5c>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_RCC_GetClockConfig+0x5c>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_GetClockConfig+0x5c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	08db      	lsrs	r3, r3, #3
 800188a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <HAL_RCC_GetClockConfig+0x60>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 020f 	and.w	r2, r3, #15
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40023c00 	.word	0x40023c00

080018b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e041      	b.n	800194a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f839 	bl	8001952 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f000 f9d8 	bl	8001ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d001      	beq.n	8001980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e04e      	b.n	8001a1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a23      	ldr	r2, [pc, #140]	; (8001a2c <HAL_TIM_Base_Start_IT+0xc4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d022      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x80>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019aa:	d01d      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x80>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <HAL_TIM_Base_Start_IT+0xc8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d018      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x80>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1e      	ldr	r2, [pc, #120]	; (8001a34 <HAL_TIM_Base_Start_IT+0xcc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d013      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x80>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <HAL_TIM_Base_Start_IT+0xd0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00e      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x80>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <HAL_TIM_Base_Start_IT+0xd4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d009      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x80>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <HAL_TIM_Base_Start_IT+0xd8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d004      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x80>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <HAL_TIM_Base_Start_IT+0xdc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d111      	bne.n	8001a0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d010      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a0a:	e007      	b.n	8001a1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0201 	orr.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40000800 	.word	0x40000800
 8001a38:	40000c00 	.word	0x40000c00
 8001a3c:	40010400 	.word	0x40010400
 8001a40:	40014000 	.word	0x40014000
 8001a44:	40001800 	.word	0x40001800

08001a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d122      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d11b      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0202 	mvn.w	r2, #2
 8001a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f8ee 	bl	8001c6c <HAL_TIM_IC_CaptureCallback>
 8001a90:	e005      	b.n	8001a9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f8e0 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f8f1 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d122      	bne.n	8001af8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d11b      	bne.n	8001af8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0204 	mvn.w	r2, #4
 8001ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8c4 	bl	8001c6c <HAL_TIM_IC_CaptureCallback>
 8001ae4:	e005      	b.n	8001af2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8b6 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f8c7 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d122      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d11b      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0208 	mvn.w	r2, #8
 8001b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2204      	movs	r2, #4
 8001b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f89a 	bl	8001c6c <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f88c 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f89d 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d122      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d11b      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0210 	mvn.w	r2, #16
 8001b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2208      	movs	r2, #8
 8001b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f870 	bl	8001c6c <HAL_TIM_IC_CaptureCallback>
 8001b8c:	e005      	b.n	8001b9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f862 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f873 	bl	8001c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d10e      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d107      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0201 	mvn.w	r2, #1
 8001bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fdea 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	2b80      	cmp	r3, #128	; 0x80
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	2b80      	cmp	r3, #128	; 0x80
 8001be6:	d107      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f902 	bl	8001dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c02:	2b40      	cmp	r3, #64	; 0x40
 8001c04:	d10e      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	2b40      	cmp	r3, #64	; 0x40
 8001c12:	d107      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f838 	bl	8001c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	d10e      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d107      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0220 	mvn.w	r2, #32
 8001c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8cc 	bl	8001de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a40      	ldr	r2, [pc, #256]	; (8001dbc <TIM_Base_SetConfig+0x114>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d013      	beq.n	8001ce8 <TIM_Base_SetConfig+0x40>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc6:	d00f      	beq.n	8001ce8 <TIM_Base_SetConfig+0x40>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a3d      	ldr	r2, [pc, #244]	; (8001dc0 <TIM_Base_SetConfig+0x118>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00b      	beq.n	8001ce8 <TIM_Base_SetConfig+0x40>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a3c      	ldr	r2, [pc, #240]	; (8001dc4 <TIM_Base_SetConfig+0x11c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d007      	beq.n	8001ce8 <TIM_Base_SetConfig+0x40>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a3b      	ldr	r2, [pc, #236]	; (8001dc8 <TIM_Base_SetConfig+0x120>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d003      	beq.n	8001ce8 <TIM_Base_SetConfig+0x40>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a3a      	ldr	r2, [pc, #232]	; (8001dcc <TIM_Base_SetConfig+0x124>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d108      	bne.n	8001cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a2f      	ldr	r2, [pc, #188]	; (8001dbc <TIM_Base_SetConfig+0x114>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d02b      	beq.n	8001d5a <TIM_Base_SetConfig+0xb2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d027      	beq.n	8001d5a <TIM_Base_SetConfig+0xb2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a2c      	ldr	r2, [pc, #176]	; (8001dc0 <TIM_Base_SetConfig+0x118>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d023      	beq.n	8001d5a <TIM_Base_SetConfig+0xb2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a2b      	ldr	r2, [pc, #172]	; (8001dc4 <TIM_Base_SetConfig+0x11c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01f      	beq.n	8001d5a <TIM_Base_SetConfig+0xb2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a2a      	ldr	r2, [pc, #168]	; (8001dc8 <TIM_Base_SetConfig+0x120>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01b      	beq.n	8001d5a <TIM_Base_SetConfig+0xb2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <TIM_Base_SetConfig+0x124>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d017      	beq.n	8001d5a <TIM_Base_SetConfig+0xb2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <TIM_Base_SetConfig+0x128>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <TIM_Base_SetConfig+0xb2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <TIM_Base_SetConfig+0x12c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00f      	beq.n	8001d5a <TIM_Base_SetConfig+0xb2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <TIM_Base_SetConfig+0x130>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00b      	beq.n	8001d5a <TIM_Base_SetConfig+0xb2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a25      	ldr	r2, [pc, #148]	; (8001ddc <TIM_Base_SetConfig+0x134>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <TIM_Base_SetConfig+0xb2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <TIM_Base_SetConfig+0x138>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d003      	beq.n	8001d5a <TIM_Base_SetConfig+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <TIM_Base_SetConfig+0x13c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d108      	bne.n	8001d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <TIM_Base_SetConfig+0x114>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d003      	beq.n	8001da0 <TIM_Base_SetConfig+0xf8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <TIM_Base_SetConfig+0x124>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d103      	bne.n	8001da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	615a      	str	r2, [r3, #20]
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	40000800 	.word	0x40000800
 8001dc8:	40000c00 	.word	0x40000c00
 8001dcc:	40010400 	.word	0x40010400
 8001dd0:	40014000 	.word	0x40014000
 8001dd4:	40014400 	.word	0x40014400
 8001dd8:	40014800 	.word	0x40014800
 8001ddc:	40001800 	.word	0x40001800
 8001de0:	40001c00 	.word	0x40001c00
 8001de4:	40002000 	.word	0x40002000

08001de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <__NVIC_SetPriority>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	db0a      	blt.n	8001e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	490c      	ldr	r1, [pc, #48]	; (8001e5c <__NVIC_SetPriority+0x4c>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	440b      	add	r3, r1
 8001e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e38:	e00a      	b.n	8001e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4908      	ldr	r1, [pc, #32]	; (8001e60 <__NVIC_SetPriority+0x50>)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	3b04      	subs	r3, #4
 8001e48:	0112      	lsls	r2, r2, #4
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	761a      	strb	r2, [r3, #24]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000e100 	.word	0xe000e100
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Handler+0x1c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001e6c:	f001 fd28 	bl	80038c0 <xTaskGetSchedulerState>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d001      	beq.n	8001e7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001e76:	f002 fb0f 	bl	8004498 <xPortSysTickHandler>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001e88:	2100      	movs	r1, #0
 8001e8a:	f06f 0004 	mvn.w	r0, #4
 8001e8e:	f7ff ffbf 	bl	8001e10 <__NVIC_SetPriority>
#endif
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e9e:	f3ef 8305 	mrs	r3, IPSR
 8001ea2:	603b      	str	r3, [r7, #0]
  return(result);
 8001ea4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001eaa:	f06f 0305 	mvn.w	r3, #5
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	e00c      	b.n	8001ecc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <osKernelInitialize+0x44>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <osKernelInitialize+0x44>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	e002      	b.n	8001ecc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ecc:	687b      	ldr	r3, [r7, #4]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	200000e0 	.word	0x200000e0

08001ee0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ee6:	f3ef 8305 	mrs	r3, IPSR
 8001eea:	603b      	str	r3, [r7, #0]
  return(result);
 8001eec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <osKernelStart+0x1a>
    stat = osErrorISR;
 8001ef2:	f06f 0305 	mvn.w	r3, #5
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	e010      	b.n	8001f1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <osKernelStart+0x48>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d109      	bne.n	8001f16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f02:	f7ff ffbf 	bl	8001e84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <osKernelStart+0x48>)
 8001f08:	2202      	movs	r2, #2
 8001f0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f0c:	f001 f87c 	bl	8003008 <vTaskStartScheduler>
      stat = osOK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	e002      	b.n	8001f1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f1c:	687b      	ldr	r3, [r7, #4]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200000e0 	.word	0x200000e0

08001f2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08e      	sub	sp, #56	; 0x38
 8001f30:	af04      	add	r7, sp, #16
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f3c:	f3ef 8305 	mrs	r3, IPSR
 8001f40:	617b      	str	r3, [r7, #20]
  return(result);
 8001f42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d17e      	bne.n	8002046 <osThreadNew+0x11a>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d07b      	beq.n	8002046 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f52:	2318      	movs	r3, #24
 8001f54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d045      	beq.n	8001ff2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <osThreadNew+0x48>
        name = attr->name;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <osThreadNew+0x6e>
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b38      	cmp	r3, #56	; 0x38
 8001f8c:	d805      	bhi.n	8001f9a <osThreadNew+0x6e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <osThreadNew+0x72>
        return (NULL);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e054      	b.n	8002048 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00e      	beq.n	8001fd4 <osThreadNew+0xa8>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2bbb      	cmp	r3, #187	; 0xbb
 8001fbc:	d90a      	bls.n	8001fd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <osThreadNew+0xa8>
        mem = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	e010      	b.n	8001ff6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10c      	bne.n	8001ff6 <osThreadNew+0xca>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d108      	bne.n	8001ff6 <osThreadNew+0xca>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d104      	bne.n	8001ff6 <osThreadNew+0xca>
          mem = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	e001      	b.n	8001ff6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d110      	bne.n	800201e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002004:	9202      	str	r2, [sp, #8]
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	6a3a      	ldr	r2, [r7, #32]
 8002010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fe0c 	bl	8002c30 <xTaskCreateStatic>
 8002018:	4603      	mov	r3, r0
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	e013      	b.n	8002046 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d110      	bne.n	8002046 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	b29a      	uxth	r2, r3
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 fe57 	bl	8002cea <xTaskCreate>
 800203c:	4603      	mov	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <osThreadNew+0x11a>
            hTask = NULL;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002046:	693b      	ldr	r3, [r7, #16]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3728      	adds	r7, #40	; 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002058:	f3ef 8305 	mrs	r3, IPSR
 800205c:	60bb      	str	r3, [r7, #8]
  return(result);
 800205e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <osDelay+0x1c>
    stat = osErrorISR;
 8002064:	f06f 0305 	mvn.w	r3, #5
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e007      	b.n	800207c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 ff92 	bl	8002fa0 <vTaskDelay>
    }
  }

  return (stat);
 800207c:	68fb      	ldr	r3, [r7, #12]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002098:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <vApplicationGetIdleTaskMemory+0x30>)
 800209e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	601a      	str	r2, [r3, #0]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	200000e4 	.word	0x200000e4
 80020b8:	200001a0 	.word	0x200001a0

080020bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80020cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <vApplicationGetTimerTaskMemory+0x30>)
 80020d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020da:	601a      	str	r2, [r3, #0]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	200003a0 	.word	0x200003a0
 80020ec:	2000045c 	.word	0x2000045c

080020f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f103 0208 	add.w	r2, r3, #8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002108:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f103 0208 	add.w	r2, r3, #8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f103 0208 	add.w	r2, r3, #8
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	601a      	str	r2, [r3, #0]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021a8:	d103      	bne.n	80021b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	e00c      	b.n	80021cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3308      	adds	r3, #8
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e002      	b.n	80021c0 <vListInsert+0x2e>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d2f6      	bcs.n	80021ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	601a      	str	r2, [r3, #0]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6892      	ldr	r2, [r2, #8]
 800221a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6852      	ldr	r2, [r2, #4]
 8002224:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	d103      	bne.n	8002238 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800227e:	bf00      	nop
 8002280:	e7fe      	b.n	8002280 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002282:	f002 f877 	bl	8004374 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	441a      	add	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	3b01      	subs	r3, #1
 80022b4:	68f9      	ldr	r1, [r7, #12]
 80022b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	441a      	add	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	22ff      	movs	r2, #255	; 0xff
 80022c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	22ff      	movs	r2, #255	; 0xff
 80022ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d114      	bne.n	8002302 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01a      	beq.n	8002316 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3310      	adds	r3, #16
 80022e4:	4618      	mov	r0, r3
 80022e6:	f001 f929 	bl	800353c <xTaskRemoveFromEventList>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d012      	beq.n	8002316 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <xQueueGenericReset+0xcc>)
 80022f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	e009      	b.n	8002316 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3310      	adds	r3, #16
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fef2 	bl	80020f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3324      	adds	r3, #36	; 0x24
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff feed 	bl	80020f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002316:	f002 f85d 	bl	80043d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	e000ed04 	.word	0xe000ed04

08002328 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08e      	sub	sp, #56	; 0x38
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10a      	bne.n	8002352 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800233c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002340:	f383 8811 	msr	BASEPRI, r3
 8002344:	f3bf 8f6f 	isb	sy
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800234e:	bf00      	nop
 8002350:	e7fe      	b.n	8002350 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
}
 800236a:	bf00      	nop
 800236c:	e7fe      	b.n	800236c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <xQueueGenericCreateStatic+0x52>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <xQueueGenericCreateStatic+0x56>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <xQueueGenericCreateStatic+0x58>
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	623b      	str	r3, [r7, #32]
}
 8002396:	bf00      	nop
 8002398:	e7fe      	b.n	8002398 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <xQueueGenericCreateStatic+0x7e>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <xQueueGenericCreateStatic+0x82>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <xQueueGenericCreateStatic+0x84>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80023b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b4:	f383 8811 	msr	BASEPRI, r3
 80023b8:	f3bf 8f6f 	isb	sy
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	61fb      	str	r3, [r7, #28]
}
 80023c2:	bf00      	nop
 80023c4:	e7fe      	b.n	80023c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023c6:	2350      	movs	r3, #80	; 0x50
 80023c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b50      	cmp	r3, #80	; 0x50
 80023ce:	d00a      	beq.n	80023e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	61bb      	str	r3, [r7, #24]
}
 80023e2:	bf00      	nop
 80023e4:	e7fe      	b.n	80023e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80023e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00d      	beq.n	800240e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f805 	bl	8002418 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002410:	4618      	mov	r0, r3
 8002412:	3730      	adds	r7, #48	; 0x30
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d103      	bne.n	8002434 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e002      	b.n	800243a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002446:	2101      	movs	r1, #1
 8002448:	69b8      	ldr	r0, [r7, #24]
 800244a:	f7ff ff05 	bl	8002258 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	; 0x38
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800246e:	2300      	movs	r3, #0
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <xQueueGenericSend+0x32>
	__asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <xQueueGenericSend+0x40>
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <xQueueGenericSend+0x44>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <xQueueGenericSend+0x46>
 80024a4:	2300      	movs	r3, #0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <xQueueGenericSend+0x60>
	__asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024bc:	bf00      	nop
 80024be:	e7fe      	b.n	80024be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d103      	bne.n	80024ce <xQueueGenericSend+0x6e>
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <xQueueGenericSend+0x72>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <xQueueGenericSend+0x74>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <xQueueGenericSend+0x8e>
	__asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	623b      	str	r3, [r7, #32]
}
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ee:	f001 f9e7 	bl	80038c0 <xTaskGetSchedulerState>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <xQueueGenericSend+0x9e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <xQueueGenericSend+0xa2>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <xQueueGenericSend+0xa4>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <xQueueGenericSend+0xbe>
	__asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	61fb      	str	r3, [r7, #28]
}
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800251e:	f001 ff29 	bl	8004374 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <xQueueGenericSend+0xd4>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d129      	bne.n	8002588 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800253a:	f000 fa0b 	bl	8002954 <prvCopyDataToQueue>
 800253e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2b00      	cmp	r3, #0
 8002546:	d010      	beq.n	800256a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	3324      	adds	r3, #36	; 0x24
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fff5 	bl	800353c <xTaskRemoveFromEventList>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002558:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <xQueueGenericSend+0x1f8>)
 800255a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	e00a      	b.n	8002580 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002570:	4b39      	ldr	r3, [pc, #228]	; (8002658 <xQueueGenericSend+0x1f8>)
 8002572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002580:	f001 ff28 	bl	80043d4 <vPortExitCritical>
				return pdPASS;
 8002584:	2301      	movs	r3, #1
 8002586:	e063      	b.n	8002650 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800258e:	f001 ff21 	bl	80043d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002592:	2300      	movs	r3, #0
 8002594:	e05c      	b.n	8002650 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002598:	2b00      	cmp	r3, #0
 800259a:	d106      	bne.n	80025aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 f82f 	bl	8003604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025aa:	f001 ff13 	bl	80043d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025ae:	f000 fd9b 	bl	80030e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025b2:	f001 fedf 	bl	8004374 <vPortEnterCritical>
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c2:	d103      	bne.n	80025cc <xQueueGenericSend+0x16c>
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d8:	d103      	bne.n	80025e2 <xQueueGenericSend+0x182>
 80025da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025e2:	f001 fef7 	bl	80043d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025e6:	1d3a      	adds	r2, r7, #4
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 f81e 	bl	8003630 <xTaskCheckForTimeOut>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d124      	bne.n	8002644 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025fc:	f000 faa2 	bl	8002b44 <prvIsQueueFull>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d018      	beq.n	8002638 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	3310      	adds	r3, #16
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f000 ff44 	bl	800349c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002616:	f000 fa2d 	bl	8002a74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800261a:	f000 fd73 	bl	8003104 <xTaskResumeAll>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	f47f af7c 	bne.w	800251e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002626:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <xQueueGenericSend+0x1f8>)
 8002628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	e772      	b.n	800251e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800263a:	f000 fa1b 	bl	8002a74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800263e:	f000 fd61 	bl	8003104 <xTaskResumeAll>
 8002642:	e76c      	b.n	800251e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002646:	f000 fa15 	bl	8002a74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800264a:	f000 fd5b 	bl	8003104 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800264e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002650:	4618      	mov	r0, r3
 8002652:	3738      	adds	r7, #56	; 0x38
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	e000ed04 	.word	0xe000ed04

0800265c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b090      	sub	sp, #64	; 0x40
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d103      	bne.n	8002698 <xQueueGenericSendFromISR+0x3c>
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <xQueueGenericSendFromISR+0x40>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <xQueueGenericSendFromISR+0x42>
 800269c:	2300      	movs	r3, #0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026b4:	bf00      	nop
 80026b6:	e7fe      	b.n	80026b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d103      	bne.n	80026c6 <xQueueGenericSendFromISR+0x6a>
 80026be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <xQueueGenericSendFromISR+0x6e>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <xQueueGenericSendFromISR+0x70>
 80026ca:	2300      	movs	r3, #0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	623b      	str	r3, [r7, #32]
}
 80026e2:	bf00      	nop
 80026e4:	e7fe      	b.n	80026e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026e6:	f001 ff27 	bl	8004538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026ea:	f3ef 8211 	mrs	r2, BASEPRI
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	61fa      	str	r2, [r7, #28]
 8002700:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002702:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270e:	429a      	cmp	r2, r3
 8002710:	d302      	bcc.n	8002718 <xQueueGenericSendFromISR+0xbc>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d12f      	bne.n	8002778 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800271e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800272e:	f000 f911 	bl	8002954 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002732:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800273a:	d112      	bne.n	8002762 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	d016      	beq.n	8002772 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	3324      	adds	r3, #36	; 0x24
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fef7 	bl	800353c <xTaskRemoveFromEventList>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e007      	b.n	8002772 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002762:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002766:	3301      	adds	r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	b25a      	sxtb	r2, r3
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002772:	2301      	movs	r3, #1
 8002774:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002776:	e001      	b.n	800277c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002778:	2300      	movs	r3, #0
 800277a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800277c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002786:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800278a:	4618      	mov	r0, r3
 800278c:	3740      	adds	r7, #64	; 0x40
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08c      	sub	sp, #48	; 0x30
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10a      	bne.n	80027c4 <xQueueReceive+0x30>
	__asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	623b      	str	r3, [r7, #32]
}
 80027c0:	bf00      	nop
 80027c2:	e7fe      	b.n	80027c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <xQueueReceive+0x3e>
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <xQueueReceive+0x42>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <xQueueReceive+0x44>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueReceive+0x5e>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	61fb      	str	r3, [r7, #28]
}
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027f2:	f001 f865 	bl	80038c0 <xTaskGetSchedulerState>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <xQueueReceive+0x6e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <xQueueReceive+0x72>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <xQueueReceive+0x74>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueReceive+0x8e>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	61bb      	str	r3, [r7, #24]
}
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002822:	f001 fda7 	bl	8004374 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01f      	beq.n	8002872 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002836:	f000 f8f7 	bl	8002a28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00f      	beq.n	800286a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	3310      	adds	r3, #16
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fe74 	bl	800353c <xTaskRemoveFromEventList>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <xQueueReceive+0x1bc>)
 800285c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800286a:	f001 fdb3 	bl	80043d4 <vPortExitCritical>
				return pdPASS;
 800286e:	2301      	movs	r3, #1
 8002870:	e069      	b.n	8002946 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002878:	f001 fdac 	bl	80043d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800287c:	2300      	movs	r3, #0
 800287e:	e062      	b.n	8002946 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	4618      	mov	r0, r3
 800288c:	f000 feba 	bl	8003604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002890:	2301      	movs	r3, #1
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002894:	f001 fd9e 	bl	80043d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002898:	f000 fc26 	bl	80030e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800289c:	f001 fd6a 	bl	8004374 <vPortEnterCritical>
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ac:	d103      	bne.n	80028b6 <xQueueReceive+0x122>
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028bc:	b25b      	sxtb	r3, r3
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c2:	d103      	bne.n	80028cc <xQueueReceive+0x138>
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028cc:	f001 fd82 	bl	80043d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028d0:	1d3a      	adds	r2, r7, #4
 80028d2:	f107 0310 	add.w	r3, r7, #16
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fea9 	bl	8003630 <xTaskCheckForTimeOut>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d123      	bne.n	800292c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e6:	f000 f917 	bl	8002b18 <prvIsQueueEmpty>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d017      	beq.n	8002920 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	3324      	adds	r3, #36	; 0x24
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fdcf 	bl	800349c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002900:	f000 f8b8 	bl	8002a74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002904:	f000 fbfe 	bl	8003104 <xTaskResumeAll>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d189      	bne.n	8002822 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <xQueueReceive+0x1bc>)
 8002910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	e780      	b.n	8002822 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002922:	f000 f8a7 	bl	8002a74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002926:	f000 fbed 	bl	8003104 <xTaskResumeAll>
 800292a:	e77a      	b.n	8002822 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800292c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800292e:	f000 f8a1 	bl	8002a74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002932:	f000 fbe7 	bl	8003104 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002938:	f000 f8ee 	bl	8002b18 <prvIsQueueEmpty>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	f43f af6f 	beq.w	8002822 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002944:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002946:	4618      	mov	r0, r3
 8002948:	3730      	adds	r7, #48	; 0x30
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	e000ed04 	.word	0xe000ed04

08002954 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10d      	bne.n	800298e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d14d      	bne.n	8002a16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 ffbc 	bl	80038fc <xTaskPriorityDisinherit>
 8002984:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	e043      	b.n	8002a16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d119      	bne.n	80029c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6858      	ldr	r0, [r3, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	461a      	mov	r2, r3
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	f002 f81a 	bl	80049d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	441a      	add	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d32b      	bcc.n	8002a16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	e026      	b.n	8002a16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	68d8      	ldr	r0, [r3, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	461a      	mov	r2, r3
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	f002 f800 	bl	80049d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	425b      	negs	r3, r3
 80029e2:	441a      	add	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d207      	bcs.n	8002a04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	425b      	negs	r3, r3
 80029fe:	441a      	add	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d105      	bne.n	8002a16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a1e:	697b      	ldr	r3, [r7, #20]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d018      	beq.n	8002a6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	441a      	add	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d303      	bcc.n	8002a5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68d9      	ldr	r1, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	461a      	mov	r2, r3
 8002a66:	6838      	ldr	r0, [r7, #0]
 8002a68:	f001 ffb6 	bl	80049d8 <memcpy>
	}
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a7c:	f001 fc7a 	bl	8004374 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a88:	e011      	b.n	8002aae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d012      	beq.n	8002ab8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3324      	adds	r3, #36	; 0x24
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fd50 	bl	800353c <xTaskRemoveFromEventList>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002aa2:	f000 fe27 	bl	80036f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	dce9      	bgt.n	8002a8a <prvUnlockQueue+0x16>
 8002ab6:	e000      	b.n	8002aba <prvUnlockQueue+0x46>
					break;
 8002ab8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	22ff      	movs	r2, #255	; 0xff
 8002abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ac2:	f001 fc87 	bl	80043d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ac6:	f001 fc55 	bl	8004374 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ad2:	e011      	b.n	8002af8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d012      	beq.n	8002b02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3310      	adds	r3, #16
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fd2b 	bl	800353c <xTaskRemoveFromEventList>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002aec:	f000 fe02 	bl	80036f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002af0:	7bbb      	ldrb	r3, [r7, #14]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	dce9      	bgt.n	8002ad4 <prvUnlockQueue+0x60>
 8002b00:	e000      	b.n	8002b04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	22ff      	movs	r2, #255	; 0xff
 8002b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b0c:	f001 fc62 	bl	80043d4 <vPortExitCritical>
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b20:	f001 fc28 	bl	8004374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e001      	b.n	8002b36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b36:	f001 fc4d 	bl	80043d4 <vPortExitCritical>

	return xReturn;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b4c:	f001 fc12 	bl	8004374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d102      	bne.n	8002b62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e001      	b.n	8002b66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b66:	f001 fc35 	bl	80043d4 <vPortExitCritical>

	return xReturn;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	e014      	b.n	8002bae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b84:	4a0f      	ldr	r2, [pc, #60]	; (8002bc4 <vQueueAddToRegistry+0x50>)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10b      	bne.n	8002ba8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <vQueueAddToRegistry+0x50>)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <vQueueAddToRegistry+0x50>)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ba6:	e006      	b.n	8002bb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3301      	adds	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	d9e7      	bls.n	8002b84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	2000085c 	.word	0x2000085c

08002bc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bd8:	f001 fbcc 	bl	8004374 <vPortEnterCritical>
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be8:	d103      	bne.n	8002bf2 <vQueueWaitForMessageRestricted+0x2a>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfe:	d103      	bne.n	8002c08 <vQueueWaitForMessageRestricted+0x40>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c08:	f001 fbe4 	bl	80043d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3324      	adds	r3, #36	; 0x24
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fc61 	bl	80034e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f7ff ff26 	bl	8002a74 <prvUnlockQueue>
	}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	; 0x38
 8002c34:	af04      	add	r7, sp, #16
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	623b      	str	r3, [r7, #32]
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	61fb      	str	r3, [r7, #28]
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c76:	23bc      	movs	r3, #188	; 0xbc
 8002c78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2bbc      	cmp	r3, #188	; 0xbc
 8002c7e:	d00a      	beq.n	8002c96 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	61bb      	str	r3, [r7, #24]
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d01e      	beq.n	8002cdc <xTaskCreateStatic+0xac>
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01b      	beq.n	8002cdc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9303      	str	r3, [sp, #12]
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	9302      	str	r3, [sp, #8]
 8002cbe:	f107 0314 	add.w	r3, r7, #20
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f850 	bl	8002d74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cd6:	f000 f8f3 	bl	8002ec0 <prvAddNewTaskToReadyList>
 8002cda:	e001      	b.n	8002ce0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ce0:	697b      	ldr	r3, [r7, #20]
	}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3728      	adds	r7, #40	; 0x28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b08c      	sub	sp, #48	; 0x30
 8002cee:	af04      	add	r7, sp, #16
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 fc5a 	bl	80045b8 <pvPortMalloc>
 8002d04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d0c:	20bc      	movs	r0, #188	; 0xbc
 8002d0e:	f001 fc53 	bl	80045b8 <pvPortMalloc>
 8002d12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d20:	e005      	b.n	8002d2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f001 fd14 	bl	8004750 <vPortFree>
 8002d28:	e001      	b.n	8002d2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d017      	beq.n	8002d64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d3c:	88fa      	ldrh	r2, [r7, #6]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	9303      	str	r3, [sp, #12]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	9302      	str	r3, [sp, #8]
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f80e 	bl	8002d74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d58:	69f8      	ldr	r0, [r7, #28]
 8002d5a:	f000 f8b1 	bl	8002ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	e002      	b.n	8002d6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
	}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	21a5      	movs	r1, #165	; 0xa5
 8002d8e:	f001 fe31 	bl	80049f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f023 0307 	bic.w	r3, r3, #7
 8002daa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <prvInitialiseNewTask+0x58>
	__asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	617b      	str	r3, [r7, #20]
}
 8002dc8:	bf00      	nop
 8002dca:	e7fe      	b.n	8002dca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d01f      	beq.n	8002e12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e012      	b.n	8002dfe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	7819      	ldrb	r1, [r3, #0]
 8002de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	3334      	adds	r3, #52	; 0x34
 8002de8:	460a      	mov	r2, r1
 8002dea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d006      	beq.n	8002e06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	2b0f      	cmp	r3, #15
 8002e02:	d9e9      	bls.n	8002dd8 <prvInitialiseNewTask+0x64>
 8002e04:	e000      	b.n	8002e08 <prvInitialiseNewTask+0x94>
			{
				break;
 8002e06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e10:	e003      	b.n	8002e1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	2b37      	cmp	r3, #55	; 0x37
 8002e1e:	d901      	bls.n	8002e24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e20:	2337      	movs	r3, #55	; 0x37
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	2200      	movs	r2, #0
 8002e34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	3304      	adds	r3, #4
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f978 	bl	8002130 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	3318      	adds	r3, #24
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff f973 	bl	8002130 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	3354      	adds	r3, #84	; 0x54
 8002e74:	2260      	movs	r2, #96	; 0x60
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 fdbb 	bl	80049f4 <memset>
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	4a0c      	ldr	r2, [pc, #48]	; (8002eb4 <prvInitialiseNewTask+0x140>)
 8002e82:	659a      	str	r2, [r3, #88]	; 0x58
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <prvInitialiseNewTask+0x144>)
 8002e88:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <prvInitialiseNewTask+0x148>)
 8002e8e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	68f9      	ldr	r1, [r7, #12]
 8002e94:	69b8      	ldr	r0, [r7, #24]
 8002e96:	f001 f941 	bl	800411c <pxPortInitialiseStack>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002eac:	bf00      	nop
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	08004c20 	.word	0x08004c20
 8002eb8:	08004c40 	.word	0x08004c40
 8002ebc:	08004c00 	.word	0x08004c00

08002ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ec8:	f001 fa54 	bl	8004374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <prvAddNewTaskToReadyList+0xc4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	4a2c      	ldr	r2, [pc, #176]	; (8002f84 <prvAddNewTaskToReadyList+0xc4>)
 8002ed4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <prvAddNewTaskToReadyList+0xc8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ede:	4a2a      	ldr	r2, [pc, #168]	; (8002f88 <prvAddNewTaskToReadyList+0xc8>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ee4:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <prvAddNewTaskToReadyList+0xc4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d110      	bne.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002eec:	f000 fc26 	bl	800373c <prvInitialiseTaskLists>
 8002ef0:	e00d      	b.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ef2:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <prvAddNewTaskToReadyList+0xcc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002efa:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <prvAddNewTaskToReadyList+0xc8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d802      	bhi.n	8002f0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f08:	4a1f      	ldr	r2, [pc, #124]	; (8002f88 <prvAddNewTaskToReadyList+0xc8>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <prvAddNewTaskToReadyList+0xd0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <prvAddNewTaskToReadyList+0xd0>)
 8002f16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <prvAddNewTaskToReadyList+0xd0>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <prvAddNewTaskToReadyList+0xd4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d903      	bls.n	8002f34 <prvAddNewTaskToReadyList+0x74>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	4a18      	ldr	r2, [pc, #96]	; (8002f94 <prvAddNewTaskToReadyList+0xd4>)
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <prvAddNewTaskToReadyList+0xd8>)
 8002f42:	441a      	add	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f7ff f8fd 	bl	800214a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f50:	f001 fa40 	bl	80043d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f54:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <prvAddNewTaskToReadyList+0xcc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <prvAddNewTaskToReadyList+0xc8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d207      	bcs.n	8002f7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <prvAddNewTaskToReadyList+0xdc>)
 8002f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000d70 	.word	0x20000d70
 8002f88:	2000089c 	.word	0x2000089c
 8002f8c:	20000d7c 	.word	0x20000d7c
 8002f90:	20000d8c 	.word	0x20000d8c
 8002f94:	20000d78 	.word	0x20000d78
 8002f98:	200008a0 	.word	0x200008a0
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d017      	beq.n	8002fe2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <vTaskDelay+0x60>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <vTaskDelay+0x30>
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60bb      	str	r3, [r7, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002fd0:	f000 f88a 	bl	80030e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fcfe 	bl	80039d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fdc:	f000 f892 	bl	8003104 <xTaskResumeAll>
 8002fe0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <vTaskDelay+0x64>)
 8002fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000d98 	.word	0x20000d98
 8003004:	e000ed04 	.word	0xe000ed04

08003008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003016:	463a      	mov	r2, r7
 8003018:	1d39      	adds	r1, r7, #4
 800301a:	f107 0308 	add.w	r3, r7, #8
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff f832 	bl	8002088 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003024:	6839      	ldr	r1, [r7, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	9202      	str	r2, [sp, #8]
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	2300      	movs	r3, #0
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2300      	movs	r3, #0
 8003034:	460a      	mov	r2, r1
 8003036:	4924      	ldr	r1, [pc, #144]	; (80030c8 <vTaskStartScheduler+0xc0>)
 8003038:	4824      	ldr	r0, [pc, #144]	; (80030cc <vTaskStartScheduler+0xc4>)
 800303a:	f7ff fdf9 	bl	8002c30 <xTaskCreateStatic>
 800303e:	4603      	mov	r3, r0
 8003040:	4a23      	ldr	r2, [pc, #140]	; (80030d0 <vTaskStartScheduler+0xc8>)
 8003042:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003044:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <vTaskStartScheduler+0xc8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800304c:	2301      	movs	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e001      	b.n	8003056 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d102      	bne.n	8003062 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800305c:	f000 fd10 	bl	8003a80 <xTimerCreateTimerTask>
 8003060:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d11b      	bne.n	80030a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	613b      	str	r3, [r7, #16]
}
 800307a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800307c:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <vTaskStartScheduler+0xcc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3354      	adds	r3, #84	; 0x54
 8003082:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <vTaskStartScheduler+0xd0>)
 8003084:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <vTaskStartScheduler+0xd4>)
 8003088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800308c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <vTaskStartScheduler+0xd8>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <vTaskStartScheduler+0xdc>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800309a:	f001 f8c9 	bl	8004230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800309e:	e00e      	b.n	80030be <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a6:	d10a      	bne.n	80030be <vTaskStartScheduler+0xb6>
	__asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	60fb      	str	r3, [r7, #12]
}
 80030ba:	bf00      	nop
 80030bc:	e7fe      	b.n	80030bc <vTaskStartScheduler+0xb4>
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	08004bac 	.word	0x08004bac
 80030cc:	0800370d 	.word	0x0800370d
 80030d0:	20000d94 	.word	0x20000d94
 80030d4:	2000089c 	.word	0x2000089c
 80030d8:	20000010 	.word	0x20000010
 80030dc:	20000d90 	.word	0x20000d90
 80030e0:	20000d7c 	.word	0x20000d7c
 80030e4:	20000d74 	.word	0x20000d74

080030e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <vTaskSuspendAll+0x18>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3301      	adds	r3, #1
 80030f2:	4a03      	ldr	r2, [pc, #12]	; (8003100 <vTaskSuspendAll+0x18>)
 80030f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	20000d98 	.word	0x20000d98

08003104 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003112:	4b42      	ldr	r3, [pc, #264]	; (800321c <xTaskResumeAll+0x118>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <xTaskResumeAll+0x2c>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	603b      	str	r3, [r7, #0]
}
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003130:	f001 f920 	bl	8004374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003134:	4b39      	ldr	r3, [pc, #228]	; (800321c <xTaskResumeAll+0x118>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3b01      	subs	r3, #1
 800313a:	4a38      	ldr	r2, [pc, #224]	; (800321c <xTaskResumeAll+0x118>)
 800313c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <xTaskResumeAll+0x118>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d162      	bne.n	800320c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003146:	4b36      	ldr	r3, [pc, #216]	; (8003220 <xTaskResumeAll+0x11c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d05e      	beq.n	800320c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800314e:	e02f      	b.n	80031b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003150:	4b34      	ldr	r3, [pc, #208]	; (8003224 <xTaskResumeAll+0x120>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3318      	adds	r3, #24
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff f851 	bl	8002204 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3304      	adds	r3, #4
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff f84c 	bl	8002204 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <xTaskResumeAll+0x124>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d903      	bls.n	8003180 <xTaskResumeAll+0x7c>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	4a2a      	ldr	r2, [pc, #168]	; (8003228 <xTaskResumeAll+0x124>)
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4a27      	ldr	r2, [pc, #156]	; (800322c <xTaskResumeAll+0x128>)
 800318e:	441a      	add	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3304      	adds	r3, #4
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f7fe ffd7 	bl	800214a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a0:	4b23      	ldr	r3, [pc, #140]	; (8003230 <xTaskResumeAll+0x12c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <xTaskResumeAll+0x130>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031b0:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <xTaskResumeAll+0x120>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1cb      	bne.n	8003150 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031be:	f000 fb5f 	bl	8003880 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <xTaskResumeAll+0x134>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d010      	beq.n	80031f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031ce:	f000 f847 	bl	8003260 <xTaskIncrementTick>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80031d8:	4b16      	ldr	r3, [pc, #88]	; (8003234 <xTaskResumeAll+0x130>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f1      	bne.n	80031ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <xTaskResumeAll+0x134>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <xTaskResumeAll+0x130>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d009      	beq.n	800320c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031f8:	2301      	movs	r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <xTaskResumeAll+0x138>)
 80031fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800320c:	f001 f8e2 	bl	80043d4 <vPortExitCritical>

	return xAlreadyYielded;
 8003210:	68bb      	ldr	r3, [r7, #8]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000d98 	.word	0x20000d98
 8003220:	20000d70 	.word	0x20000d70
 8003224:	20000d30 	.word	0x20000d30
 8003228:	20000d78 	.word	0x20000d78
 800322c:	200008a0 	.word	0x200008a0
 8003230:	2000089c 	.word	0x2000089c
 8003234:	20000d84 	.word	0x20000d84
 8003238:	20000d80 	.word	0x20000d80
 800323c:	e000ed04 	.word	0xe000ed04

08003240 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <xTaskGetTickCount+0x1c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800324c:	687b      	ldr	r3, [r7, #4]
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000d74 	.word	0x20000d74

08003260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800326a:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <xTaskIncrementTick+0x148>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 808f 	bne.w	8003392 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003274:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <xTaskIncrementTick+0x14c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800327c:	4a4b      	ldr	r2, [pc, #300]	; (80033ac <xTaskIncrementTick+0x14c>)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d120      	bne.n	80032ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003288:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <xTaskIncrementTick+0x150>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	603b      	str	r3, [r7, #0]
}
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <xTaskIncrementTick+0x46>
 80032a8:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <xTaskIncrementTick+0x150>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <xTaskIncrementTick+0x154>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a3f      	ldr	r2, [pc, #252]	; (80033b0 <xTaskIncrementTick+0x150>)
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4a3f      	ldr	r2, [pc, #252]	; (80033b4 <xTaskIncrementTick+0x154>)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <xTaskIncrementTick+0x158>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	4a3d      	ldr	r2, [pc, #244]	; (80033b8 <xTaskIncrementTick+0x158>)
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	f000 fadb 	bl	8003880 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032ca:	4b3c      	ldr	r3, [pc, #240]	; (80033bc <xTaskIncrementTick+0x15c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d349      	bcc.n	8003368 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <xTaskIncrementTick+0x150>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d104      	bne.n	80032e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <xTaskIncrementTick+0x15c>)
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032e4:	601a      	str	r2, [r3, #0]
					break;
 80032e6:	e03f      	b.n	8003368 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e8:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <xTaskIncrementTick+0x150>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d203      	bcs.n	8003308 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003300:	4a2e      	ldr	r2, [pc, #184]	; (80033bc <xTaskIncrementTick+0x15c>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003306:	e02f      	b.n	8003368 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3304      	adds	r3, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe ff79 	bl	8002204 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d004      	beq.n	8003324 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	3318      	adds	r3, #24
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe ff70 	bl	8002204 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <xTaskIncrementTick+0x160>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d903      	bls.n	8003338 <xTaskIncrementTick+0xd8>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <xTaskIncrementTick+0x160>)
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <xTaskIncrementTick+0x164>)
 8003346:	441a      	add	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f7fe fefb 	bl	800214a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <xTaskIncrementTick+0x168>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	429a      	cmp	r2, r3
 8003360:	d3b8      	bcc.n	80032d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003362:	2301      	movs	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003366:	e7b5      	b.n	80032d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003368:	4b17      	ldr	r3, [pc, #92]	; (80033c8 <xTaskIncrementTick+0x168>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336e:	4915      	ldr	r1, [pc, #84]	; (80033c4 <xTaskIncrementTick+0x164>)
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d901      	bls.n	8003384 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003380:	2301      	movs	r3, #1
 8003382:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <xTaskIncrementTick+0x16c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800338c:	2301      	movs	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	e004      	b.n	800339c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <xTaskIncrementTick+0x170>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3301      	adds	r3, #1
 8003398:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <xTaskIncrementTick+0x170>)
 800339a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800339c:	697b      	ldr	r3, [r7, #20]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000d98 	.word	0x20000d98
 80033ac:	20000d74 	.word	0x20000d74
 80033b0:	20000d28 	.word	0x20000d28
 80033b4:	20000d2c 	.word	0x20000d2c
 80033b8:	20000d88 	.word	0x20000d88
 80033bc:	20000d90 	.word	0x20000d90
 80033c0:	20000d78 	.word	0x20000d78
 80033c4:	200008a0 	.word	0x200008a0
 80033c8:	2000089c 	.word	0x2000089c
 80033cc:	20000d84 	.word	0x20000d84
 80033d0:	20000d80 	.word	0x20000d80

080033d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033da:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <vTaskSwitchContext+0xb0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <vTaskSwitchContext+0xb4>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033e8:	e046      	b.n	8003478 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80033ea:	4b27      	ldr	r3, [pc, #156]	; (8003488 <vTaskSwitchContext+0xb4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f0:	4b26      	ldr	r3, [pc, #152]	; (800348c <vTaskSwitchContext+0xb8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	e010      	b.n	800341a <vTaskSwitchContext+0x46>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <vTaskSwitchContext+0x40>
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	607b      	str	r3, [r7, #4]
}
 8003410:	bf00      	nop
 8003412:	e7fe      	b.n	8003412 <vTaskSwitchContext+0x3e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3b01      	subs	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	491d      	ldr	r1, [pc, #116]	; (8003490 <vTaskSwitchContext+0xbc>)
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0e4      	beq.n	80033f8 <vTaskSwitchContext+0x24>
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <vTaskSwitchContext+0xbc>)
 800343a:	4413      	add	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	3308      	adds	r3, #8
 8003450:	429a      	cmp	r2, r3
 8003452:	d104      	bne.n	800345e <vTaskSwitchContext+0x8a>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <vTaskSwitchContext+0xc0>)
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <vTaskSwitchContext+0xb8>)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <vTaskSwitchContext+0xc0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3354      	adds	r3, #84	; 0x54
 8003474:	4a08      	ldr	r2, [pc, #32]	; (8003498 <vTaskSwitchContext+0xc4>)
 8003476:	6013      	str	r3, [r2, #0]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	20000d98 	.word	0x20000d98
 8003488:	20000d84 	.word	0x20000d84
 800348c:	20000d78 	.word	0x20000d78
 8003490:	200008a0 	.word	0x200008a0
 8003494:	2000089c 	.word	0x2000089c
 8003498:	20000010 	.word	0x20000010

0800349c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	60fb      	str	r3, [r7, #12]
}
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <vTaskPlaceOnEventList+0x44>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3318      	adds	r3, #24
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe fe61 	bl	8002192 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034d0:	2101      	movs	r1, #1
 80034d2:	6838      	ldr	r0, [r7, #0]
 80034d4:	f000 fa80 	bl	80039d8 <prvAddCurrentTaskToDelayedList>
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	2000089c 	.word	0x2000089c

080034e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	617b      	str	r3, [r7, #20]
}
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <vTaskPlaceOnEventListRestricted+0x54>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3318      	adds	r3, #24
 8003512:	4619      	mov	r1, r3
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7fe fe18 	bl	800214a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003524:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	68b8      	ldr	r0, [r7, #8]
 800352a:	f000 fa55 	bl	80039d8 <prvAddCurrentTaskToDelayedList>
	}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	2000089c 	.word	0x2000089c

0800353c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	60fb      	str	r3, [r7, #12]
}
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	3318      	adds	r3, #24
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe fe49 	bl	8002204 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003572:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <xTaskRemoveFromEventList+0xb0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d11d      	bne.n	80035b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	3304      	adds	r3, #4
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fe40 	bl	8002204 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <xTaskRemoveFromEventList+0xb4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d903      	bls.n	8003598 <xTaskRemoveFromEventList+0x5c>
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <xTaskRemoveFromEventList+0xb4>)
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <xTaskRemoveFromEventList+0xb8>)
 80035a6:	441a      	add	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	3304      	adds	r3, #4
 80035ac:	4619      	mov	r1, r3
 80035ae:	4610      	mov	r0, r2
 80035b0:	f7fe fdcb 	bl	800214a <vListInsertEnd>
 80035b4:	e005      	b.n	80035c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	3318      	adds	r3, #24
 80035ba:	4619      	mov	r1, r3
 80035bc:	480e      	ldr	r0, [pc, #56]	; (80035f8 <xTaskRemoveFromEventList+0xbc>)
 80035be:	f7fe fdc4 	bl	800214a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <xTaskRemoveFromEventList+0xc0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d905      	bls.n	80035dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <xTaskRemoveFromEventList+0xc4>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e001      	b.n	80035e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80035e0:	697b      	ldr	r3, [r7, #20]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000d98 	.word	0x20000d98
 80035f0:	20000d78 	.word	0x20000d78
 80035f4:	200008a0 	.word	0x200008a0
 80035f8:	20000d30 	.word	0x20000d30
 80035fc:	2000089c 	.word	0x2000089c
 8003600:	20000d84 	.word	0x20000d84

08003604 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <vTaskInternalSetTimeOutState+0x24>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <vTaskInternalSetTimeOutState+0x28>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	605a      	str	r2, [r3, #4]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	20000d88 	.word	0x20000d88
 800362c:	20000d74 	.word	0x20000d74

08003630 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	613b      	str	r3, [r7, #16]
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	60fb      	str	r3, [r7, #12]
}
 800366e:	bf00      	nop
 8003670:	e7fe      	b.n	8003670 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003672:	f000 fe7f 	bl	8004374 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <xTaskCheckForTimeOut+0xbc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800368e:	d102      	bne.n	8003696 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	e023      	b.n	80036de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <xTaskCheckForTimeOut+0xc0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d007      	beq.n	80036b2 <xTaskCheckForTimeOut+0x82>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	e015      	b.n	80036de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d20b      	bcs.n	80036d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	1ad2      	subs	r2, r2, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ff9b 	bl	8003604 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e004      	b.n	80036de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036da:	2301      	movs	r3, #1
 80036dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036de:	f000 fe79 	bl	80043d4 <vPortExitCritical>

	return xReturn;
 80036e2:	69fb      	ldr	r3, [r7, #28]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000d74 	.word	0x20000d74
 80036f0:	20000d88 	.word	0x20000d88

080036f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <vTaskMissedYield+0x14>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
}
 80036fe:	bf00      	nop
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	20000d84 	.word	0x20000d84

0800370c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003714:	f000 f852 	bl	80037bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <prvIdleTask+0x28>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d9f9      	bls.n	8003714 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <prvIdleTask+0x2c>)
 8003722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003730:	e7f0      	b.n	8003714 <prvIdleTask+0x8>
 8003732:	bf00      	nop
 8003734:	200008a0 	.word	0x200008a0
 8003738:	e000ed04 	.word	0xe000ed04

0800373c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	e00c      	b.n	8003762 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4a12      	ldr	r2, [pc, #72]	; (800379c <prvInitialiseTaskLists+0x60>)
 8003754:	4413      	add	r3, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fcca 	bl	80020f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3301      	adds	r3, #1
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b37      	cmp	r3, #55	; 0x37
 8003766:	d9ef      	bls.n	8003748 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003768:	480d      	ldr	r0, [pc, #52]	; (80037a0 <prvInitialiseTaskLists+0x64>)
 800376a:	f7fe fcc1 	bl	80020f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800376e:	480d      	ldr	r0, [pc, #52]	; (80037a4 <prvInitialiseTaskLists+0x68>)
 8003770:	f7fe fcbe 	bl	80020f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003774:	480c      	ldr	r0, [pc, #48]	; (80037a8 <prvInitialiseTaskLists+0x6c>)
 8003776:	f7fe fcbb 	bl	80020f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800377a:	480c      	ldr	r0, [pc, #48]	; (80037ac <prvInitialiseTaskLists+0x70>)
 800377c:	f7fe fcb8 	bl	80020f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003780:	480b      	ldr	r0, [pc, #44]	; (80037b0 <prvInitialiseTaskLists+0x74>)
 8003782:	f7fe fcb5 	bl	80020f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <prvInitialiseTaskLists+0x78>)
 8003788:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <prvInitialiseTaskLists+0x64>)
 800378a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <prvInitialiseTaskLists+0x7c>)
 800378e:	4a05      	ldr	r2, [pc, #20]	; (80037a4 <prvInitialiseTaskLists+0x68>)
 8003790:	601a      	str	r2, [r3, #0]
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200008a0 	.word	0x200008a0
 80037a0:	20000d00 	.word	0x20000d00
 80037a4:	20000d14 	.word	0x20000d14
 80037a8:	20000d30 	.word	0x20000d30
 80037ac:	20000d44 	.word	0x20000d44
 80037b0:	20000d5c 	.word	0x20000d5c
 80037b4:	20000d28 	.word	0x20000d28
 80037b8:	20000d2c 	.word	0x20000d2c

080037bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037c2:	e019      	b.n	80037f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037c4:	f000 fdd6 	bl	8004374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c8:	4b10      	ldr	r3, [pc, #64]	; (800380c <prvCheckTasksWaitingTermination+0x50>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fd15 	bl	8002204 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037da:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <prvCheckTasksWaitingTermination+0x54>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3b01      	subs	r3, #1
 80037e0:	4a0b      	ldr	r2, [pc, #44]	; (8003810 <prvCheckTasksWaitingTermination+0x54>)
 80037e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <prvCheckTasksWaitingTermination+0x58>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <prvCheckTasksWaitingTermination+0x58>)
 80037ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037ee:	f000 fdf1 	bl	80043d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f810 	bl	8003818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <prvCheckTasksWaitingTermination+0x58>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e1      	bne.n	80037c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000d44 	.word	0x20000d44
 8003810:	20000d70 	.word	0x20000d70
 8003814:	20000d58 	.word	0x20000d58

08003818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3354      	adds	r3, #84	; 0x54
 8003824:	4618      	mov	r0, r3
 8003826:	f001 f8fb 	bl	8004a20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003830:	2b00      	cmp	r3, #0
 8003832:	d108      	bne.n	8003846 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	4618      	mov	r0, r3
 800383a:	f000 ff89 	bl	8004750 <vPortFree>
				vPortFree( pxTCB );
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 ff86 	bl	8004750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003844:	e018      	b.n	8003878 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800384c:	2b01      	cmp	r3, #1
 800384e:	d103      	bne.n	8003858 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 ff7d 	bl	8004750 <vPortFree>
	}
 8003856:	e00f      	b.n	8003878 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800385e:	2b02      	cmp	r3, #2
 8003860:	d00a      	beq.n	8003878 <prvDeleteTCB+0x60>
	__asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	60fb      	str	r3, [r7, #12]
}
 8003874:	bf00      	nop
 8003876:	e7fe      	b.n	8003876 <prvDeleteTCB+0x5e>
	}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <prvResetNextTaskUnblockTime+0x38>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <prvResetNextTaskUnblockTime+0x3c>)
 8003892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003896:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003898:	e008      	b.n	80038ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <prvResetNextTaskUnblockTime+0x38>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4a04      	ldr	r2, [pc, #16]	; (80038bc <prvResetNextTaskUnblockTime+0x3c>)
 80038aa:	6013      	str	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20000d28 	.word	0x20000d28
 80038bc:	20000d90 	.word	0x20000d90

080038c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <xTaskGetSchedulerState+0x34>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d102      	bne.n	80038d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038ce:	2301      	movs	r3, #1
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	e008      	b.n	80038e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <xTaskGetSchedulerState+0x38>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038dc:	2302      	movs	r3, #2
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	e001      	b.n	80038e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038e6:	687b      	ldr	r3, [r7, #4]
	}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	20000d7c 	.word	0x20000d7c
 80038f8:	20000d98 	.word	0x20000d98

080038fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d056      	beq.n	80039c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <xTaskPriorityDisinherit+0xd0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	429a      	cmp	r2, r3
 800391a:	d00a      	beq.n	8003932 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60fb      	str	r3, [r7, #12]
}
 800392e:	bf00      	nop
 8003930:	e7fe      	b.n	8003930 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	60bb      	str	r3, [r7, #8]
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003954:	1e5a      	subs	r2, r3, #1
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	429a      	cmp	r2, r3
 8003964:	d02c      	beq.n	80039c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396a:	2b00      	cmp	r3, #0
 800396c:	d128      	bne.n	80039c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	3304      	adds	r3, #4
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fc46 	bl	8002204 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <xTaskPriorityDisinherit+0xd4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d903      	bls.n	80039a0 <xTaskPriorityDisinherit+0xa4>
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <xTaskPriorityDisinherit+0xd4>)
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <xTaskPriorityDisinherit+0xd8>)
 80039ae:	441a      	add	r2, r3
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	3304      	adds	r3, #4
 80039b4:	4619      	mov	r1, r3
 80039b6:	4610      	mov	r0, r2
 80039b8:	f7fe fbc7 	bl	800214a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039c0:	697b      	ldr	r3, [r7, #20]
	}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	2000089c 	.word	0x2000089c
 80039d0:	20000d78 	.word	0x20000d78
 80039d4:	200008a0 	.word	0x200008a0

080039d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039e2:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <prvAddCurrentTaskToDelayedList+0x90>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039e8:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <prvAddCurrentTaskToDelayedList+0x94>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fc08 	bl	8002204 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039fa:	d10a      	bne.n	8003a12 <prvAddCurrentTaskToDelayedList+0x3a>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4819      	ldr	r0, [pc, #100]	; (8003a70 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a0c:	f7fe fb9d 	bl	800214a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a10:	e026      	b.n	8003a60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d209      	bcs.n	8003a3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f7fe fbab 	bl	8002192 <vListInsert>
}
 8003a3c:	e010      	b.n	8003a60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f7fe fba1 	bl	8002192 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d202      	bcs.n	8003a60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a5a:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6013      	str	r3, [r2, #0]
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20000d74 	.word	0x20000d74
 8003a6c:	2000089c 	.word	0x2000089c
 8003a70:	20000d5c 	.word	0x20000d5c
 8003a74:	20000d2c 	.word	0x20000d2c
 8003a78:	20000d28 	.word	0x20000d28
 8003a7c:	20000d90 	.word	0x20000d90

08003a80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a8a:	f000 fb07 	bl	800409c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a8e:	4b1c      	ldr	r3, [pc, #112]	; (8003b00 <xTimerCreateTimerTask+0x80>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d021      	beq.n	8003ada <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a9e:	1d3a      	adds	r2, r7, #4
 8003aa0:	f107 0108 	add.w	r1, r7, #8
 8003aa4:	f107 030c 	add.w	r3, r7, #12
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe fb07 	bl	80020bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	9202      	str	r2, [sp, #8]
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	2302      	movs	r3, #2
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2300      	movs	r3, #0
 8003abe:	460a      	mov	r2, r1
 8003ac0:	4910      	ldr	r1, [pc, #64]	; (8003b04 <xTimerCreateTimerTask+0x84>)
 8003ac2:	4811      	ldr	r0, [pc, #68]	; (8003b08 <xTimerCreateTimerTask+0x88>)
 8003ac4:	f7ff f8b4 	bl	8002c30 <xTaskCreateStatic>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <xTimerCreateTimerTask+0x8c>)
 8003acc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <xTimerCreateTimerTask+0x8c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	613b      	str	r3, [r7, #16]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003af6:	697b      	ldr	r3, [r7, #20]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000dcc 	.word	0x20000dcc
 8003b04:	08004bb4 	.word	0x08004bb4
 8003b08:	08003c45 	.word	0x08003c45
 8003b0c:	20000dd0 	.word	0x20000dd0

08003b10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	623b      	str	r3, [r7, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <xTimerGenericCommand+0x98>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d02a      	beq.n	8003b9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	dc18      	bgt.n	8003b8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b58:	f7ff feb2 	bl	80038c0 <xTaskGetSchedulerState>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d109      	bne.n	8003b76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <xTimerGenericCommand+0x98>)
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	f107 0110 	add.w	r1, r7, #16
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6e:	f7fe fc77 	bl	8002460 <xQueueGenericSend>
 8003b72:	6278      	str	r0, [r7, #36]	; 0x24
 8003b74:	e012      	b.n	8003b9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <xTimerGenericCommand+0x98>)
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	f107 0110 	add.w	r1, r7, #16
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2200      	movs	r2, #0
 8003b82:	f7fe fc6d 	bl	8002460 <xQueueGenericSend>
 8003b86:	6278      	str	r0, [r7, #36]	; 0x24
 8003b88:	e008      	b.n	8003b9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b8a:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <xTimerGenericCommand+0x98>)
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	f107 0110 	add.w	r1, r7, #16
 8003b92:	2300      	movs	r3, #0
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	f7fe fd61 	bl	800265c <xQueueGenericSendFromISR>
 8003b9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3728      	adds	r7, #40	; 0x28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000dcc 	.word	0x20000dcc

08003bac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb6:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <prvProcessExpiredTimer+0x94>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe fb1d 	bl	8002204 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d022      	beq.n	8003c1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	699a      	ldr	r2, [r3, #24]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	18d1      	adds	r1, r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	6978      	ldr	r0, [r7, #20]
 8003be6:	f000 f8d1 	bl	8003d8c <prvInsertTimerInActiveList>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01f      	beq.n	8003c30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	6978      	ldr	r0, [r7, #20]
 8003bfc:	f7ff ff88 	bl	8003b10 <xTimerGenericCommand>
 8003c00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d113      	bne.n	8003c30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	60fb      	str	r3, [r7, #12]
}
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	6978      	ldr	r0, [r7, #20]
 8003c36:	4798      	blx	r3
}
 8003c38:	bf00      	nop
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000dc4 	.word	0x20000dc4

08003c44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c4c:	f107 0308 	add.w	r3, r7, #8
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f857 	bl	8003d04 <prvGetNextExpireTime>
 8003c56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f803 	bl	8003c68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c62:	f000 f8d5 	bl	8003e10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c66:	e7f1      	b.n	8003c4c <prvTimerTask+0x8>

08003c68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c72:	f7ff fa39 	bl	80030e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c76:	f107 0308 	add.w	r3, r7, #8
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f866 	bl	8003d4c <prvSampleTimeNow>
 8003c80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d130      	bne.n	8003cea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <prvProcessTimerOrBlockTask+0x3c>
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d806      	bhi.n	8003ca4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c96:	f7ff fa35 	bl	8003104 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c9a:	68f9      	ldr	r1, [r7, #12]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff85 	bl	8003bac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003ca2:	e024      	b.n	8003cee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d008      	beq.n	8003cbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <prvProcessTimerOrBlockTask+0x90>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <prvProcessTimerOrBlockTask+0x50>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <prvProcessTimerOrBlockTask+0x52>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <prvProcessTimerOrBlockTask+0x94>)
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f7fe ff7d 	bl	8002bc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cce:	f7ff fa19 	bl	8003104 <xTaskResumeAll>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <prvProcessTimerOrBlockTask+0x98>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
}
 8003ce8:	e001      	b.n	8003cee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003cea:	f7ff fa0b 	bl	8003104 <xTaskResumeAll>
}
 8003cee:	bf00      	nop
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000dc8 	.word	0x20000dc8
 8003cfc:	20000dcc 	.word	0x20000dcc
 8003d00:	e000ed04 	.word	0xe000ed04

08003d04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <prvGetNextExpireTime+0x44>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <prvGetNextExpireTime+0x16>
 8003d16:	2201      	movs	r2, #1
 8003d18:	e000      	b.n	8003d1c <prvGetNextExpireTime+0x18>
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <prvGetNextExpireTime+0x44>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	e001      	b.n	8003d38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d38:	68fb      	ldr	r3, [r7, #12]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000dc4 	.word	0x20000dc4

08003d4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d54:	f7ff fa74 	bl	8003240 <xTaskGetTickCount>
 8003d58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <prvSampleTimeNow+0x3c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d205      	bcs.n	8003d70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d64:	f000 f936 	bl	8003fd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e002      	b.n	8003d76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d76:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <prvSampleTimeNow+0x3c>)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000dd4 	.word	0x20000dd4

08003d8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d812      	bhi.n	8003dd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	1ad2      	subs	r2, r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d302      	bcc.n	8003dc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e01b      	b.n	8003dfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <prvInsertTimerInActiveList+0x7c>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	f7fe f9de 	bl	8002192 <vListInsert>
 8003dd6:	e012      	b.n	8003dfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d206      	bcs.n	8003dee <prvInsertTimerInActiveList+0x62>
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d302      	bcc.n	8003dee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e007      	b.n	8003dfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <prvInsertTimerInActiveList+0x80>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3304      	adds	r3, #4
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f7fe f9ca 	bl	8002192 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003dfe:	697b      	ldr	r3, [r7, #20]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20000dc8 	.word	0x20000dc8
 8003e0c:	20000dc4 	.word	0x20000dc4

08003e10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	; 0x38
 8003e14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e16:	e0ca      	b.n	8003fae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	da18      	bge.n	8003e50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	3304      	adds	r3, #4
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	61fb      	str	r3, [r7, #28]
}
 8003e3c:	bf00      	nop
 8003e3e:	e7fe      	b.n	8003e3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e46:	6850      	ldr	r0, [r2, #4]
 8003e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e4a:	6892      	ldr	r2, [r2, #8]
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f2c0 80aa 	blt.w	8003fac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d004      	beq.n	8003e6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	3304      	adds	r3, #4
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe f9cb 	bl	8002204 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e6e:	463b      	mov	r3, r7
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff6b 	bl	8003d4c <prvSampleTimeNow>
 8003e76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b09      	cmp	r3, #9
 8003e7c:	f200 8097 	bhi.w	8003fae <prvProcessReceivedCommands+0x19e>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <prvProcessReceivedCommands+0x78>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003eb1 	.word	0x08003eb1
 8003e8c:	08003eb1 	.word	0x08003eb1
 8003e90:	08003eb1 	.word	0x08003eb1
 8003e94:	08003f25 	.word	0x08003f25
 8003e98:	08003f39 	.word	0x08003f39
 8003e9c:	08003f83 	.word	0x08003f83
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003eb1 	.word	0x08003eb1
 8003ea8:	08003f25 	.word	0x08003f25
 8003eac:	08003f39 	.word	0x08003f39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	18d1      	adds	r1, r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed0:	f7ff ff5c 	bl	8003d8c <prvInsertTimerInActiveList>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d069      	beq.n	8003fae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ee0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d05e      	beq.n	8003fae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	441a      	add	r2, r3
 8003ef8:	2300      	movs	r3, #0
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	2300      	movs	r3, #0
 8003efe:	2100      	movs	r1, #0
 8003f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f02:	f7ff fe05 	bl	8003b10 <xTimerGenericCommand>
 8003f06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d14f      	bne.n	8003fae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	61bb      	str	r3, [r7, #24]
}
 8003f20:	bf00      	nop
 8003f22:	e7fe      	b.n	8003f22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003f36:	e03a      	b.n	8003fae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	617b      	str	r3, [r7, #20]
}
 8003f6a:	bf00      	nop
 8003f6c:	e7fe      	b.n	8003f6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	18d1      	adds	r1, r2, r3
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f7c:	f7ff ff06 	bl	8003d8c <prvInsertTimerInActiveList>
					break;
 8003f80:	e015      	b.n	8003fae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d103      	bne.n	8003f98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f92:	f000 fbdd 	bl	8004750 <vPortFree>
 8003f96:	e00a      	b.n	8003fae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003faa:	e000      	b.n	8003fae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003fac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fae:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <prvProcessReceivedCommands+0x1c0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	1d39      	adds	r1, r7, #4
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fbec 	bl	8002794 <xQueueReceive>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f47f af2a 	bne.w	8003e18 <prvProcessReceivedCommands+0x8>
	}
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3730      	adds	r7, #48	; 0x30
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000dcc 	.word	0x20000dcc

08003fd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fda:	e048      	b.n	800406e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fdc:	4b2d      	ldr	r3, [pc, #180]	; (8004094 <prvSwitchTimerLists+0xc0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe6:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <prvSwitchTimerLists+0xc0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe f905 	bl	8002204 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02e      	beq.n	800406e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	429a      	cmp	r2, r3
 8004020:	d90e      	bls.n	8004040 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800402e:	4b19      	ldr	r3, [pc, #100]	; (8004094 <prvSwitchTimerLists+0xc0>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3304      	adds	r3, #4
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f7fe f8aa 	bl	8002192 <vListInsert>
 800403e:	e016      	b.n	800406e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004040:	2300      	movs	r3, #0
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	2100      	movs	r1, #0
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f7ff fd60 	bl	8003b10 <xTimerGenericCommand>
 8004050:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	603b      	str	r3, [r7, #0]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <prvSwitchTimerLists+0xc0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1b1      	bne.n	8003fdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <prvSwitchTimerLists+0xc0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <prvSwitchTimerLists+0xc4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a04      	ldr	r2, [pc, #16]	; (8004094 <prvSwitchTimerLists+0xc0>)
 8004084:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004086:	4a04      	ldr	r2, [pc, #16]	; (8004098 <prvSwitchTimerLists+0xc4>)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000dc4 	.word	0x20000dc4
 8004098:	20000dc8 	.word	0x20000dc8

0800409c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80040a2:	f000 f967 	bl	8004374 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <prvCheckForValidListAndQueue+0x60>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d120      	bne.n	80040f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80040ae:	4814      	ldr	r0, [pc, #80]	; (8004100 <prvCheckForValidListAndQueue+0x64>)
 80040b0:	f7fe f81e 	bl	80020f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040b4:	4813      	ldr	r0, [pc, #76]	; (8004104 <prvCheckForValidListAndQueue+0x68>)
 80040b6:	f7fe f81b 	bl	80020f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <prvCheckForValidListAndQueue+0x6c>)
 80040bc:	4a10      	ldr	r2, [pc, #64]	; (8004100 <prvCheckForValidListAndQueue+0x64>)
 80040be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040c0:	4b12      	ldr	r3, [pc, #72]	; (800410c <prvCheckForValidListAndQueue+0x70>)
 80040c2:	4a10      	ldr	r2, [pc, #64]	; (8004104 <prvCheckForValidListAndQueue+0x68>)
 80040c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040c6:	2300      	movs	r3, #0
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	4b11      	ldr	r3, [pc, #68]	; (8004110 <prvCheckForValidListAndQueue+0x74>)
 80040cc:	4a11      	ldr	r2, [pc, #68]	; (8004114 <prvCheckForValidListAndQueue+0x78>)
 80040ce:	2110      	movs	r1, #16
 80040d0:	200a      	movs	r0, #10
 80040d2:	f7fe f929 	bl	8002328 <xQueueGenericCreateStatic>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4a08      	ldr	r2, [pc, #32]	; (80040fc <prvCheckForValidListAndQueue+0x60>)
 80040da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040dc:	4b07      	ldr	r3, [pc, #28]	; (80040fc <prvCheckForValidListAndQueue+0x60>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <prvCheckForValidListAndQueue+0x60>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	490b      	ldr	r1, [pc, #44]	; (8004118 <prvCheckForValidListAndQueue+0x7c>)
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe fd42 	bl	8002b74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040f0:	f000 f970 	bl	80043d4 <vPortExitCritical>
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000dcc 	.word	0x20000dcc
 8004100:	20000d9c 	.word	0x20000d9c
 8004104:	20000db0 	.word	0x20000db0
 8004108:	20000dc4 	.word	0x20000dc4
 800410c:	20000dc8 	.word	0x20000dc8
 8004110:	20000e78 	.word	0x20000e78
 8004114:	20000dd8 	.word	0x20000dd8
 8004118:	08004bbc 	.word	0x08004bbc

0800411c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3b04      	subs	r3, #4
 800412c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3b04      	subs	r3, #4
 800413a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f023 0201 	bic.w	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3b04      	subs	r3, #4
 800414a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800414c:	4a0c      	ldr	r2, [pc, #48]	; (8004180 <pxPortInitialiseStack+0x64>)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3b14      	subs	r3, #20
 8004156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3b04      	subs	r3, #4
 8004162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f06f 0202 	mvn.w	r2, #2
 800416a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3b20      	subs	r3, #32
 8004170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004172:	68fb      	ldr	r3, [r7, #12]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	08004185 	.word	0x08004185

08004184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800418e:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <prvTaskExitError+0x54>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004196:	d00a      	beq.n	80041ae <prvTaskExitError+0x2a>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	60fb      	str	r3, [r7, #12]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <prvTaskExitError+0x28>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	60bb      	str	r3, [r7, #8]
}
 80041c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041c2:	bf00      	nop
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0fc      	beq.n	80041c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041ca:	bf00      	nop
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	2000000c 	.word	0x2000000c
 80041dc:	00000000 	.word	0x00000000

080041e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041e0:	4b07      	ldr	r3, [pc, #28]	; (8004200 <pxCurrentTCBConst2>)
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	6808      	ldr	r0, [r1, #0]
 80041e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ea:	f380 8809 	msr	PSP, r0
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f04f 0000 	mov.w	r0, #0
 80041f6:	f380 8811 	msr	BASEPRI, r0
 80041fa:	4770      	bx	lr
 80041fc:	f3af 8000 	nop.w

08004200 <pxCurrentTCBConst2>:
 8004200:	2000089c 	.word	0x2000089c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop

08004208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004208:	4808      	ldr	r0, [pc, #32]	; (800422c <prvPortStartFirstTask+0x24>)
 800420a:	6800      	ldr	r0, [r0, #0]
 800420c:	6800      	ldr	r0, [r0, #0]
 800420e:	f380 8808 	msr	MSP, r0
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f380 8814 	msr	CONTROL, r0
 800421a:	b662      	cpsie	i
 800421c:	b661      	cpsie	f
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	df00      	svc	0
 8004228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800422a:	bf00      	nop
 800422c:	e000ed08 	.word	0xe000ed08

08004230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004236:	4b46      	ldr	r3, [pc, #280]	; (8004350 <xPortStartScheduler+0x120>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a46      	ldr	r2, [pc, #280]	; (8004354 <xPortStartScheduler+0x124>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d10a      	bne.n	8004256 <xPortStartScheduler+0x26>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	613b      	str	r3, [r7, #16]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004256:	4b3e      	ldr	r3, [pc, #248]	; (8004350 <xPortStartScheduler+0x120>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3f      	ldr	r2, [pc, #252]	; (8004358 <xPortStartScheduler+0x128>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10a      	bne.n	8004276 <xPortStartScheduler+0x46>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	60fb      	str	r3, [r7, #12]
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004276:	4b39      	ldr	r3, [pc, #228]	; (800435c <xPortStartScheduler+0x12c>)
 8004278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	22ff      	movs	r2, #255	; 0xff
 8004286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004298:	b2da      	uxtb	r2, r3
 800429a:	4b31      	ldr	r3, [pc, #196]	; (8004360 <xPortStartScheduler+0x130>)
 800429c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800429e:	4b31      	ldr	r3, [pc, #196]	; (8004364 <xPortStartScheduler+0x134>)
 80042a0:	2207      	movs	r2, #7
 80042a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042a4:	e009      	b.n	80042ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80042a6:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <xPortStartScheduler+0x134>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	4a2d      	ldr	r2, [pc, #180]	; (8004364 <xPortStartScheduler+0x134>)
 80042ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	2b80      	cmp	r3, #128	; 0x80
 80042c4:	d0ef      	beq.n	80042a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042c6:	4b27      	ldr	r3, [pc, #156]	; (8004364 <xPortStartScheduler+0x134>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1c3 0307 	rsb	r3, r3, #7
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d00a      	beq.n	80042e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	60bb      	str	r3, [r7, #8]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042e8:	4b1e      	ldr	r3, [pc, #120]	; (8004364 <xPortStartScheduler+0x134>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <xPortStartScheduler+0x134>)
 80042f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042f2:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <xPortStartScheduler+0x134>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042fa:	4a1a      	ldr	r2, [pc, #104]	; (8004364 <xPortStartScheduler+0x134>)
 80042fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	b2da      	uxtb	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004306:	4b18      	ldr	r3, [pc, #96]	; (8004368 <xPortStartScheduler+0x138>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a17      	ldr	r2, [pc, #92]	; (8004368 <xPortStartScheduler+0x138>)
 800430c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <xPortStartScheduler+0x138>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a14      	ldr	r2, [pc, #80]	; (8004368 <xPortStartScheduler+0x138>)
 8004318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800431c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800431e:	f000 f8dd 	bl	80044dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004322:	4b12      	ldr	r3, [pc, #72]	; (800436c <xPortStartScheduler+0x13c>)
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004328:	f000 f8fc 	bl	8004524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800432c:	4b10      	ldr	r3, [pc, #64]	; (8004370 <xPortStartScheduler+0x140>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <xPortStartScheduler+0x140>)
 8004332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004338:	f7ff ff66 	bl	8004208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800433c:	f7ff f84a 	bl	80033d4 <vTaskSwitchContext>
	prvTaskExitError();
 8004340:	f7ff ff20 	bl	8004184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	e000ed00 	.word	0xe000ed00
 8004354:	410fc271 	.word	0x410fc271
 8004358:	410fc270 	.word	0x410fc270
 800435c:	e000e400 	.word	0xe000e400
 8004360:	20000ec8 	.word	0x20000ec8
 8004364:	20000ecc 	.word	0x20000ecc
 8004368:	e000ed20 	.word	0xe000ed20
 800436c:	2000000c 	.word	0x2000000c
 8004370:	e000ef34 	.word	0xe000ef34

08004374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	607b      	str	r3, [r7, #4]
}
 800438c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <vPortEnterCritical+0x58>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3301      	adds	r3, #1
 8004394:	4a0d      	ldr	r2, [pc, #52]	; (80043cc <vPortEnterCritical+0x58>)
 8004396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <vPortEnterCritical+0x58>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10f      	bne.n	80043c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <vPortEnterCritical+0x5c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	603b      	str	r3, [r7, #0]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <vPortEnterCritical+0x4a>
	}
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	2000000c 	.word	0x2000000c
 80043d0:	e000ed04 	.word	0xe000ed04

080043d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043da:	4b12      	ldr	r3, [pc, #72]	; (8004424 <vPortExitCritical+0x50>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <vPortExitCritical+0x24>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	607b      	str	r3, [r7, #4]
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <vPortExitCritical+0x50>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	4a09      	ldr	r2, [pc, #36]	; (8004424 <vPortExitCritical+0x50>)
 8004400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <vPortExitCritical+0x50>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d105      	bne.n	8004416 <vPortExitCritical+0x42>
 800440a:	2300      	movs	r3, #0
 800440c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f383 8811 	msr	BASEPRI, r3
}
 8004414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	2000000c 	.word	0x2000000c
	...

08004430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004430:	f3ef 8009 	mrs	r0, PSP
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4b15      	ldr	r3, [pc, #84]	; (8004490 <pxCurrentTCBConst>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	f01e 0f10 	tst.w	lr, #16
 8004440:	bf08      	it	eq
 8004442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444a:	6010      	str	r0, [r2, #0]
 800444c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004454:	f380 8811 	msr	BASEPRI, r0
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f7fe ffb8 	bl	80033d4 <vTaskSwitchContext>
 8004464:	f04f 0000 	mov.w	r0, #0
 8004468:	f380 8811 	msr	BASEPRI, r0
 800446c:	bc09      	pop	{r0, r3}
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	6808      	ldr	r0, [r1, #0]
 8004472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004476:	f01e 0f10 	tst.w	lr, #16
 800447a:	bf08      	it	eq
 800447c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004480:	f380 8809 	msr	PSP, r0
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	f3af 8000 	nop.w

08004490 <pxCurrentTCBConst>:
 8004490:	2000089c 	.word	0x2000089c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop

08004498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
}
 80044b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044b2:	f7fe fed5 	bl	8003260 <xTaskIncrementTick>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <xPortSysTickHandler+0x40>)
 80044be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	2300      	movs	r3, #0
 80044c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f383 8811 	msr	BASEPRI, r3
}
 80044ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <vPortSetupTimerInterrupt+0x34>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044e6:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <vPortSetupTimerInterrupt+0x38>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <vPortSetupTimerInterrupt+0x3c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0a      	ldr	r2, [pc, #40]	; (800451c <vPortSetupTimerInterrupt+0x40>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	4a09      	ldr	r2, [pc, #36]	; (8004520 <vPortSetupTimerInterrupt+0x44>)
 80044fa:	3b01      	subs	r3, #1
 80044fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044fe:	4b04      	ldr	r3, [pc, #16]	; (8004510 <vPortSetupTimerInterrupt+0x34>)
 8004500:	2207      	movs	r2, #7
 8004502:	601a      	str	r2, [r3, #0]
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	e000e010 	.word	0xe000e010
 8004514:	e000e018 	.word	0xe000e018
 8004518:	20000000 	.word	0x20000000
 800451c:	10624dd3 	.word	0x10624dd3
 8004520:	e000e014 	.word	0xe000e014

08004524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004534 <vPortEnableVFP+0x10>
 8004528:	6801      	ldr	r1, [r0, #0]
 800452a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800452e:	6001      	str	r1, [r0, #0]
 8004530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004532:	bf00      	nop
 8004534:	e000ed88 	.word	0xe000ed88

08004538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800453e:	f3ef 8305 	mrs	r3, IPSR
 8004542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b0f      	cmp	r3, #15
 8004548:	d914      	bls.n	8004574 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800454a:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <vPortValidateInterruptPriority+0x70>)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004554:	4b15      	ldr	r3, [pc, #84]	; (80045ac <vPortValidateInterruptPriority+0x74>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	7afa      	ldrb	r2, [r7, #11]
 800455a:	429a      	cmp	r2, r3
 800455c:	d20a      	bcs.n	8004574 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	607b      	str	r3, [r7, #4]
}
 8004570:	bf00      	nop
 8004572:	e7fe      	b.n	8004572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <vPortValidateInterruptPriority+0x78>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800457c:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <vPortValidateInterruptPriority+0x7c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d90a      	bls.n	800459a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	603b      	str	r3, [r7, #0]
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <vPortValidateInterruptPriority+0x60>
	}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	e000e3f0 	.word	0xe000e3f0
 80045ac:	20000ec8 	.word	0x20000ec8
 80045b0:	e000ed0c 	.word	0xe000ed0c
 80045b4:	20000ecc 	.word	0x20000ecc

080045b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	; 0x28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045c4:	f7fe fd90 	bl	80030e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045c8:	4b5b      	ldr	r3, [pc, #364]	; (8004738 <pvPortMalloc+0x180>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045d0:	f000 f920 	bl	8004814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045d4:	4b59      	ldr	r3, [pc, #356]	; (800473c <pvPortMalloc+0x184>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f040 8093 	bne.w	8004708 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01d      	beq.n	8004624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045e8:	2208      	movs	r2, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d014      	beq.n	8004624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f023 0307 	bic.w	r3, r3, #7
 8004600:	3308      	adds	r3, #8
 8004602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <pvPortMalloc+0x6c>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	617b      	str	r3, [r7, #20]
}
 8004620:	bf00      	nop
 8004622:	e7fe      	b.n	8004622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d06e      	beq.n	8004708 <pvPortMalloc+0x150>
 800462a:	4b45      	ldr	r3, [pc, #276]	; (8004740 <pvPortMalloc+0x188>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d869      	bhi.n	8004708 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <pvPortMalloc+0x18c>)
 8004636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004638:	4b42      	ldr	r3, [pc, #264]	; (8004744 <pvPortMalloc+0x18c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800463e:	e004      	b.n	800464a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d903      	bls.n	800465c <pvPortMalloc+0xa4>
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f1      	bne.n	8004640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800465c:	4b36      	ldr	r3, [pc, #216]	; (8004738 <pvPortMalloc+0x180>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004662:	429a      	cmp	r2, r3
 8004664:	d050      	beq.n	8004708 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2208      	movs	r2, #8
 800466c:	4413      	add	r3, r2
 800466e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad2      	subs	r2, r2, r3
 8004680:	2308      	movs	r3, #8
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	429a      	cmp	r2, r3
 8004686:	d91f      	bls.n	80046c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <pvPortMalloc+0xf8>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	613b      	str	r3, [r7, #16]
}
 80046ac:	bf00      	nop
 80046ae:	e7fe      	b.n	80046ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	1ad2      	subs	r2, r2, r3
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046c2:	69b8      	ldr	r0, [r7, #24]
 80046c4:	f000 f908 	bl	80048d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046c8:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <pvPortMalloc+0x188>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <pvPortMalloc+0x188>)
 80046d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046d6:	4b1a      	ldr	r3, [pc, #104]	; (8004740 <pvPortMalloc+0x188>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <pvPortMalloc+0x190>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d203      	bcs.n	80046ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046e2:	4b17      	ldr	r3, [pc, #92]	; (8004740 <pvPortMalloc+0x188>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a18      	ldr	r2, [pc, #96]	; (8004748 <pvPortMalloc+0x190>)
 80046e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <pvPortMalloc+0x184>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <pvPortMalloc+0x194>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	4a11      	ldr	r2, [pc, #68]	; (800474c <pvPortMalloc+0x194>)
 8004706:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004708:	f7fe fcfc 	bl	8003104 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <pvPortMalloc+0x174>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	60fb      	str	r3, [r7, #12]
}
 8004728:	bf00      	nop
 800472a:	e7fe      	b.n	800472a <pvPortMalloc+0x172>
	return pvReturn;
 800472c:	69fb      	ldr	r3, [r7, #28]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3728      	adds	r7, #40	; 0x28
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20004ad8 	.word	0x20004ad8
 800473c:	20004aec 	.word	0x20004aec
 8004740:	20004adc 	.word	0x20004adc
 8004744:	20004ad0 	.word	0x20004ad0
 8004748:	20004ae0 	.word	0x20004ae0
 800474c:	20004ae4 	.word	0x20004ae4

08004750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d04d      	beq.n	80047fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004762:	2308      	movs	r3, #8
 8004764:	425b      	negs	r3, r3
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4413      	add	r3, r2
 800476a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	4b24      	ldr	r3, [pc, #144]	; (8004808 <vPortFree+0xb8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <vPortFree+0x44>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	60fb      	str	r3, [r7, #12]
}
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <vPortFree+0x62>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	60bb      	str	r3, [r7, #8]
}
 80047ae:	bf00      	nop
 80047b0:	e7fe      	b.n	80047b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	4b14      	ldr	r3, [pc, #80]	; (8004808 <vPortFree+0xb8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01e      	beq.n	80047fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d11a      	bne.n	80047fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <vPortFree+0xb8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	401a      	ands	r2, r3
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047d8:	f7fe fc86 	bl	80030e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	4b0a      	ldr	r3, [pc, #40]	; (800480c <vPortFree+0xbc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4413      	add	r3, r2
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <vPortFree+0xbc>)
 80047e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047ea:	6938      	ldr	r0, [r7, #16]
 80047ec:	f000 f874 	bl	80048d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <vPortFree+0xc0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	4a06      	ldr	r2, [pc, #24]	; (8004810 <vPortFree+0xc0>)
 80047f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047fa:	f7fe fc83 	bl	8003104 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047fe:	bf00      	nop
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20004aec 	.word	0x20004aec
 800480c:	20004adc 	.word	0x20004adc
 8004810:	20004ae8 	.word	0x20004ae8

08004814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800481a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800481e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004820:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <prvHeapInit+0xac>)
 8004822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00c      	beq.n	8004848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3307      	adds	r3, #7
 8004832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0307 	bic.w	r3, r3, #7
 800483a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <prvHeapInit+0xac>)
 8004844:	4413      	add	r3, r2
 8004846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800484c:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <prvHeapInit+0xb0>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004852:	4b1c      	ldr	r3, [pc, #112]	; (80048c4 <prvHeapInit+0xb0>)
 8004854:	2200      	movs	r2, #0
 8004856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	4413      	add	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004860:	2208      	movs	r2, #8
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <prvHeapInit+0xb4>)
 8004874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <prvHeapInit+0xb4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2200      	movs	r2, #0
 800487c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <prvHeapInit+0xb4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	1ad2      	subs	r2, r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <prvHeapInit+0xb4>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <prvHeapInit+0xb8>)
 80048a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <prvHeapInit+0xbc>)
 80048aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048ac:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <prvHeapInit+0xc0>)
 80048ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048b2:	601a      	str	r2, [r3, #0]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	20000ed0 	.word	0x20000ed0
 80048c4:	20004ad0 	.word	0x20004ad0
 80048c8:	20004ad8 	.word	0x20004ad8
 80048cc:	20004ae0 	.word	0x20004ae0
 80048d0:	20004adc 	.word	0x20004adc
 80048d4:	20004aec 	.word	0x20004aec

080048d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048e0:	4b28      	ldr	r3, [pc, #160]	; (8004984 <prvInsertBlockIntoFreeList+0xac>)
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e002      	b.n	80048ec <prvInsertBlockIntoFreeList+0x14>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d8f7      	bhi.n	80048e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d108      	bne.n	800491a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	441a      	add	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d118      	bne.n	8004960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <prvInsertBlockIntoFreeList+0xb0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d00d      	beq.n	8004956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	441a      	add	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e008      	b.n	8004968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <prvInsertBlockIntoFreeList+0xb0>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e003      	b.n	8004968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	429a      	cmp	r2, r3
 800496e:	d002      	beq.n	8004976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20004ad0 	.word	0x20004ad0
 8004988:	20004ad8 	.word	0x20004ad8

0800498c <__libc_init_array>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	4d0d      	ldr	r5, [pc, #52]	; (80049c4 <__libc_init_array+0x38>)
 8004990:	4c0d      	ldr	r4, [pc, #52]	; (80049c8 <__libc_init_array+0x3c>)
 8004992:	1b64      	subs	r4, r4, r5
 8004994:	10a4      	asrs	r4, r4, #2
 8004996:	2600      	movs	r6, #0
 8004998:	42a6      	cmp	r6, r4
 800499a:	d109      	bne.n	80049b0 <__libc_init_array+0x24>
 800499c:	4d0b      	ldr	r5, [pc, #44]	; (80049cc <__libc_init_array+0x40>)
 800499e:	4c0c      	ldr	r4, [pc, #48]	; (80049d0 <__libc_init_array+0x44>)
 80049a0:	f000 f8f2 	bl	8004b88 <_init>
 80049a4:	1b64      	subs	r4, r4, r5
 80049a6:	10a4      	asrs	r4, r4, #2
 80049a8:	2600      	movs	r6, #0
 80049aa:	42a6      	cmp	r6, r4
 80049ac:	d105      	bne.n	80049ba <__libc_init_array+0x2e>
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b4:	4798      	blx	r3
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7ee      	b.n	8004998 <__libc_init_array+0xc>
 80049ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80049be:	4798      	blx	r3
 80049c0:	3601      	adds	r6, #1
 80049c2:	e7f2      	b.n	80049aa <__libc_init_array+0x1e>
 80049c4:	08004c68 	.word	0x08004c68
 80049c8:	08004c68 	.word	0x08004c68
 80049cc:	08004c68 	.word	0x08004c68
 80049d0:	08004c6c 	.word	0x08004c6c

080049d4 <__retarget_lock_acquire_recursive>:
 80049d4:	4770      	bx	lr

080049d6 <__retarget_lock_release_recursive>:
 80049d6:	4770      	bx	lr

080049d8 <memcpy>:
 80049d8:	440a      	add	r2, r1
 80049da:	4291      	cmp	r1, r2
 80049dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049e0:	d100      	bne.n	80049e4 <memcpy+0xc>
 80049e2:	4770      	bx	lr
 80049e4:	b510      	push	{r4, lr}
 80049e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ee:	4291      	cmp	r1, r2
 80049f0:	d1f9      	bne.n	80049e6 <memcpy+0xe>
 80049f2:	bd10      	pop	{r4, pc}

080049f4 <memset>:
 80049f4:	4402      	add	r2, r0
 80049f6:	4603      	mov	r3, r0
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d100      	bne.n	80049fe <memset+0xa>
 80049fc:	4770      	bx	lr
 80049fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004a02:	e7f9      	b.n	80049f8 <memset+0x4>

08004a04 <cleanup_glue>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	460c      	mov	r4, r1
 8004a08:	6809      	ldr	r1, [r1, #0]
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	b109      	cbz	r1, 8004a12 <cleanup_glue+0xe>
 8004a0e:	f7ff fff9 	bl	8004a04 <cleanup_glue>
 8004a12:	4621      	mov	r1, r4
 8004a14:	4628      	mov	r0, r5
 8004a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a1a:	f000 b869 	b.w	8004af0 <_free_r>
	...

08004a20 <_reclaim_reent>:
 8004a20:	4b2c      	ldr	r3, [pc, #176]	; (8004ad4 <_reclaim_reent+0xb4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4283      	cmp	r3, r0
 8004a26:	b570      	push	{r4, r5, r6, lr}
 8004a28:	4604      	mov	r4, r0
 8004a2a:	d051      	beq.n	8004ad0 <_reclaim_reent+0xb0>
 8004a2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a2e:	b143      	cbz	r3, 8004a42 <_reclaim_reent+0x22>
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d14a      	bne.n	8004acc <_reclaim_reent+0xac>
 8004a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a38:	6819      	ldr	r1, [r3, #0]
 8004a3a:	b111      	cbz	r1, 8004a42 <_reclaim_reent+0x22>
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f000 f857 	bl	8004af0 <_free_r>
 8004a42:	6961      	ldr	r1, [r4, #20]
 8004a44:	b111      	cbz	r1, 8004a4c <_reclaim_reent+0x2c>
 8004a46:	4620      	mov	r0, r4
 8004a48:	f000 f852 	bl	8004af0 <_free_r>
 8004a4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a4e:	b111      	cbz	r1, 8004a56 <_reclaim_reent+0x36>
 8004a50:	4620      	mov	r0, r4
 8004a52:	f000 f84d 	bl	8004af0 <_free_r>
 8004a56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a58:	b111      	cbz	r1, 8004a60 <_reclaim_reent+0x40>
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 f848 	bl	8004af0 <_free_r>
 8004a60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004a62:	b111      	cbz	r1, 8004a6a <_reclaim_reent+0x4a>
 8004a64:	4620      	mov	r0, r4
 8004a66:	f000 f843 	bl	8004af0 <_free_r>
 8004a6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004a6c:	b111      	cbz	r1, 8004a74 <_reclaim_reent+0x54>
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f000 f83e 	bl	8004af0 <_free_r>
 8004a74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a76:	b111      	cbz	r1, 8004a7e <_reclaim_reent+0x5e>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 f839 	bl	8004af0 <_free_r>
 8004a7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004a80:	b111      	cbz	r1, 8004a88 <_reclaim_reent+0x68>
 8004a82:	4620      	mov	r0, r4
 8004a84:	f000 f834 	bl	8004af0 <_free_r>
 8004a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a8a:	b111      	cbz	r1, 8004a92 <_reclaim_reent+0x72>
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 f82f 	bl	8004af0 <_free_r>
 8004a92:	69a3      	ldr	r3, [r4, #24]
 8004a94:	b1e3      	cbz	r3, 8004ad0 <_reclaim_reent+0xb0>
 8004a96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a98:	4620      	mov	r0, r4
 8004a9a:	4798      	blx	r3
 8004a9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004a9e:	b1b9      	cbz	r1, 8004ad0 <_reclaim_reent+0xb0>
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004aa6:	f7ff bfad 	b.w	8004a04 <cleanup_glue>
 8004aaa:	5949      	ldr	r1, [r1, r5]
 8004aac:	b941      	cbnz	r1, 8004ac0 <_reclaim_reent+0xa0>
 8004aae:	3504      	adds	r5, #4
 8004ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ab2:	2d80      	cmp	r5, #128	; 0x80
 8004ab4:	68d9      	ldr	r1, [r3, #12]
 8004ab6:	d1f8      	bne.n	8004aaa <_reclaim_reent+0x8a>
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 f819 	bl	8004af0 <_free_r>
 8004abe:	e7ba      	b.n	8004a36 <_reclaim_reent+0x16>
 8004ac0:	680e      	ldr	r6, [r1, #0]
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f000 f814 	bl	8004af0 <_free_r>
 8004ac8:	4631      	mov	r1, r6
 8004aca:	e7ef      	b.n	8004aac <_reclaim_reent+0x8c>
 8004acc:	2500      	movs	r5, #0
 8004ace:	e7ef      	b.n	8004ab0 <_reclaim_reent+0x90>
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000010 	.word	0x20000010

08004ad8 <__malloc_lock>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	; (8004ae0 <__malloc_lock+0x8>)
 8004ada:	f7ff bf7b 	b.w	80049d4 <__retarget_lock_acquire_recursive>
 8004ade:	bf00      	nop
 8004ae0:	20004af0 	.word	0x20004af0

08004ae4 <__malloc_unlock>:
 8004ae4:	4801      	ldr	r0, [pc, #4]	; (8004aec <__malloc_unlock+0x8>)
 8004ae6:	f7ff bf76 	b.w	80049d6 <__retarget_lock_release_recursive>
 8004aea:	bf00      	nop
 8004aec:	20004af0 	.word	0x20004af0

08004af0 <_free_r>:
 8004af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004af2:	2900      	cmp	r1, #0
 8004af4:	d044      	beq.n	8004b80 <_free_r+0x90>
 8004af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004afa:	9001      	str	r0, [sp, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f1a1 0404 	sub.w	r4, r1, #4
 8004b02:	bfb8      	it	lt
 8004b04:	18e4      	addlt	r4, r4, r3
 8004b06:	f7ff ffe7 	bl	8004ad8 <__malloc_lock>
 8004b0a:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <_free_r+0x94>)
 8004b0c:	9801      	ldr	r0, [sp, #4]
 8004b0e:	6813      	ldr	r3, [r2, #0]
 8004b10:	b933      	cbnz	r3, 8004b20 <_free_r+0x30>
 8004b12:	6063      	str	r3, [r4, #4]
 8004b14:	6014      	str	r4, [r2, #0]
 8004b16:	b003      	add	sp, #12
 8004b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b1c:	f7ff bfe2 	b.w	8004ae4 <__malloc_unlock>
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	d908      	bls.n	8004b36 <_free_r+0x46>
 8004b24:	6825      	ldr	r5, [r4, #0]
 8004b26:	1961      	adds	r1, r4, r5
 8004b28:	428b      	cmp	r3, r1
 8004b2a:	bf01      	itttt	eq
 8004b2c:	6819      	ldreq	r1, [r3, #0]
 8004b2e:	685b      	ldreq	r3, [r3, #4]
 8004b30:	1949      	addeq	r1, r1, r5
 8004b32:	6021      	streq	r1, [r4, #0]
 8004b34:	e7ed      	b.n	8004b12 <_free_r+0x22>
 8004b36:	461a      	mov	r2, r3
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	b10b      	cbz	r3, 8004b40 <_free_r+0x50>
 8004b3c:	42a3      	cmp	r3, r4
 8004b3e:	d9fa      	bls.n	8004b36 <_free_r+0x46>
 8004b40:	6811      	ldr	r1, [r2, #0]
 8004b42:	1855      	adds	r5, r2, r1
 8004b44:	42a5      	cmp	r5, r4
 8004b46:	d10b      	bne.n	8004b60 <_free_r+0x70>
 8004b48:	6824      	ldr	r4, [r4, #0]
 8004b4a:	4421      	add	r1, r4
 8004b4c:	1854      	adds	r4, r2, r1
 8004b4e:	42a3      	cmp	r3, r4
 8004b50:	6011      	str	r1, [r2, #0]
 8004b52:	d1e0      	bne.n	8004b16 <_free_r+0x26>
 8004b54:	681c      	ldr	r4, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	6053      	str	r3, [r2, #4]
 8004b5a:	4421      	add	r1, r4
 8004b5c:	6011      	str	r1, [r2, #0]
 8004b5e:	e7da      	b.n	8004b16 <_free_r+0x26>
 8004b60:	d902      	bls.n	8004b68 <_free_r+0x78>
 8004b62:	230c      	movs	r3, #12
 8004b64:	6003      	str	r3, [r0, #0]
 8004b66:	e7d6      	b.n	8004b16 <_free_r+0x26>
 8004b68:	6825      	ldr	r5, [r4, #0]
 8004b6a:	1961      	adds	r1, r4, r5
 8004b6c:	428b      	cmp	r3, r1
 8004b6e:	bf04      	itt	eq
 8004b70:	6819      	ldreq	r1, [r3, #0]
 8004b72:	685b      	ldreq	r3, [r3, #4]
 8004b74:	6063      	str	r3, [r4, #4]
 8004b76:	bf04      	itt	eq
 8004b78:	1949      	addeq	r1, r1, r5
 8004b7a:	6021      	streq	r1, [r4, #0]
 8004b7c:	6054      	str	r4, [r2, #4]
 8004b7e:	e7ca      	b.n	8004b16 <_free_r+0x26>
 8004b80:	b003      	add	sp, #12
 8004b82:	bd30      	pop	{r4, r5, pc}
 8004b84:	20004af4 	.word	0x20004af4

08004b88 <_init>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	bf00      	nop
 8004b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8e:	bc08      	pop	{r3}
 8004b90:	469e      	mov	lr, r3
 8004b92:	4770      	bx	lr

08004b94 <_fini>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr
